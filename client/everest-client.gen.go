// Package client provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/deepmap/oapi-codegen/v2 version v2.1.0 DO NOT EDIT.
package client

import (
	"bytes"
	"compress/gzip"
	"context"
	"encoding/base64"
	"encoding/json"
	"fmt"
	"io"
	"net/http"
	"net/url"
	"path"
	"strings"
	"time"

	"github.com/getkin/kin-openapi/openapi3"
	"github.com/oapi-codegen/runtime"
)

const (
	BearerAuthScopes = "BearerAuth.Scopes"
)

// Defines values for BackupStorageType.
const (
	BackupStorageTypeAzure BackupStorageType = "azure"
	BackupStorageTypeS3    BackupStorageType = "s3"
)

// Defines values for CreateBackupStorageParamsType.
const (
	CreateBackupStorageParamsTypeAzure CreateBackupStorageParamsType = "azure"
	CreateBackupStorageParamsTypeS3    CreateBackupStorageParamsType = "s3"
)

// Defines values for DatabaseClusterSpecDataSourcePitrType.
const (
	DatabaseClusterSpecDataSourcePitrTypeDate   DatabaseClusterSpecDataSourcePitrType = "date"
	DatabaseClusterSpecDataSourcePitrTypeLatest DatabaseClusterSpecDataSourcePitrType = "latest"
)

// Defines values for DatabaseClusterSpecEngineType.
const (
	DatabaseClusterSpecEngineTypePostgresql DatabaseClusterSpecEngineType = "postgresql"
	DatabaseClusterSpecEngineTypePsmdb      DatabaseClusterSpecEngineType = "psmdb"
	DatabaseClusterSpecEngineTypePxc        DatabaseClusterSpecEngineType = "pxc"
)

// Defines values for DatabaseClusterSpecProxyExposeType.
const (
	External DatabaseClusterSpecProxyExposeType = "external"
	Internal DatabaseClusterSpecProxyExposeType = "internal"
)

// Defines values for DatabaseClusterSpecProxyType.
const (
	Haproxy   DatabaseClusterSpecProxyType = "haproxy"
	Mongos    DatabaseClusterSpecProxyType = "mongos"
	Pgbouncer DatabaseClusterSpecProxyType = "pgbouncer"
	Proxysql  DatabaseClusterSpecProxyType = "proxysql"
)

// Defines values for DatabaseClusterStatusConditionsStatus.
const (
	False   DatabaseClusterStatusConditionsStatus = "False"
	True    DatabaseClusterStatusConditionsStatus = "True"
	Unknown DatabaseClusterStatusConditionsStatus = "Unknown"
)

// Defines values for DatabaseClusterRestoreSpecDataSourcePitrType.
const (
	DatabaseClusterRestoreSpecDataSourcePitrTypeDate   DatabaseClusterRestoreSpecDataSourcePitrType = "date"
	DatabaseClusterRestoreSpecDataSourcePitrTypeLatest DatabaseClusterRestoreSpecDataSourcePitrType = "latest"
)

// Defines values for MonitoringInstanceBaseType.
const (
	MonitoringInstanceBaseTypePmm MonitoringInstanceBaseType = "pmm"
)

// Defines values for MonitoringInstanceBaseWithNameType.
const (
	MonitoringInstanceBaseWithNameTypePmm MonitoringInstanceBaseWithNameType = "pmm"
)

// Defines values for MonitoringInstanceCreateParamsType.
const (
	MonitoringInstanceCreateParamsTypePmm MonitoringInstanceCreateParamsType = "pmm"
)

// Defines values for MonitoringInstanceUpdateParamsType.
const (
	MonitoringInstanceUpdateParamsTypePmm MonitoringInstanceUpdateParamsType = "pmm"
)

// Defines values for PodSchedulingPolicySpecEngineType.
const (
	PodSchedulingPolicySpecEngineTypePostgresql PodSchedulingPolicySpecEngineType = "postgresql"
	PodSchedulingPolicySpecEngineTypePsmdb      PodSchedulingPolicySpecEngineType = "psmdb"
	PodSchedulingPolicySpecEngineTypePxc        PodSchedulingPolicySpecEngineType = "pxc"
)

// Defines values for UpgradeTaskPendingTask.
const (
	NotReady      UpgradeTaskPendingTask = "notReady"
	Ready         UpgradeTaskPendingTask = "ready"
	Restart       UpgradeTaskPendingTask = "restart"
	UpgradeEngine UpgradeTaskPendingTask = "upgradeEngine"
)

// Defines values for ListPodSchedulingPolicyParamsEngineType.
const (
	Postgresql ListPodSchedulingPolicyParamsEngineType = "postgresql"
	Psmdb      ListPodSchedulingPolicyParamsEngineType = "psmdb"
	Pxc        ListPodSchedulingPolicyParamsEngineType = "pxc"
)

// BackupStorage Backup storage information
type BackupStorage struct {
	// AllowedNamespaces List of namespaces allowed to use this backup storage
	// Deprecated:
	AllowedNamespaces *[]string         `json:"allowedNamespaces,omitempty"`
	BucketName        string            `json:"bucketName"`
	Description       *string           `json:"description,omitempty"`
	ForcePathStyle    *bool             `json:"forcePathStyle,omitempty"`
	Name              string            `json:"name"`
	Namespace         string            `json:"namespace,omitempty"`
	Region            string            `json:"region,omitempty"`
	Type              BackupStorageType `json:"type"`
	Url               *string           `json:"url,omitempty"`
	VerifyTLS         *bool             `json:"verifyTLS,omitempty"`
}

// BackupStorageType defines model for BackupStorage.Type.
type BackupStorageType string

// BackupStoragesList defines model for BackupStoragesList.
type BackupStoragesList = []BackupStorage

// CreateBackupStorageParams Backup storage parameters
type CreateBackupStorageParams struct {
	AccessKey string `json:"accessKey"`

	// AllowedNamespaces List of namespaces allowed to use this backup storage
	// Deprecated:
	AllowedNamespaces *[]string `json:"allowedNamespaces,omitempty"`

	// BucketName The cloud storage bucket/container name
	BucketName     string  `json:"bucketName"`
	Description    *string `json:"description,omitempty"`
	ForcePathStyle *bool   `json:"forcePathStyle,omitempty"`

	// Name A user defined string name of the storage in the DNS name format https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#dns-label-names
	Name      string                        `json:"name"`
	Region    string                        `json:"region,omitempty"`
	SecretKey string                        `json:"secretKey"`
	Type      CreateBackupStorageParamsType `json:"type"`
	Url       *string                       `json:"url,omitempty"`
	VerifyTLS *bool                         `json:"verifyTLS,omitempty"`
}

// CreateBackupStorageParamsType defines model for CreateBackupStorageParams.Type.
type CreateBackupStorageParamsType string

// DatabaseCluster DatabaseCluster is the Schema for the databaseclusters API.
type DatabaseCluster struct {
	// ApiVersion APIVersion defines the versioned schema of this representation of an object.
	// Servers should convert recognized schemas to the latest internal value, and
	// may reject unrecognized values.
	// More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
	ApiVersion *string `json:"apiVersion,omitempty"`

	// Kind Kind is a string value representing the REST resource this object represents.
	// Servers may infer this from the endpoint the client submits requests to.
	// Cannot be updated.
	// In CamelCase.
	// More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
	Kind     *string                 `json:"kind,omitempty"`
	Metadata *map[string]interface{} `json:"metadata,omitempty"`

	// Spec DatabaseClusterSpec defines the desired state of DatabaseCluster.
	Spec *struct {
		// AllowUnsafeConfiguration AllowUnsafeConfiguration field used to ensure that the user can create configurations unfit for production use.
		//
		// Deprecated: AllowUnsafeConfiguration will not be supported in the future releases.
		AllowUnsafeConfiguration *bool `json:"allowUnsafeConfiguration,omitempty"`

		// Backup Backup is the backup specification
		Backup *struct {
			// Enabled Enabled is a flag to enable backups
			// Deprecated. Please use db.spec.backup.schedules[].enabled to control each schedule separately and db.spec.backup.pitr.enabled to control PITR.
			Enabled *bool `json:"enabled,omitempty"`

			// Pitr PITR is the configuration of the point in time recovery
			Pitr *struct {
				// BackupStorageName BackupStorageName is the name of the BackupStorage where the PITR is enabled
				// The BackupStorage must be created in the same namespace as the DatabaseCluster.
				BackupStorageName *string `json:"backupStorageName,omitempty"`

				// Enabled Enabled is a flag to enable PITR
				Enabled bool `json:"enabled"`

				// UploadIntervalSec UploadIntervalSec number of seconds between the binlogs uploads
				UploadIntervalSec *int `json:"uploadIntervalSec,omitempty"`
			} `json:"pitr,omitempty"`

			// Schedules Schedules is a list of backup schedules
			Schedules *[]struct {
				// BackupStorageName BackupStorageName is the name of the BackupStorage CR that defines the
				// storage location.
				// The BackupStorage must be created in the same namespace as the DatabaseCluster.
				BackupStorageName string `json:"backupStorageName"`

				// Enabled Enabled is a flag to enable the schedule
				Enabled bool `json:"enabled"`

				// Name Name is the name of the schedule
				Name string `json:"name"`

				// RetentionCopies RetentionCopies is the number of backup copies to retain
				RetentionCopies *int32 `json:"retentionCopies,omitempty"`

				// Schedule Schedule is the cron schedule
				Schedule string `json:"schedule"`
			} `json:"schedules,omitempty"`
		} `json:"backup,omitempty"`

		// DataSource DataSource defines a data source for bootstraping a new cluster
		DataSource *struct {
			// BackupSource BackupSource is the backup source to restore from
			BackupSource *struct {
				// BackupStorageName BackupStorageName is the name of the BackupStorage used for backups.
				// The BackupStorage must be created in the same namespace as the DatabaseCluster.
				BackupStorageName string `json:"backupStorageName"`

				// Path Path is the path to the backup file/directory.
				Path string `json:"path"`
			} `json:"backupSource,omitempty"`

			// DbClusterBackupName DBClusterBackupName is the name of the DB cluster backup to restore from
			DbClusterBackupName *string `json:"dbClusterBackupName,omitempty"`

			// Pitr PITR is the point-in-time recovery configuration
			Pitr *struct {
				// Date Date is the UTC date to recover to. The accepted format: "2006-01-02T15:04:05Z".
				Date *string `json:"date,omitempty"`

				// Type Type is the type of recovery.
				Type *DatabaseClusterSpecDataSourcePitrType `json:"type,omitempty"`
			} `json:"pitr,omitempty"`
		} `json:"dataSource,omitempty"`

		// Engine Engine is the database engine specification
		Engine struct {
			// Config Config is the engine configuration
			Config *string `json:"config,omitempty"`

			// CrVersion CRVersion is the desired version of the CR to use with the
			// underlying operator.
			// If unspecified, everest-operator will use the same version as the operator.
			//
			// NOTE: Updating this property post installation may lead to a restart of the cluster.
			CrVersion *string `json:"crVersion,omitempty"`

			// Replicas Replicas is the number of engine replicas
			Replicas *int32 `json:"replicas,omitempty"`

			// Resources Resources are the resource limits for each engine replica.
			// If not set, resource limits are not imposed
			Resources *struct {
				// Cpu CPU is the CPU resource requirements
				Cpu *DatabaseCluster_Spec_Engine_Resources_Cpu `json:"cpu,omitempty"`

				// Memory Memory is the memory resource requirements
				Memory *DatabaseCluster_Spec_Engine_Resources_Memory `json:"memory,omitempty"`
			} `json:"resources,omitempty"`

			// Storage Storage is the engine storage configuration
			Storage struct {
				// Class Class is the storage class to use for the persistent volume claim
				Class *string `json:"class,omitempty"`

				// Size Size is the size of the persistent volume claim
				Size DatabaseCluster_Spec_Engine_Storage_Size `json:"size"`
			} `json:"storage"`

			// Type Type is the engine type
			Type DatabaseClusterSpecEngineType `json:"type"`

			// UserSecretsName UserSecretsName is the name of the secret containing the user secrets
			UserSecretsName *string `json:"userSecretsName,omitempty"`

			// Version Version is the engine version
			Version *string `json:"version,omitempty"`
		} `json:"engine"`

		// Monitoring Monitoring is the monitoring configuration
		Monitoring *struct {
			// MonitoringConfigName MonitoringConfigName is the name of a monitoringConfig CR.
			// The MonitoringConfig must be created in the same namespace as the DatabaseCluster.
			MonitoringConfigName *string `json:"monitoringConfigName,omitempty"`

			// Resources Resources defines resource limitations for the monitoring.
			Resources *struct {
				// Claims Claims lists the names of resources, defined in spec.resourceClaims,
				// that are used by this container.
				//
				// This is an alpha field and requires enabling the
				// DynamicResourceAllocation feature gate.
				//
				// This field is immutable. It can only be set for containers.
				Claims *[]struct {
					// Name Name must match the name of one entry in pod.spec.resourceClaims of
					// the Pod where this field is used. It makes that resource available
					// inside a container.
					Name string `json:"name"`

					// Request Request is the name chosen for a request in the referenced claim.
					// If empty, everything from the claim is made available, otherwise
					// only the result of this request.
					Request *string `json:"request,omitempty"`
				} `json:"claims,omitempty"`

				// Limits Limits describes the maximum amount of compute resources allowed.
				// More info: https://kubernetes.io/docs/concepts/configuration/manage-resources-containers/
				Limits *map[string]DatabaseCluster_Spec_Monitoring_Resources_Limits_AdditionalProperties `json:"limits,omitempty"`

				// Requests Requests describes the minimum amount of compute resources required.
				// If Requests is omitted for a container, it defaults to Limits if that is explicitly specified,
				// otherwise to an implementation-defined value. Requests cannot exceed Limits.
				// More info: https://kubernetes.io/docs/concepts/configuration/manage-resources-containers/
				Requests *map[string]DatabaseCluster_Spec_Monitoring_Resources_Requests_AdditionalProperties `json:"requests,omitempty"`
			} `json:"resources,omitempty"`
		} `json:"monitoring,omitempty"`

		// Paused Paused is a flag to stop the cluster
		Paused *bool `json:"paused,omitempty"`

		// PodSchedulingPolicyName PodSchedulingPolicyName is the name of the PodSchedulingPolicy CR that defines rules for DB cluster pods allocation across the cluster.
		PodSchedulingPolicyName *string `json:"podSchedulingPolicyName,omitempty"`

		// Proxy Proxy is the proxy specification. If not set, an appropriate
		// proxy specification will be applied for the given engine. A
		// common use case for setting this field is to control the
		// external access to the database cluster.
		Proxy *struct {
			// Config Config is the proxy configuration
			Config *string `json:"config,omitempty"`

			// Expose Expose is the proxy expose configuration
			Expose *struct {
				// IpSourceRanges IPSourceRanges is the list of IP source ranges (CIDR notation)
				// to allow access from. If not set, there is no limitations
				IpSourceRanges *[]string `json:"ipSourceRanges,omitempty"`

				// Type Type is the expose type, can be internal or external
				Type *DatabaseClusterSpecProxyExposeType `json:"type,omitempty"`
			} `json:"expose,omitempty"`

			// Replicas Replicas is the number of proxy replicas
			Replicas *int32 `json:"replicas,omitempty"`

			// Resources Resources are the resource limits for each proxy replica.
			// If not set, resource limits are not imposed
			Resources *struct {
				// Cpu CPU is the CPU resource requirements
				Cpu *DatabaseCluster_Spec_Proxy_Resources_Cpu `json:"cpu,omitempty"`

				// Memory Memory is the memory resource requirements
				Memory *DatabaseCluster_Spec_Proxy_Resources_Memory `json:"memory,omitempty"`
			} `json:"resources,omitempty"`

			// Type Type is the proxy type
			Type *DatabaseClusterSpecProxyType `json:"type,omitempty"`
		} `json:"proxy,omitempty"`

		// Sharding Sharding is the sharding configuration. PSMDB-only
		Sharding *struct {
			// ConfigServer ConfigServer represents the sharding configuration server settings
			ConfigServer struct {
				// Replicas Replicas is the amount of configServers
				Replicas int32 `json:"replicas"`
			} `json:"configServer"`

			// Enabled Enabled defines if the sharding is enabled
			Enabled bool `json:"enabled"`

			// Shards Shards defines the number of shards
			Shards int32 `json:"shards"`
		} `json:"sharding,omitempty"`
	} `json:"spec,omitempty"`

	// Status DatabaseClusterStatus defines the observed state of DatabaseCluster.
	Status *struct {
		// ActiveStorage ActiveStorage is the storage used in cluster (psmdb only)
		ActiveStorage *string `json:"activeStorage,omitempty"`

		// Conditions Conditions contains the observed conditions of the DatabaseCluster.
		Conditions *[]struct {
			// LastTransitionTime lastTransitionTime is the last time the condition transitioned from one status to another.
			// This should be when the underlying condition changed.  If that is not known, then using the time when the API field changed is acceptable.
			LastTransitionTime time.Time `json:"lastTransitionTime"`

			// Message message is a human readable message indicating details about the transition.
			// This may be an empty string.
			Message string `json:"message"`

			// ObservedGeneration observedGeneration represents the .metadata.generation that the condition was set based upon.
			// For instance, if .metadata.generation is currently 12, but the .status.conditions[x].observedGeneration is 9, the condition is out of date
			// with respect to the current state of the instance.
			ObservedGeneration *int64 `json:"observedGeneration,omitempty"`

			// Reason reason contains a programmatic identifier indicating the reason for the condition's last transition.
			// Producers of specific condition types may define expected values and meanings for this field,
			// and whether the values are considered a guaranteed API.
			// The value should be a CamelCase string.
			// This field may not be empty.
			Reason string `json:"reason"`

			// Status status of the condition, one of True, False, Unknown.
			Status DatabaseClusterStatusConditionsStatus `json:"status"`

			// Type type of condition in CamelCase or in foo.example.com/CamelCase.
			Type string `json:"type"`
		} `json:"conditions,omitempty"`

		// CrVersion CRVersion is the observed version of the CR used with the underlying operator.
		CrVersion *string `json:"crVersion,omitempty"`

		// Details Details provides full status of the upstream cluster as a plain text.
		Details *string `json:"details,omitempty"`

		// Hostname Hostname is the hostname where the cluster can be reached
		Hostname *string `json:"hostname,omitempty"`

		// Message Message is extra information about the cluster
		Message *string `json:"message,omitempty"`

		// ObservedGeneration ObservedGeneration is the most recent generation observed for this DatabaseCluster.
		ObservedGeneration *int64 `json:"observedGeneration,omitempty"`

		// Port Port is the port where the cluster can be reached
		Port *int32 `json:"port,omitempty"`

		// Ready Ready is the number of ready pods
		Ready *int32 `json:"ready,omitempty"`

		// RecommendedCRVersion RecommendedCRVersion is the recommended version of the CR to use.
		// If set, the CR needs to be updated to this version before upgrading the operator.
		// If unset, the CR is already at the recommended version.
		RecommendedCRVersion *string `json:"recommendedCRVersion,omitempty"`

		// Size Size is the total number of pods
		Size *int32 `json:"size,omitempty"`

		// Status Status is the status of the cluster
		Status *string `json:"status,omitempty"`
	} `json:"status,omitempty"`
}

// DatabaseClusterSpecDataSourcePitrType Type is the type of recovery.
type DatabaseClusterSpecDataSourcePitrType string

// DatabaseClusterSpecEngineResourcesCpu0 defines model for .
type DatabaseClusterSpecEngineResourcesCpu0 = int

// DatabaseClusterSpecEngineResourcesCpu1 defines model for .
type DatabaseClusterSpecEngineResourcesCpu1 = string

// DatabaseCluster_Spec_Engine_Resources_Cpu CPU is the CPU resource requirements
type DatabaseCluster_Spec_Engine_Resources_Cpu struct {
	union json.RawMessage
}

// DatabaseClusterSpecEngineResourcesMemory0 defines model for .
type DatabaseClusterSpecEngineResourcesMemory0 = int

// DatabaseClusterSpecEngineResourcesMemory1 defines model for .
type DatabaseClusterSpecEngineResourcesMemory1 = string

// DatabaseCluster_Spec_Engine_Resources_Memory Memory is the memory resource requirements
type DatabaseCluster_Spec_Engine_Resources_Memory struct {
	union json.RawMessage
}

// DatabaseClusterSpecEngineStorageSize0 defines model for .
type DatabaseClusterSpecEngineStorageSize0 = int

// DatabaseClusterSpecEngineStorageSize1 defines model for .
type DatabaseClusterSpecEngineStorageSize1 = string

// DatabaseCluster_Spec_Engine_Storage_Size Size is the size of the persistent volume claim
type DatabaseCluster_Spec_Engine_Storage_Size struct {
	union json.RawMessage
}

// DatabaseClusterSpecEngineType Type is the engine type
type DatabaseClusterSpecEngineType string

// DatabaseClusterSpecMonitoringResourcesLimits0 defines model for .
type DatabaseClusterSpecMonitoringResourcesLimits0 = int

// DatabaseClusterSpecMonitoringResourcesLimits1 defines model for .
type DatabaseClusterSpecMonitoringResourcesLimits1 = string

// DatabaseCluster_Spec_Monitoring_Resources_Limits_AdditionalProperties defines model for DatabaseCluster.Spec.Monitoring.Resources.Limits.AdditionalProperties.
type DatabaseCluster_Spec_Monitoring_Resources_Limits_AdditionalProperties struct {
	union json.RawMessage
}

// DatabaseClusterSpecMonitoringResourcesRequests0 defines model for .
type DatabaseClusterSpecMonitoringResourcesRequests0 = int

// DatabaseClusterSpecMonitoringResourcesRequests1 defines model for .
type DatabaseClusterSpecMonitoringResourcesRequests1 = string

// DatabaseCluster_Spec_Monitoring_Resources_Requests_AdditionalProperties defines model for DatabaseCluster.Spec.Monitoring.Resources.Requests.AdditionalProperties.
type DatabaseCluster_Spec_Monitoring_Resources_Requests_AdditionalProperties struct {
	union json.RawMessage
}

// DatabaseClusterSpecProxyExposeType Type is the expose type, can be internal or external
type DatabaseClusterSpecProxyExposeType string

// DatabaseClusterSpecProxyResourcesCpu0 defines model for .
type DatabaseClusterSpecProxyResourcesCpu0 = int

// DatabaseClusterSpecProxyResourcesCpu1 defines model for .
type DatabaseClusterSpecProxyResourcesCpu1 = string

// DatabaseCluster_Spec_Proxy_Resources_Cpu CPU is the CPU resource requirements
type DatabaseCluster_Spec_Proxy_Resources_Cpu struct {
	union json.RawMessage
}

// DatabaseClusterSpecProxyResourcesMemory0 defines model for .
type DatabaseClusterSpecProxyResourcesMemory0 = int

// DatabaseClusterSpecProxyResourcesMemory1 defines model for .
type DatabaseClusterSpecProxyResourcesMemory1 = string

// DatabaseCluster_Spec_Proxy_Resources_Memory Memory is the memory resource requirements
type DatabaseCluster_Spec_Proxy_Resources_Memory struct {
	union json.RawMessage
}

// DatabaseClusterSpecProxyType Type is the proxy type
type DatabaseClusterSpecProxyType string

// DatabaseClusterStatusConditionsStatus status of the condition, one of True, False, Unknown.
type DatabaseClusterStatusConditionsStatus string

// DatabaseClusterBackup DatabaseClusterBackup is the Schema for the databaseclusterbackups API.
type DatabaseClusterBackup struct {
	// ApiVersion APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
	ApiVersion *string `json:"apiVersion,omitempty"`

	// Kind Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
	Kind     *string                 `json:"kind,omitempty"`
	Metadata *map[string]interface{} `json:"metadata,omitempty"`

	// Spec DatabaseClusterBackupSpec defines the desired state of DatabaseClusterBackup.
	Spec *struct {
		// BackupStorageName BackupStorageName is the name of the BackupStorage used for backups.
		BackupStorageName string `json:"backupStorageName"`

		// DbClusterName DBClusterName is the original database cluster name.
		DbClusterName string `json:"dbClusterName"`
	} `json:"spec,omitempty"`

	// Status DatabaseClusterBackupStatus defines the observed state of DatabaseClusterBackup.
	Status *struct {
		// Completed Completed is the time when the job was completed.
		Completed *time.Time `json:"completed,omitempty"`

		// Created Created is the timestamp of the upstream backup's creation.
		Created *time.Time `json:"created,omitempty"`

		// Destination Destination is the full path to the backup.
		Destination *string `json:"destination,omitempty"`

		// Gaps Gaps identifies if there are gaps detected in the PITR logs
		Gaps bool `json:"gaps"`

		// LatestRestorableTime LatestRestorableTime is the latest time that can be used for PITR restore
		LatestRestorableTime *time.Time `json:"latestRestorableTime,omitempty"`

		// State State is the DatabaseBackup state.
		State *string `json:"state,omitempty"`
	} `json:"status,omitempty"`
}

// DatabaseClusterBackupList DatabaseClusterBackupList is an object that contains the list of the existing database cluster backups.
type DatabaseClusterBackupList struct {
	// ApiVersion APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
	ApiVersion *string                  `json:"apiVersion,omitempty"`
	Items      *[]DatabaseClusterBackup `json:"items,omitempty"`

	// Kind Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
	Kind     *string                 `json:"kind,omitempty"`
	Metadata *map[string]interface{} `json:"metadata,omitempty"`
}

// DatabaseClusterComponentContainer defines model for DatabaseClusterComponentContainer.
type DatabaseClusterComponentContainer struct {
	Name     *string `json:"name,omitempty"`
	Ready    *bool   `json:"ready,omitempty"`
	Restarts *int    `json:"restarts,omitempty"`
	Started  *string `json:"started,omitempty"`
	Status   *string `json:"status,omitempty"`
}

// DatabaseClusterComponents components related data
type DatabaseClusterComponents = []DatabaseClusterComponent

// DatabaseClusterComponent defines model for .
type DatabaseClusterComponent struct {
	Containers *[]DatabaseClusterComponentContainer `json:"containers,omitempty"`
	Name       *string                              `json:"name,omitempty"`
	Ready      *string                              `json:"ready,omitempty"`
	Restarts   *int                                 `json:"restarts,omitempty"`
	Started    *string                              `json:"started,omitempty"`
	Status     *string                              `json:"status,omitempty"`
	Type       *string                              `json:"type,omitempty"`
}

// DatabaseClusterCredential kubernetes object
type DatabaseClusterCredential struct {
	ConnectionUrl *string `json:"connectionUrl,omitempty"`
	Password      *string `json:"password,omitempty"`
	Username      *string `json:"username,omitempty"`
}

// DatabaseClusterList DatabaseClusterList is an object that contains the list of the existing database clusters.
type DatabaseClusterList struct {
	// ApiVersion APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
	ApiVersion *string            `json:"apiVersion,omitempty"`
	Items      *[]DatabaseCluster `json:"items,omitempty"`

	// Kind Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
	Kind     *string                 `json:"kind,omitempty"`
	Metadata *map[string]interface{} `json:"metadata,omitempty"`
}

// DatabaseClusterPitr point-in-time recovery related data
type DatabaseClusterPitr struct {
	EarliestDate *time.Time `json:"earliestDate,omitempty"`

	// Gaps indicates if there are pitr logs gaps detected after this backup was taken
	Gaps             *bool      `json:"gaps,omitempty"`
	LatestBackupName *string    `json:"latestBackupName,omitempty"`
	LatestDate       *time.Time `json:"latestDate,omitempty"`
}

// DatabaseClusterRestore DatabaseClusterRestore is the Schema for the databaseclusterrestores API.
type DatabaseClusterRestore struct {
	// ApiVersion APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
	ApiVersion *string `json:"apiVersion,omitempty"`

	// Kind Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
	Kind     *string                 `json:"kind,omitempty"`
	Metadata *map[string]interface{} `json:"metadata,omitempty"`

	// Spec DatabaseClusterRestoreSpec defines the desired state of DatabaseClusterRestore.
	Spec *struct {
		// DataSource DataSource defines a data source for restoration.
		DataSource struct {
			// BackupSource BackupSource is the backup source to restore from
			BackupSource *struct {
				// BackupStorageName BackupStorageName is the name of the BackupStorage used for backups.
				BackupStorageName string `json:"backupStorageName"`

				// Path Path is the path to the backup file/directory.
				Path string `json:"path"`
			} `json:"backupSource,omitempty"`

			// DbClusterBackupName DBClusterBackupName is the name of the DB cluster backup to restore from
			DbClusterBackupName *string `json:"dbClusterBackupName,omitempty"`

			// Pitr PITR is the point-in-time recovery configuration
			Pitr *struct {
				// Date Date is the UTC date to recover to. The accepted format: "2006-01-02T15:04:05Z".
				Date *string `json:"date,omitempty"`

				// Type Type is the type of recovery.
				Type *DatabaseClusterRestoreSpecDataSourcePitrType `json:"type,omitempty"`
			} `json:"pitr,omitempty"`
		} `json:"dataSource"`

		// DbClusterName DBClusterName defines the cluster name to restore.
		DbClusterName string `json:"dbClusterName"`
	} `json:"spec,omitempty"`

	// Status DatabaseClusterRestoreStatus defines the observed state of DatabaseClusterRestore.
	Status *struct {
		Completed *time.Time `json:"completed,omitempty"`
		Message   *string    `json:"message,omitempty"`

		// State RestoreState represents state of restoration.
		State *string `json:"state,omitempty"`
	} `json:"status,omitempty"`
}

// DatabaseClusterRestoreSpecDataSourcePitrType Type is the type of recovery.
type DatabaseClusterRestoreSpecDataSourcePitrType string

// DatabaseClusterRestoreList DatabaseClusterRestoreList is an object that contains the list of the existing database cluster restores.
type DatabaseClusterRestoreList struct {
	// ApiVersion APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
	ApiVersion *string                   `json:"apiVersion,omitempty"`
	Items      *[]DatabaseClusterRestore `json:"items,omitempty"`

	// Kind Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
	Kind     *string                 `json:"kind,omitempty"`
	Metadata *map[string]interface{} `json:"metadata,omitempty"`
}

// DatabaseEngine DatabaseEngine is the Schema for the databaseengines API.
type DatabaseEngine struct {
	// ApiVersion APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
	ApiVersion *string `json:"apiVersion,omitempty"`

	// Kind Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
	Kind     *string                 `json:"kind,omitempty"`
	Metadata *map[string]interface{} `json:"metadata,omitempty"`

	// Spec DatabaseEngineSpec is a spec for a database engine.
	Spec *struct {
		AllowedVersions *[]string `json:"allowedVersions,omitempty"`

		// Type EngineType stands for the supported database engines. Right now it's only pxc and psmdb. However, it can be ps, pg and any other source.
		Type string `json:"type"`
	} `json:"spec,omitempty"`

	// Status DatabaseEngineStatus defines the observed state of DatabaseEngine.
	Status *struct {
		// AvailableVersions Versions struct represents available versions of database engine components.
		AvailableVersions *struct {
			Backup *map[string]struct {
				Critical  *bool   `json:"critical,omitempty"`
				ImageHash *string `json:"imageHash,omitempty"`
				ImagePath *string `json:"imagePath,omitempty"`
				Status    *string `json:"status,omitempty"`
			} `json:"backup,omitempty"`
			Engine *map[string]struct {
				Critical  *bool   `json:"critical,omitempty"`
				ImageHash *string `json:"imageHash,omitempty"`
				ImagePath *string `json:"imagePath,omitempty"`
				Status    *string `json:"status,omitempty"`
			} `json:"engine,omitempty"`
			Proxy *map[string]map[string]struct {
				Critical  *bool   `json:"critical,omitempty"`
				ImageHash *string `json:"imageHash,omitempty"`
				ImagePath *string `json:"imagePath,omitempty"`
				Status    *string `json:"status,omitempty"`
			} `json:"proxy,omitempty"`
			Tools *map[string]map[string]struct {
				Critical  *bool   `json:"critical,omitempty"`
				ImageHash *string `json:"imageHash,omitempty"`
				ImagePath *string `json:"imagePath,omitempty"`
				Status    *string `json:"status,omitempty"`
			} `json:"tools,omitempty"`
		} `json:"availableVersions,omitempty"`

		// OperatorUpgrade OperatorUpgrade contains the status of the operator upgrade.
		// This is set only if the `everest.percona.com/upgrade-operator-to` annotation is present.
		OperatorUpgrade *struct {
			// InstallPlanRef InstallPlanRef is a reference to the InstallPlan object created for the operator upgrade.
			InstallPlanRef *struct {
				// Name Name of the referent.
				// More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names
				// TODO: Add other useful fields. apiVersion, kind, uid?
				Name *string `json:"name,omitempty"`
			} `json:"installPlanRef,omitempty"`
			Message *string `json:"message,omitempty"`

			// Phase UpgradePhase represents the phase of the operator upgrade.
			Phase     *string    `json:"phase,omitempty"`
			StartedAt *time.Time `json:"startedAt,omitempty"`

			// TargetVersion TargetVersion is the version to which the operator should be upgraded.
			TargetVersion *string `json:"targetVersion,omitempty"`
		} `json:"operatorUpgrade,omitempty"`
		OperatorVersion         *string `json:"operatorVersion,omitempty"`
		PendingOperatorUpgrades *[]struct {
			// InstallPlanRef InstallPlanRef is a reference to the InstallPlan object created for the operator upgrade.
			InstallPlanRef *struct {
				// Name Name of the referent.
				// More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names
				// TODO: Add other useful fields. apiVersion, kind, uid?
				Name *string `json:"name,omitempty"`
			} `json:"installPlanRef,omitempty"`

			// TargetVersion TargetVersion is the version to which the operator should be upgraded.
			TargetVersion *string `json:"targetVersion,omitempty"`
		} `json:"pendingOperatorUpgrades,omitempty"`

		// Status EngineState represents state of engine in a k8s cluster.
		Status *string `json:"status,omitempty"`
	} `json:"status,omitempty"`
}

// DatabaseEngineList DatabaseEngineList is an object that contains the list of the existing database engines.
type DatabaseEngineList struct {
	// ApiVersion APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
	ApiVersion *string           `json:"apiVersion,omitempty"`
	Items      *[]DatabaseEngine `json:"items,omitempty"`

	// Kind Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
	Kind     *string                 `json:"kind,omitempty"`
	Metadata *map[string]interface{} `json:"metadata,omitempty"`
}

// Error Error response
type Error struct {
	Message *string `json:"message,omitempty"`
}

// KubernetesClusterInfo kubernetes cluster info
type KubernetesClusterInfo struct {
	ClusterType string `json:"clusterType"`

	// StorageClassNames List of storage class names that are available in the cluster.
	// Deprecated:
	StorageClassNames []string        `json:"storageClassNames"`
	StorageClasses    *[]StorageClass `json:"storageClasses,omitempty"`
}

// KubernetesClusterResources kubernetes cluster resources
type KubernetesClusterResources struct {
	Available ResourcesAvailable `json:"available"`
	Capacity  ResourcesCapacity  `json:"capacity"`
}

// ResourcesAvailable defines model for .
type ResourcesAvailable struct {
	CpuMillis   *uint64 `json:"cpuMillis,omitempty"`
	DiskSize    *uint64 `json:"diskSize,omitempty"`
	MemoryBytes *uint64 `json:"memoryBytes,omitempty"`
}

// ResourcesCapacity defines model for .
type ResourcesCapacity struct {
	CpuMillis   *uint64 `json:"cpuMillis,omitempty"`
	DiskSize    *uint64 `json:"diskSize,omitempty"`
	MemoryBytes *uint64 `json:"memoryBytes,omitempty"`
}

// MonitoringInstance Monitoring instance information
type MonitoringInstance = MonitoringInstanceBaseWithName

// MonitoringInstanceBase Monitoring instance information
type MonitoringInstanceBase struct {
	// AllowedNamespaces List of namespaces allowed to use this monitoring instance
	// Deprecated:
	AllowedNamespaces *[]string                  `json:"allowedNamespaces,omitempty"`
	Type              MonitoringInstanceBaseType `json:"type,omitempty"`
	Url               string                     `json:"url,omitempty"`

	// VerifyTLS VerifyTLS is set to ensure TLS/SSL verification.
	VerifyTLS *bool `json:"verifyTLS,omitempty"`
}

// MonitoringInstanceBaseType defines model for MonitoringInstanceBase.Type.
type MonitoringInstanceBaseType string

// MonitoringInstanceBaseWithName defines model for MonitoringInstanceBaseWithName.
type MonitoringInstanceBaseWithName struct {
	// AllowedNamespaces List of namespaces allowed to use this monitoring instance
	// Deprecated:
	AllowedNamespaces *[]string `json:"allowedNamespaces,omitempty"`

	// Name A user defined string name of the storage in the DNS name format https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#dns-label-names
	Name      string                             `json:"name,omitempty"`
	Namespace string                             `json:"namespace,omitempty"`
	Type      MonitoringInstanceBaseWithNameType `json:"type,omitempty"`
	Url       string                             `json:"url,omitempty"`

	// VerifyTLS VerifyTLS is set to ensure TLS/SSL verification.
	VerifyTLS *bool `json:"verifyTLS,omitempty"`
}

// MonitoringInstanceBaseWithNameType defines model for MonitoringInstanceBaseWithName.Type.
type MonitoringInstanceBaseWithNameType string

// MonitoringInstanceCreateParams defines model for MonitoringInstanceCreateParams.
type MonitoringInstanceCreateParams struct {
	// AllowedNamespaces List of namespaces allowed to use this monitoring instance
	// Deprecated:
	AllowedNamespaces *[]string `json:"allowedNamespaces,omitempty"`

	// Name A user defined string name of the storage in the DNS name format https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#dns-label-names
	Name      string                             `json:"name,omitempty"`
	Namespace string                             `json:"namespace,omitempty"`
	Pmm       *PMMMonitoringInstanceSpec         `json:"pmm,omitempty"`
	Type      MonitoringInstanceCreateParamsType `json:"type,omitempty"`
	Url       string                             `json:"url,omitempty"`

	// VerifyTLS VerifyTLS is set to ensure TLS/SSL verification.
	VerifyTLS *bool `json:"verifyTLS,omitempty"`
}

// PMMMonitoringInstanceSpec defines model for .
type PMMMonitoringInstanceSpec struct {
	ApiKey   string `json:"apiKey,omitempty"`
	Password string `json:"password,omitempty"`
	User     string `json:"user,omitempty"`
}

// MonitoringInstanceCreateParamsType defines model for MonitoringInstanceCreateParams.Type.
type MonitoringInstanceCreateParamsType string

// MonitoringInstancePMM defines model for MonitoringInstancePMM.
type MonitoringInstancePMM struct {
	Pmm *PMMMonitoringInstanceSpec `json:"pmm,omitempty"`
}

// MonitoringInstanceUpdateParams defines model for MonitoringInstanceUpdateParams.
type MonitoringInstanceUpdateParams struct {
	// AllowedNamespaces List of namespaces allowed to use this monitoring instance
	// Deprecated:
	AllowedNamespaces *[]string                          `json:"allowedNamespaces,omitempty"`
	Pmm               *PMMMonitoringInstanceSpec         `json:"pmm,omitempty"`
	Type              MonitoringInstanceUpdateParamsType `json:"type,omitempty"`
	Url               string                             `json:"url,omitempty"`

	// VerifyTLS VerifyTLS is set to ensure TLS/SSL verification.
	VerifyTLS *bool `json:"verifyTLS,omitempty"`
}

// MonitoringInstanceUpdateParamsType defines model for MonitoringInstanceUpdateParams.Type.
type MonitoringInstanceUpdateParamsType string

// MonitoringInstancesList defines model for MonitoringInstancesList.
type MonitoringInstancesList = []MonitoringInstance

// NamespaceList defines model for NamespaceList.
type NamespaceList = []string

// OIDCConfig Everest OIDC provider configuration
type OIDCConfig struct {
	// ClientId OIDC application clientID
	ClientId string `json:"clientId"`

	// IssuerURL OIDC provider url
	IssuerURL string `json:"issuerURL"`

	// Scopes OIDC scopes
	Scopes []string `json:"scopes"`
}

// PodSchedulingPolicy PodSchedulingPolicy is the Schema for the Pod Scheduling Policy API.
type PodSchedulingPolicy struct {
	// ApiVersion APIVersion defines the versioned schema of this representation of an object.
	// Servers should convert recognized schemas to the latest internal value, and
	// may reject unrecognized values.
	// More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
	ApiVersion *string `json:"apiVersion,omitempty"`

	// Kind Kind is a string value representing the REST resource this object represents.
	// Servers may infer this from the endpoint the client submits requests to.
	// Cannot be updated.
	// In CamelCase.
	// More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
	Kind     *string                 `json:"kind,omitempty"`
	Metadata *map[string]interface{} `json:"metadata,omitempty"`

	// Spec PodSchedulingPolicySpec defines the desired state of PodSchedulingPolicy.
	Spec *struct {
		// AffinityConfig AffinityConfig is a configuration for the affinity settings depending on the engine type.
		AffinityConfig *struct {
			// Postgresql PostgreSQL is the affinity configuration for the PostgreSQL DB clusters.
			Postgresql *struct {
				// Engine Engine is the affinity configuration for the DB Engine pods.
				Engine *struct {
					// NodeAffinity Describes node affinity scheduling rules for the pod.
					NodeAffinity *struct {
						// PreferredDuringSchedulingIgnoredDuringExecution The scheduler will prefer to schedule pods to nodes that satisfy
						// the affinity expressions specified by this field, but it may choose
						// a node that violates one or more of the expressions. The node that is
						// most preferred is the one with the greatest sum of weights, i.e.
						// for each node that meets all of the scheduling requirements (resource
						// request, requiredDuringScheduling affinity expressions, etc.),
						// compute a sum by iterating through the elements of this field and adding
						// "weight" to the sum if the node matches the corresponding matchExpressions; the
						// node(s) with the highest sum are the most preferred.
						PreferredDuringSchedulingIgnoredDuringExecution *[]struct {
							// Preference A node selector term, associated with the corresponding weight.
							Preference struct {
								// MatchExpressions A list of node selector requirements by node's labels.
								MatchExpressions *[]struct {
									// Key The label key that the selector applies to.
									Key string `json:"key"`

									// Operator Represents a key's relationship to a set of values.
									// Valid operators are In, NotIn, Exists, DoesNotExist. Gt, and Lt.
									Operator string `json:"operator"`

									// Values An array of string values. If the operator is In or NotIn,
									// the values array must be non-empty. If the operator is Exists or DoesNotExist,
									// the values array must be empty. If the operator is Gt or Lt, the values
									// array must have a single element, which will be interpreted as an integer.
									// This array is replaced during a strategic merge patch.
									Values *[]string `json:"values,omitempty"`
								} `json:"matchExpressions,omitempty"`

								// MatchFields A list of node selector requirements by node's fields.
								MatchFields *[]struct {
									// Key The label key that the selector applies to.
									Key string `json:"key"`

									// Operator Represents a key's relationship to a set of values.
									// Valid operators are In, NotIn, Exists, DoesNotExist. Gt, and Lt.
									Operator string `json:"operator"`

									// Values An array of string values. If the operator is In or NotIn,
									// the values array must be non-empty. If the operator is Exists or DoesNotExist,
									// the values array must be empty. If the operator is Gt or Lt, the values
									// array must have a single element, which will be interpreted as an integer.
									// This array is replaced during a strategic merge patch.
									Values *[]string `json:"values,omitempty"`
								} `json:"matchFields,omitempty"`
							} `json:"preference"`

							// Weight Weight associated with matching the corresponding nodeSelectorTerm, in the range 1-100.
							Weight int32 `json:"weight"`
						} `json:"preferredDuringSchedulingIgnoredDuringExecution,omitempty"`

						// RequiredDuringSchedulingIgnoredDuringExecution If the affinity requirements specified by this field are not met at
						// scheduling time, the pod will not be scheduled onto the node.
						// If the affinity requirements specified by this field cease to be met
						// at some point during pod execution (e.g. due to an update), the system
						// may or may not try to eventually evict the pod from its node.
						RequiredDuringSchedulingIgnoredDuringExecution *struct {
							// NodeSelectorTerms Required. A list of node selector terms. The terms are ORed.
							NodeSelectorTerms []struct {
								// MatchExpressions A list of node selector requirements by node's labels.
								MatchExpressions *[]struct {
									// Key The label key that the selector applies to.
									Key string `json:"key"`

									// Operator Represents a key's relationship to a set of values.
									// Valid operators are In, NotIn, Exists, DoesNotExist. Gt, and Lt.
									Operator string `json:"operator"`

									// Values An array of string values. If the operator is In or NotIn,
									// the values array must be non-empty. If the operator is Exists or DoesNotExist,
									// the values array must be empty. If the operator is Gt or Lt, the values
									// array must have a single element, which will be interpreted as an integer.
									// This array is replaced during a strategic merge patch.
									Values *[]string `json:"values,omitempty"`
								} `json:"matchExpressions,omitempty"`

								// MatchFields A list of node selector requirements by node's fields.
								MatchFields *[]struct {
									// Key The label key that the selector applies to.
									Key string `json:"key"`

									// Operator Represents a key's relationship to a set of values.
									// Valid operators are In, NotIn, Exists, DoesNotExist. Gt, and Lt.
									Operator string `json:"operator"`

									// Values An array of string values. If the operator is In or NotIn,
									// the values array must be non-empty. If the operator is Exists or DoesNotExist,
									// the values array must be empty. If the operator is Gt or Lt, the values
									// array must have a single element, which will be interpreted as an integer.
									// This array is replaced during a strategic merge patch.
									Values *[]string `json:"values,omitempty"`
								} `json:"matchFields,omitempty"`
							} `json:"nodeSelectorTerms"`
						} `json:"requiredDuringSchedulingIgnoredDuringExecution,omitempty"`
					} `json:"nodeAffinity,omitempty"`

					// PodAffinity Describes pod affinity scheduling rules (e.g. co-locate this pod in the same node, zone, etc. as some other pod(s)).
					PodAffinity *struct {
						// PreferredDuringSchedulingIgnoredDuringExecution The scheduler will prefer to schedule pods to nodes that satisfy
						// the affinity expressions specified by this field, but it may choose
						// a node that violates one or more of the expressions. The node that is
						// most preferred is the one with the greatest sum of weights, i.e.
						// for each node that meets all of the scheduling requirements (resource
						// request, requiredDuringScheduling affinity expressions, etc.),
						// compute a sum by iterating through the elements of this field and adding
						// "weight" to the sum if the node has pods which matches the corresponding podAffinityTerm; the
						// node(s) with the highest sum are the most preferred.
						PreferredDuringSchedulingIgnoredDuringExecution *[]struct {
							// PodAffinityTerm Required. A pod affinity term, associated with the corresponding weight.
							PodAffinityTerm struct {
								// LabelSelector A label query over a set of resources, in this case pods.
								// If it's null, this PodAffinityTerm matches with no Pods.
								LabelSelector *struct {
									// MatchExpressions matchExpressions is a list of label selector requirements. The requirements are ANDed.
									MatchExpressions *[]struct {
										// Key key is the label key that the selector applies to.
										Key string `json:"key"`

										// Operator operator represents a key's relationship to a set of values.
										// Valid operators are In, NotIn, Exists and DoesNotExist.
										Operator string `json:"operator"`

										// Values values is an array of string values. If the operator is In or NotIn,
										// the values array must be non-empty. If the operator is Exists or DoesNotExist,
										// the values array must be empty. This array is replaced during a strategic
										// merge patch.
										Values *[]string `json:"values,omitempty"`
									} `json:"matchExpressions,omitempty"`

									// MatchLabels matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels
									// map is equivalent to an element of matchExpressions, whose key field is "key", the
									// operator is "In", and the values array contains only "value". The requirements are ANDed.
									MatchLabels *map[string]string `json:"matchLabels,omitempty"`
								} `json:"labelSelector,omitempty"`

								// MatchLabelKeys MatchLabelKeys is a set of pod label keys to select which pods will
								// be taken into consideration. The keys are used to lookup values from the
								// incoming pod labels, those key-value labels are merged with `labelSelector` as `key in (value)`
								// to select the group of existing pods which pods will be taken into consideration
								// for the incoming pod's pod (anti) affinity. Keys that don't exist in the incoming
								// pod labels will be ignored. The default value is empty.
								// The same key is forbidden to exist in both matchLabelKeys and labelSelector.
								// Also, matchLabelKeys cannot be set when labelSelector isn't set.
								MatchLabelKeys *[]string `json:"matchLabelKeys,omitempty"`

								// MismatchLabelKeys MismatchLabelKeys is a set of pod label keys to select which pods will
								// be taken into consideration. The keys are used to lookup values from the
								// incoming pod labels, those key-value labels are merged with `labelSelector` as `key notin (value)`
								// to select the group of existing pods which pods will be taken into consideration
								// for the incoming pod's pod (anti) affinity. Keys that don't exist in the incoming
								// pod labels will be ignored. The default value is empty.
								// The same key is forbidden to exist in both mismatchLabelKeys and labelSelector.
								// Also, mismatchLabelKeys cannot be set when labelSelector isn't set.
								MismatchLabelKeys *[]string `json:"mismatchLabelKeys,omitempty"`

								// NamespaceSelector A label query over the set of namespaces that the term applies to.
								// The term is applied to the union of the namespaces selected by this field
								// and the ones listed in the namespaces field.
								// null selector and null or empty namespaces list means "this pod's namespace".
								// An empty selector ({}) matches all namespaces.
								NamespaceSelector *struct {
									// MatchExpressions matchExpressions is a list of label selector requirements. The requirements are ANDed.
									MatchExpressions *[]struct {
										// Key key is the label key that the selector applies to.
										Key string `json:"key"`

										// Operator operator represents a key's relationship to a set of values.
										// Valid operators are In, NotIn, Exists and DoesNotExist.
										Operator string `json:"operator"`

										// Values values is an array of string values. If the operator is In or NotIn,
										// the values array must be non-empty. If the operator is Exists or DoesNotExist,
										// the values array must be empty. This array is replaced during a strategic
										// merge patch.
										Values *[]string `json:"values,omitempty"`
									} `json:"matchExpressions,omitempty"`

									// MatchLabels matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels
									// map is equivalent to an element of matchExpressions, whose key field is "key", the
									// operator is "In", and the values array contains only "value". The requirements are ANDed.
									MatchLabels *map[string]string `json:"matchLabels,omitempty"`
								} `json:"namespaceSelector,omitempty"`

								// Namespaces namespaces specifies a static list of namespace names that the term applies to.
								// The term is applied to the union of the namespaces listed in this field
								// and the ones selected by namespaceSelector.
								// null or empty namespaces list and null namespaceSelector means "this pod's namespace".
								Namespaces *[]string `json:"namespaces,omitempty"`

								// TopologyKey This pod should be co-located (affinity) or not co-located (anti-affinity) with the pods matching
								// the labelSelector in the specified namespaces, where co-located is defined as running on a node
								// whose value of the label with key topologyKey matches that of any node on which any of the
								// selected pods is running.
								// Empty topologyKey is not allowed.
								TopologyKey string `json:"topologyKey"`
							} `json:"podAffinityTerm"`

							// Weight weight associated with matching the corresponding podAffinityTerm,
							// in the range 1-100.
							Weight int32 `json:"weight"`
						} `json:"preferredDuringSchedulingIgnoredDuringExecution,omitempty"`

						// RequiredDuringSchedulingIgnoredDuringExecution If the affinity requirements specified by this field are not met at
						// scheduling time, the pod will not be scheduled onto the node.
						// If the affinity requirements specified by this field cease to be met
						// at some point during pod execution (e.g. due to a pod label update), the
						// system may or may not try to eventually evict the pod from its node.
						// When there are multiple elements, the lists of nodes corresponding to each
						// podAffinityTerm are intersected, i.e. all terms must be satisfied.
						RequiredDuringSchedulingIgnoredDuringExecution *[]struct {
							// LabelSelector A label query over a set of resources, in this case pods.
							// If it's null, this PodAffinityTerm matches with no Pods.
							LabelSelector *struct {
								// MatchExpressions matchExpressions is a list of label selector requirements. The requirements are ANDed.
								MatchExpressions *[]struct {
									// Key key is the label key that the selector applies to.
									Key string `json:"key"`

									// Operator operator represents a key's relationship to a set of values.
									// Valid operators are In, NotIn, Exists and DoesNotExist.
									Operator string `json:"operator"`

									// Values values is an array of string values. If the operator is In or NotIn,
									// the values array must be non-empty. If the operator is Exists or DoesNotExist,
									// the values array must be empty. This array is replaced during a strategic
									// merge patch.
									Values *[]string `json:"values,omitempty"`
								} `json:"matchExpressions,omitempty"`

								// MatchLabels matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels
								// map is equivalent to an element of matchExpressions, whose key field is "key", the
								// operator is "In", and the values array contains only "value". The requirements are ANDed.
								MatchLabels *map[string]string `json:"matchLabels,omitempty"`
							} `json:"labelSelector,omitempty"`

							// MatchLabelKeys MatchLabelKeys is a set of pod label keys to select which pods will
							// be taken into consideration. The keys are used to lookup values from the
							// incoming pod labels, those key-value labels are merged with `labelSelector` as `key in (value)`
							// to select the group of existing pods which pods will be taken into consideration
							// for the incoming pod's pod (anti) affinity. Keys that don't exist in the incoming
							// pod labels will be ignored. The default value is empty.
							// The same key is forbidden to exist in both matchLabelKeys and labelSelector.
							// Also, matchLabelKeys cannot be set when labelSelector isn't set.
							MatchLabelKeys *[]string `json:"matchLabelKeys,omitempty"`

							// MismatchLabelKeys MismatchLabelKeys is a set of pod label keys to select which pods will
							// be taken into consideration. The keys are used to lookup values from the
							// incoming pod labels, those key-value labels are merged with `labelSelector` as `key notin (value)`
							// to select the group of existing pods which pods will be taken into consideration
							// for the incoming pod's pod (anti) affinity. Keys that don't exist in the incoming
							// pod labels will be ignored. The default value is empty.
							// The same key is forbidden to exist in both mismatchLabelKeys and labelSelector.
							// Also, mismatchLabelKeys cannot be set when labelSelector isn't set.
							MismatchLabelKeys *[]string `json:"mismatchLabelKeys,omitempty"`

							// NamespaceSelector A label query over the set of namespaces that the term applies to.
							// The term is applied to the union of the namespaces selected by this field
							// and the ones listed in the namespaces field.
							// null selector and null or empty namespaces list means "this pod's namespace".
							// An empty selector ({}) matches all namespaces.
							NamespaceSelector *struct {
								// MatchExpressions matchExpressions is a list of label selector requirements. The requirements are ANDed.
								MatchExpressions *[]struct {
									// Key key is the label key that the selector applies to.
									Key string `json:"key"`

									// Operator operator represents a key's relationship to a set of values.
									// Valid operators are In, NotIn, Exists and DoesNotExist.
									Operator string `json:"operator"`

									// Values values is an array of string values. If the operator is In or NotIn,
									// the values array must be non-empty. If the operator is Exists or DoesNotExist,
									// the values array must be empty. This array is replaced during a strategic
									// merge patch.
									Values *[]string `json:"values,omitempty"`
								} `json:"matchExpressions,omitempty"`

								// MatchLabels matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels
								// map is equivalent to an element of matchExpressions, whose key field is "key", the
								// operator is "In", and the values array contains only "value". The requirements are ANDed.
								MatchLabels *map[string]string `json:"matchLabels,omitempty"`
							} `json:"namespaceSelector,omitempty"`

							// Namespaces namespaces specifies a static list of namespace names that the term applies to.
							// The term is applied to the union of the namespaces listed in this field
							// and the ones selected by namespaceSelector.
							// null or empty namespaces list and null namespaceSelector means "this pod's namespace".
							Namespaces *[]string `json:"namespaces,omitempty"`

							// TopologyKey This pod should be co-located (affinity) or not co-located (anti-affinity) with the pods matching
							// the labelSelector in the specified namespaces, where co-located is defined as running on a node
							// whose value of the label with key topologyKey matches that of any node on which any of the
							// selected pods is running.
							// Empty topologyKey is not allowed.
							TopologyKey string `json:"topologyKey"`
						} `json:"requiredDuringSchedulingIgnoredDuringExecution,omitempty"`
					} `json:"podAffinity,omitempty"`

					// PodAntiAffinity Describes pod anti-affinity scheduling rules (e.g. avoid putting this pod in the same node, zone, etc. as some other pod(s)).
					PodAntiAffinity *struct {
						// PreferredDuringSchedulingIgnoredDuringExecution The scheduler will prefer to schedule pods to nodes that satisfy
						// the anti-affinity expressions specified by this field, but it may choose
						// a node that violates one or more of the expressions. The node that is
						// most preferred is the one with the greatest sum of weights, i.e.
						// for each node that meets all of the scheduling requirements (resource
						// request, requiredDuringScheduling anti-affinity expressions, etc.),
						// compute a sum by iterating through the elements of this field and adding
						// "weight" to the sum if the node has pods which matches the corresponding podAffinityTerm; the
						// node(s) with the highest sum are the most preferred.
						PreferredDuringSchedulingIgnoredDuringExecution *[]struct {
							// PodAffinityTerm Required. A pod affinity term, associated with the corresponding weight.
							PodAffinityTerm struct {
								// LabelSelector A label query over a set of resources, in this case pods.
								// If it's null, this PodAffinityTerm matches with no Pods.
								LabelSelector *struct {
									// MatchExpressions matchExpressions is a list of label selector requirements. The requirements are ANDed.
									MatchExpressions *[]struct {
										// Key key is the label key that the selector applies to.
										Key string `json:"key"`

										// Operator operator represents a key's relationship to a set of values.
										// Valid operators are In, NotIn, Exists and DoesNotExist.
										Operator string `json:"operator"`

										// Values values is an array of string values. If the operator is In or NotIn,
										// the values array must be non-empty. If the operator is Exists or DoesNotExist,
										// the values array must be empty. This array is replaced during a strategic
										// merge patch.
										Values *[]string `json:"values,omitempty"`
									} `json:"matchExpressions,omitempty"`

									// MatchLabels matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels
									// map is equivalent to an element of matchExpressions, whose key field is "key", the
									// operator is "In", and the values array contains only "value". The requirements are ANDed.
									MatchLabels *map[string]string `json:"matchLabels,omitempty"`
								} `json:"labelSelector,omitempty"`

								// MatchLabelKeys MatchLabelKeys is a set of pod label keys to select which pods will
								// be taken into consideration. The keys are used to lookup values from the
								// incoming pod labels, those key-value labels are merged with `labelSelector` as `key in (value)`
								// to select the group of existing pods which pods will be taken into consideration
								// for the incoming pod's pod (anti) affinity. Keys that don't exist in the incoming
								// pod labels will be ignored. The default value is empty.
								// The same key is forbidden to exist in both matchLabelKeys and labelSelector.
								// Also, matchLabelKeys cannot be set when labelSelector isn't set.
								MatchLabelKeys *[]string `json:"matchLabelKeys,omitempty"`

								// MismatchLabelKeys MismatchLabelKeys is a set of pod label keys to select which pods will
								// be taken into consideration. The keys are used to lookup values from the
								// incoming pod labels, those key-value labels are merged with `labelSelector` as `key notin (value)`
								// to select the group of existing pods which pods will be taken into consideration
								// for the incoming pod's pod (anti) affinity. Keys that don't exist in the incoming
								// pod labels will be ignored. The default value is empty.
								// The same key is forbidden to exist in both mismatchLabelKeys and labelSelector.
								// Also, mismatchLabelKeys cannot be set when labelSelector isn't set.
								MismatchLabelKeys *[]string `json:"mismatchLabelKeys,omitempty"`

								// NamespaceSelector A label query over the set of namespaces that the term applies to.
								// The term is applied to the union of the namespaces selected by this field
								// and the ones listed in the namespaces field.
								// null selector and null or empty namespaces list means "this pod's namespace".
								// An empty selector ({}) matches all namespaces.
								NamespaceSelector *struct {
									// MatchExpressions matchExpressions is a list of label selector requirements. The requirements are ANDed.
									MatchExpressions *[]struct {
										// Key key is the label key that the selector applies to.
										Key string `json:"key"`

										// Operator operator represents a key's relationship to a set of values.
										// Valid operators are In, NotIn, Exists and DoesNotExist.
										Operator string `json:"operator"`

										// Values values is an array of string values. If the operator is In or NotIn,
										// the values array must be non-empty. If the operator is Exists or DoesNotExist,
										// the values array must be empty. This array is replaced during a strategic
										// merge patch.
										Values *[]string `json:"values,omitempty"`
									} `json:"matchExpressions,omitempty"`

									// MatchLabels matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels
									// map is equivalent to an element of matchExpressions, whose key field is "key", the
									// operator is "In", and the values array contains only "value". The requirements are ANDed.
									MatchLabels *map[string]string `json:"matchLabels,omitempty"`
								} `json:"namespaceSelector,omitempty"`

								// Namespaces namespaces specifies a static list of namespace names that the term applies to.
								// The term is applied to the union of the namespaces listed in this field
								// and the ones selected by namespaceSelector.
								// null or empty namespaces list and null namespaceSelector means "this pod's namespace".
								Namespaces *[]string `json:"namespaces,omitempty"`

								// TopologyKey This pod should be co-located (affinity) or not co-located (anti-affinity) with the pods matching
								// the labelSelector in the specified namespaces, where co-located is defined as running on a node
								// whose value of the label with key topologyKey matches that of any node on which any of the
								// selected pods is running.
								// Empty topologyKey is not allowed.
								TopologyKey string `json:"topologyKey"`
							} `json:"podAffinityTerm"`

							// Weight weight associated with matching the corresponding podAffinityTerm,
							// in the range 1-100.
							Weight int32 `json:"weight"`
						} `json:"preferredDuringSchedulingIgnoredDuringExecution,omitempty"`

						// RequiredDuringSchedulingIgnoredDuringExecution If the anti-affinity requirements specified by this field are not met at
						// scheduling time, the pod will not be scheduled onto the node.
						// If the anti-affinity requirements specified by this field cease to be met
						// at some point during pod execution (e.g. due to a pod label update), the
						// system may or may not try to eventually evict the pod from its node.
						// When there are multiple elements, the lists of nodes corresponding to each
						// podAffinityTerm are intersected, i.e. all terms must be satisfied.
						RequiredDuringSchedulingIgnoredDuringExecution *[]struct {
							// LabelSelector A label query over a set of resources, in this case pods.
							// If it's null, this PodAffinityTerm matches with no Pods.
							LabelSelector *struct {
								// MatchExpressions matchExpressions is a list of label selector requirements. The requirements are ANDed.
								MatchExpressions *[]struct {
									// Key key is the label key that the selector applies to.
									Key string `json:"key"`

									// Operator operator represents a key's relationship to a set of values.
									// Valid operators are In, NotIn, Exists and DoesNotExist.
									Operator string `json:"operator"`

									// Values values is an array of string values. If the operator is In or NotIn,
									// the values array must be non-empty. If the operator is Exists or DoesNotExist,
									// the values array must be empty. This array is replaced during a strategic
									// merge patch.
									Values *[]string `json:"values,omitempty"`
								} `json:"matchExpressions,omitempty"`

								// MatchLabels matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels
								// map is equivalent to an element of matchExpressions, whose key field is "key", the
								// operator is "In", and the values array contains only "value". The requirements are ANDed.
								MatchLabels *map[string]string `json:"matchLabels,omitempty"`
							} `json:"labelSelector,omitempty"`

							// MatchLabelKeys MatchLabelKeys is a set of pod label keys to select which pods will
							// be taken into consideration. The keys are used to lookup values from the
							// incoming pod labels, those key-value labels are merged with `labelSelector` as `key in (value)`
							// to select the group of existing pods which pods will be taken into consideration
							// for the incoming pod's pod (anti) affinity. Keys that don't exist in the incoming
							// pod labels will be ignored. The default value is empty.
							// The same key is forbidden to exist in both matchLabelKeys and labelSelector.
							// Also, matchLabelKeys cannot be set when labelSelector isn't set.
							MatchLabelKeys *[]string `json:"matchLabelKeys,omitempty"`

							// MismatchLabelKeys MismatchLabelKeys is a set of pod label keys to select which pods will
							// be taken into consideration. The keys are used to lookup values from the
							// incoming pod labels, those key-value labels are merged with `labelSelector` as `key notin (value)`
							// to select the group of existing pods which pods will be taken into consideration
							// for the incoming pod's pod (anti) affinity. Keys that don't exist in the incoming
							// pod labels will be ignored. The default value is empty.
							// The same key is forbidden to exist in both mismatchLabelKeys and labelSelector.
							// Also, mismatchLabelKeys cannot be set when labelSelector isn't set.
							MismatchLabelKeys *[]string `json:"mismatchLabelKeys,omitempty"`

							// NamespaceSelector A label query over the set of namespaces that the term applies to.
							// The term is applied to the union of the namespaces selected by this field
							// and the ones listed in the namespaces field.
							// null selector and null or empty namespaces list means "this pod's namespace".
							// An empty selector ({}) matches all namespaces.
							NamespaceSelector *struct {
								// MatchExpressions matchExpressions is a list of label selector requirements. The requirements are ANDed.
								MatchExpressions *[]struct {
									// Key key is the label key that the selector applies to.
									Key string `json:"key"`

									// Operator operator represents a key's relationship to a set of values.
									// Valid operators are In, NotIn, Exists and DoesNotExist.
									Operator string `json:"operator"`

									// Values values is an array of string values. If the operator is In or NotIn,
									// the values array must be non-empty. If the operator is Exists or DoesNotExist,
									// the values array must be empty. This array is replaced during a strategic
									// merge patch.
									Values *[]string `json:"values,omitempty"`
								} `json:"matchExpressions,omitempty"`

								// MatchLabels matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels
								// map is equivalent to an element of matchExpressions, whose key field is "key", the
								// operator is "In", and the values array contains only "value". The requirements are ANDed.
								MatchLabels *map[string]string `json:"matchLabels,omitempty"`
							} `json:"namespaceSelector,omitempty"`

							// Namespaces namespaces specifies a static list of namespace names that the term applies to.
							// The term is applied to the union of the namespaces listed in this field
							// and the ones selected by namespaceSelector.
							// null or empty namespaces list and null namespaceSelector means "this pod's namespace".
							Namespaces *[]string `json:"namespaces,omitempty"`

							// TopologyKey This pod should be co-located (affinity) or not co-located (anti-affinity) with the pods matching
							// the labelSelector in the specified namespaces, where co-located is defined as running on a node
							// whose value of the label with key topologyKey matches that of any node on which any of the
							// selected pods is running.
							// Empty topologyKey is not allowed.
							TopologyKey string `json:"topologyKey"`
						} `json:"requiredDuringSchedulingIgnoredDuringExecution,omitempty"`
					} `json:"podAntiAffinity,omitempty"`
				} `json:"engine,omitempty"`

				// Proxy Proxy is the affinity configuration for the DB Proxy pods.
				Proxy *struct {
					// NodeAffinity Describes node affinity scheduling rules for the pod.
					NodeAffinity *struct {
						// PreferredDuringSchedulingIgnoredDuringExecution The scheduler will prefer to schedule pods to nodes that satisfy
						// the affinity expressions specified by this field, but it may choose
						// a node that violates one or more of the expressions. The node that is
						// most preferred is the one with the greatest sum of weights, i.e.
						// for each node that meets all of the scheduling requirements (resource
						// request, requiredDuringScheduling affinity expressions, etc.),
						// compute a sum by iterating through the elements of this field and adding
						// "weight" to the sum if the node matches the corresponding matchExpressions; the
						// node(s) with the highest sum are the most preferred.
						PreferredDuringSchedulingIgnoredDuringExecution *[]struct {
							// Preference A node selector term, associated with the corresponding weight.
							Preference struct {
								// MatchExpressions A list of node selector requirements by node's labels.
								MatchExpressions *[]struct {
									// Key The label key that the selector applies to.
									Key string `json:"key"`

									// Operator Represents a key's relationship to a set of values.
									// Valid operators are In, NotIn, Exists, DoesNotExist. Gt, and Lt.
									Operator string `json:"operator"`

									// Values An array of string values. If the operator is In or NotIn,
									// the values array must be non-empty. If the operator is Exists or DoesNotExist,
									// the values array must be empty. If the operator is Gt or Lt, the values
									// array must have a single element, which will be interpreted as an integer.
									// This array is replaced during a strategic merge patch.
									Values *[]string `json:"values,omitempty"`
								} `json:"matchExpressions,omitempty"`

								// MatchFields A list of node selector requirements by node's fields.
								MatchFields *[]struct {
									// Key The label key that the selector applies to.
									Key string `json:"key"`

									// Operator Represents a key's relationship to a set of values.
									// Valid operators are In, NotIn, Exists, DoesNotExist. Gt, and Lt.
									Operator string `json:"operator"`

									// Values An array of string values. If the operator is In or NotIn,
									// the values array must be non-empty. If the operator is Exists or DoesNotExist,
									// the values array must be empty. If the operator is Gt or Lt, the values
									// array must have a single element, which will be interpreted as an integer.
									// This array is replaced during a strategic merge patch.
									Values *[]string `json:"values,omitempty"`
								} `json:"matchFields,omitempty"`
							} `json:"preference"`

							// Weight Weight associated with matching the corresponding nodeSelectorTerm, in the range 1-100.
							Weight int32 `json:"weight"`
						} `json:"preferredDuringSchedulingIgnoredDuringExecution,omitempty"`

						// RequiredDuringSchedulingIgnoredDuringExecution If the affinity requirements specified by this field are not met at
						// scheduling time, the pod will not be scheduled onto the node.
						// If the affinity requirements specified by this field cease to be met
						// at some point during pod execution (e.g. due to an update), the system
						// may or may not try to eventually evict the pod from its node.
						RequiredDuringSchedulingIgnoredDuringExecution *struct {
							// NodeSelectorTerms Required. A list of node selector terms. The terms are ORed.
							NodeSelectorTerms []struct {
								// MatchExpressions A list of node selector requirements by node's labels.
								MatchExpressions *[]struct {
									// Key The label key that the selector applies to.
									Key string `json:"key"`

									// Operator Represents a key's relationship to a set of values.
									// Valid operators are In, NotIn, Exists, DoesNotExist. Gt, and Lt.
									Operator string `json:"operator"`

									// Values An array of string values. If the operator is In or NotIn,
									// the values array must be non-empty. If the operator is Exists or DoesNotExist,
									// the values array must be empty. If the operator is Gt or Lt, the values
									// array must have a single element, which will be interpreted as an integer.
									// This array is replaced during a strategic merge patch.
									Values *[]string `json:"values,omitempty"`
								} `json:"matchExpressions,omitempty"`

								// MatchFields A list of node selector requirements by node's fields.
								MatchFields *[]struct {
									// Key The label key that the selector applies to.
									Key string `json:"key"`

									// Operator Represents a key's relationship to a set of values.
									// Valid operators are In, NotIn, Exists, DoesNotExist. Gt, and Lt.
									Operator string `json:"operator"`

									// Values An array of string values. If the operator is In or NotIn,
									// the values array must be non-empty. If the operator is Exists or DoesNotExist,
									// the values array must be empty. If the operator is Gt or Lt, the values
									// array must have a single element, which will be interpreted as an integer.
									// This array is replaced during a strategic merge patch.
									Values *[]string `json:"values,omitempty"`
								} `json:"matchFields,omitempty"`
							} `json:"nodeSelectorTerms"`
						} `json:"requiredDuringSchedulingIgnoredDuringExecution,omitempty"`
					} `json:"nodeAffinity,omitempty"`

					// PodAffinity Describes pod affinity scheduling rules (e.g. co-locate this pod in the same node, zone, etc. as some other pod(s)).
					PodAffinity *struct {
						// PreferredDuringSchedulingIgnoredDuringExecution The scheduler will prefer to schedule pods to nodes that satisfy
						// the affinity expressions specified by this field, but it may choose
						// a node that violates one or more of the expressions. The node that is
						// most preferred is the one with the greatest sum of weights, i.e.
						// for each node that meets all of the scheduling requirements (resource
						// request, requiredDuringScheduling affinity expressions, etc.),
						// compute a sum by iterating through the elements of this field and adding
						// "weight" to the sum if the node has pods which matches the corresponding podAffinityTerm; the
						// node(s) with the highest sum are the most preferred.
						PreferredDuringSchedulingIgnoredDuringExecution *[]struct {
							// PodAffinityTerm Required. A pod affinity term, associated with the corresponding weight.
							PodAffinityTerm struct {
								// LabelSelector A label query over a set of resources, in this case pods.
								// If it's null, this PodAffinityTerm matches with no Pods.
								LabelSelector *struct {
									// MatchExpressions matchExpressions is a list of label selector requirements. The requirements are ANDed.
									MatchExpressions *[]struct {
										// Key key is the label key that the selector applies to.
										Key string `json:"key"`

										// Operator operator represents a key's relationship to a set of values.
										// Valid operators are In, NotIn, Exists and DoesNotExist.
										Operator string `json:"operator"`

										// Values values is an array of string values. If the operator is In or NotIn,
										// the values array must be non-empty. If the operator is Exists or DoesNotExist,
										// the values array must be empty. This array is replaced during a strategic
										// merge patch.
										Values *[]string `json:"values,omitempty"`
									} `json:"matchExpressions,omitempty"`

									// MatchLabels matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels
									// map is equivalent to an element of matchExpressions, whose key field is "key", the
									// operator is "In", and the values array contains only "value". The requirements are ANDed.
									MatchLabels *map[string]string `json:"matchLabels,omitempty"`
								} `json:"labelSelector,omitempty"`

								// MatchLabelKeys MatchLabelKeys is a set of pod label keys to select which pods will
								// be taken into consideration. The keys are used to lookup values from the
								// incoming pod labels, those key-value labels are merged with `labelSelector` as `key in (value)`
								// to select the group of existing pods which pods will be taken into consideration
								// for the incoming pod's pod (anti) affinity. Keys that don't exist in the incoming
								// pod labels will be ignored. The default value is empty.
								// The same key is forbidden to exist in both matchLabelKeys and labelSelector.
								// Also, matchLabelKeys cannot be set when labelSelector isn't set.
								MatchLabelKeys *[]string `json:"matchLabelKeys,omitempty"`

								// MismatchLabelKeys MismatchLabelKeys is a set of pod label keys to select which pods will
								// be taken into consideration. The keys are used to lookup values from the
								// incoming pod labels, those key-value labels are merged with `labelSelector` as `key notin (value)`
								// to select the group of existing pods which pods will be taken into consideration
								// for the incoming pod's pod (anti) affinity. Keys that don't exist in the incoming
								// pod labels will be ignored. The default value is empty.
								// The same key is forbidden to exist in both mismatchLabelKeys and labelSelector.
								// Also, mismatchLabelKeys cannot be set when labelSelector isn't set.
								MismatchLabelKeys *[]string `json:"mismatchLabelKeys,omitempty"`

								// NamespaceSelector A label query over the set of namespaces that the term applies to.
								// The term is applied to the union of the namespaces selected by this field
								// and the ones listed in the namespaces field.
								// null selector and null or empty namespaces list means "this pod's namespace".
								// An empty selector ({}) matches all namespaces.
								NamespaceSelector *struct {
									// MatchExpressions matchExpressions is a list of label selector requirements. The requirements are ANDed.
									MatchExpressions *[]struct {
										// Key key is the label key that the selector applies to.
										Key string `json:"key"`

										// Operator operator represents a key's relationship to a set of values.
										// Valid operators are In, NotIn, Exists and DoesNotExist.
										Operator string `json:"operator"`

										// Values values is an array of string values. If the operator is In or NotIn,
										// the values array must be non-empty. If the operator is Exists or DoesNotExist,
										// the values array must be empty. This array is replaced during a strategic
										// merge patch.
										Values *[]string `json:"values,omitempty"`
									} `json:"matchExpressions,omitempty"`

									// MatchLabels matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels
									// map is equivalent to an element of matchExpressions, whose key field is "key", the
									// operator is "In", and the values array contains only "value". The requirements are ANDed.
									MatchLabels *map[string]string `json:"matchLabels,omitempty"`
								} `json:"namespaceSelector,omitempty"`

								// Namespaces namespaces specifies a static list of namespace names that the term applies to.
								// The term is applied to the union of the namespaces listed in this field
								// and the ones selected by namespaceSelector.
								// null or empty namespaces list and null namespaceSelector means "this pod's namespace".
								Namespaces *[]string `json:"namespaces,omitempty"`

								// TopologyKey This pod should be co-located (affinity) or not co-located (anti-affinity) with the pods matching
								// the labelSelector in the specified namespaces, where co-located is defined as running on a node
								// whose value of the label with key topologyKey matches that of any node on which any of the
								// selected pods is running.
								// Empty topologyKey is not allowed.
								TopologyKey string `json:"topologyKey"`
							} `json:"podAffinityTerm"`

							// Weight weight associated with matching the corresponding podAffinityTerm,
							// in the range 1-100.
							Weight int32 `json:"weight"`
						} `json:"preferredDuringSchedulingIgnoredDuringExecution,omitempty"`

						// RequiredDuringSchedulingIgnoredDuringExecution If the affinity requirements specified by this field are not met at
						// scheduling time, the pod will not be scheduled onto the node.
						// If the affinity requirements specified by this field cease to be met
						// at some point during pod execution (e.g. due to a pod label update), the
						// system may or may not try to eventually evict the pod from its node.
						// When there are multiple elements, the lists of nodes corresponding to each
						// podAffinityTerm are intersected, i.e. all terms must be satisfied.
						RequiredDuringSchedulingIgnoredDuringExecution *[]struct {
							// LabelSelector A label query over a set of resources, in this case pods.
							// If it's null, this PodAffinityTerm matches with no Pods.
							LabelSelector *struct {
								// MatchExpressions matchExpressions is a list of label selector requirements. The requirements are ANDed.
								MatchExpressions *[]struct {
									// Key key is the label key that the selector applies to.
									Key string `json:"key"`

									// Operator operator represents a key's relationship to a set of values.
									// Valid operators are In, NotIn, Exists and DoesNotExist.
									Operator string `json:"operator"`

									// Values values is an array of string values. If the operator is In or NotIn,
									// the values array must be non-empty. If the operator is Exists or DoesNotExist,
									// the values array must be empty. This array is replaced during a strategic
									// merge patch.
									Values *[]string `json:"values,omitempty"`
								} `json:"matchExpressions,omitempty"`

								// MatchLabels matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels
								// map is equivalent to an element of matchExpressions, whose key field is "key", the
								// operator is "In", and the values array contains only "value". The requirements are ANDed.
								MatchLabels *map[string]string `json:"matchLabels,omitempty"`
							} `json:"labelSelector,omitempty"`

							// MatchLabelKeys MatchLabelKeys is a set of pod label keys to select which pods will
							// be taken into consideration. The keys are used to lookup values from the
							// incoming pod labels, those key-value labels are merged with `labelSelector` as `key in (value)`
							// to select the group of existing pods which pods will be taken into consideration
							// for the incoming pod's pod (anti) affinity. Keys that don't exist in the incoming
							// pod labels will be ignored. The default value is empty.
							// The same key is forbidden to exist in both matchLabelKeys and labelSelector.
							// Also, matchLabelKeys cannot be set when labelSelector isn't set.
							MatchLabelKeys *[]string `json:"matchLabelKeys,omitempty"`

							// MismatchLabelKeys MismatchLabelKeys is a set of pod label keys to select which pods will
							// be taken into consideration. The keys are used to lookup values from the
							// incoming pod labels, those key-value labels are merged with `labelSelector` as `key notin (value)`
							// to select the group of existing pods which pods will be taken into consideration
							// for the incoming pod's pod (anti) affinity. Keys that don't exist in the incoming
							// pod labels will be ignored. The default value is empty.
							// The same key is forbidden to exist in both mismatchLabelKeys and labelSelector.
							// Also, mismatchLabelKeys cannot be set when labelSelector isn't set.
							MismatchLabelKeys *[]string `json:"mismatchLabelKeys,omitempty"`

							// NamespaceSelector A label query over the set of namespaces that the term applies to.
							// The term is applied to the union of the namespaces selected by this field
							// and the ones listed in the namespaces field.
							// null selector and null or empty namespaces list means "this pod's namespace".
							// An empty selector ({}) matches all namespaces.
							NamespaceSelector *struct {
								// MatchExpressions matchExpressions is a list of label selector requirements. The requirements are ANDed.
								MatchExpressions *[]struct {
									// Key key is the label key that the selector applies to.
									Key string `json:"key"`

									// Operator operator represents a key's relationship to a set of values.
									// Valid operators are In, NotIn, Exists and DoesNotExist.
									Operator string `json:"operator"`

									// Values values is an array of string values. If the operator is In or NotIn,
									// the values array must be non-empty. If the operator is Exists or DoesNotExist,
									// the values array must be empty. This array is replaced during a strategic
									// merge patch.
									Values *[]string `json:"values,omitempty"`
								} `json:"matchExpressions,omitempty"`

								// MatchLabels matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels
								// map is equivalent to an element of matchExpressions, whose key field is "key", the
								// operator is "In", and the values array contains only "value". The requirements are ANDed.
								MatchLabels *map[string]string `json:"matchLabels,omitempty"`
							} `json:"namespaceSelector,omitempty"`

							// Namespaces namespaces specifies a static list of namespace names that the term applies to.
							// The term is applied to the union of the namespaces listed in this field
							// and the ones selected by namespaceSelector.
							// null or empty namespaces list and null namespaceSelector means "this pod's namespace".
							Namespaces *[]string `json:"namespaces,omitempty"`

							// TopologyKey This pod should be co-located (affinity) or not co-located (anti-affinity) with the pods matching
							// the labelSelector in the specified namespaces, where co-located is defined as running on a node
							// whose value of the label with key topologyKey matches that of any node on which any of the
							// selected pods is running.
							// Empty topologyKey is not allowed.
							TopologyKey string `json:"topologyKey"`
						} `json:"requiredDuringSchedulingIgnoredDuringExecution,omitempty"`
					} `json:"podAffinity,omitempty"`

					// PodAntiAffinity Describes pod anti-affinity scheduling rules (e.g. avoid putting this pod in the same node, zone, etc. as some other pod(s)).
					PodAntiAffinity *struct {
						// PreferredDuringSchedulingIgnoredDuringExecution The scheduler will prefer to schedule pods to nodes that satisfy
						// the anti-affinity expressions specified by this field, but it may choose
						// a node that violates one or more of the expressions. The node that is
						// most preferred is the one with the greatest sum of weights, i.e.
						// for each node that meets all of the scheduling requirements (resource
						// request, requiredDuringScheduling anti-affinity expressions, etc.),
						// compute a sum by iterating through the elements of this field and adding
						// "weight" to the sum if the node has pods which matches the corresponding podAffinityTerm; the
						// node(s) with the highest sum are the most preferred.
						PreferredDuringSchedulingIgnoredDuringExecution *[]struct {
							// PodAffinityTerm Required. A pod affinity term, associated with the corresponding weight.
							PodAffinityTerm struct {
								// LabelSelector A label query over a set of resources, in this case pods.
								// If it's null, this PodAffinityTerm matches with no Pods.
								LabelSelector *struct {
									// MatchExpressions matchExpressions is a list of label selector requirements. The requirements are ANDed.
									MatchExpressions *[]struct {
										// Key key is the label key that the selector applies to.
										Key string `json:"key"`

										// Operator operator represents a key's relationship to a set of values.
										// Valid operators are In, NotIn, Exists and DoesNotExist.
										Operator string `json:"operator"`

										// Values values is an array of string values. If the operator is In or NotIn,
										// the values array must be non-empty. If the operator is Exists or DoesNotExist,
										// the values array must be empty. This array is replaced during a strategic
										// merge patch.
										Values *[]string `json:"values,omitempty"`
									} `json:"matchExpressions,omitempty"`

									// MatchLabels matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels
									// map is equivalent to an element of matchExpressions, whose key field is "key", the
									// operator is "In", and the values array contains only "value". The requirements are ANDed.
									MatchLabels *map[string]string `json:"matchLabels,omitempty"`
								} `json:"labelSelector,omitempty"`

								// MatchLabelKeys MatchLabelKeys is a set of pod label keys to select which pods will
								// be taken into consideration. The keys are used to lookup values from the
								// incoming pod labels, those key-value labels are merged with `labelSelector` as `key in (value)`
								// to select the group of existing pods which pods will be taken into consideration
								// for the incoming pod's pod (anti) affinity. Keys that don't exist in the incoming
								// pod labels will be ignored. The default value is empty.
								// The same key is forbidden to exist in both matchLabelKeys and labelSelector.
								// Also, matchLabelKeys cannot be set when labelSelector isn't set.
								MatchLabelKeys *[]string `json:"matchLabelKeys,omitempty"`

								// MismatchLabelKeys MismatchLabelKeys is a set of pod label keys to select which pods will
								// be taken into consideration. The keys are used to lookup values from the
								// incoming pod labels, those key-value labels are merged with `labelSelector` as `key notin (value)`
								// to select the group of existing pods which pods will be taken into consideration
								// for the incoming pod's pod (anti) affinity. Keys that don't exist in the incoming
								// pod labels will be ignored. The default value is empty.
								// The same key is forbidden to exist in both mismatchLabelKeys and labelSelector.
								// Also, mismatchLabelKeys cannot be set when labelSelector isn't set.
								MismatchLabelKeys *[]string `json:"mismatchLabelKeys,omitempty"`

								// NamespaceSelector A label query over the set of namespaces that the term applies to.
								// The term is applied to the union of the namespaces selected by this field
								// and the ones listed in the namespaces field.
								// null selector and null or empty namespaces list means "this pod's namespace".
								// An empty selector ({}) matches all namespaces.
								NamespaceSelector *struct {
									// MatchExpressions matchExpressions is a list of label selector requirements. The requirements are ANDed.
									MatchExpressions *[]struct {
										// Key key is the label key that the selector applies to.
										Key string `json:"key"`

										// Operator operator represents a key's relationship to a set of values.
										// Valid operators are In, NotIn, Exists and DoesNotExist.
										Operator string `json:"operator"`

										// Values values is an array of string values. If the operator is In or NotIn,
										// the values array must be non-empty. If the operator is Exists or DoesNotExist,
										// the values array must be empty. This array is replaced during a strategic
										// merge patch.
										Values *[]string `json:"values,omitempty"`
									} `json:"matchExpressions,omitempty"`

									// MatchLabels matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels
									// map is equivalent to an element of matchExpressions, whose key field is "key", the
									// operator is "In", and the values array contains only "value". The requirements are ANDed.
									MatchLabels *map[string]string `json:"matchLabels,omitempty"`
								} `json:"namespaceSelector,omitempty"`

								// Namespaces namespaces specifies a static list of namespace names that the term applies to.
								// The term is applied to the union of the namespaces listed in this field
								// and the ones selected by namespaceSelector.
								// null or empty namespaces list and null namespaceSelector means "this pod's namespace".
								Namespaces *[]string `json:"namespaces,omitempty"`

								// TopologyKey This pod should be co-located (affinity) or not co-located (anti-affinity) with the pods matching
								// the labelSelector in the specified namespaces, where co-located is defined as running on a node
								// whose value of the label with key topologyKey matches that of any node on which any of the
								// selected pods is running.
								// Empty topologyKey is not allowed.
								TopologyKey string `json:"topologyKey"`
							} `json:"podAffinityTerm"`

							// Weight weight associated with matching the corresponding podAffinityTerm,
							// in the range 1-100.
							Weight int32 `json:"weight"`
						} `json:"preferredDuringSchedulingIgnoredDuringExecution,omitempty"`

						// RequiredDuringSchedulingIgnoredDuringExecution If the anti-affinity requirements specified by this field are not met at
						// scheduling time, the pod will not be scheduled onto the node.
						// If the anti-affinity requirements specified by this field cease to be met
						// at some point during pod execution (e.g. due to a pod label update), the
						// system may or may not try to eventually evict the pod from its node.
						// When there are multiple elements, the lists of nodes corresponding to each
						// podAffinityTerm are intersected, i.e. all terms must be satisfied.
						RequiredDuringSchedulingIgnoredDuringExecution *[]struct {
							// LabelSelector A label query over a set of resources, in this case pods.
							// If it's null, this PodAffinityTerm matches with no Pods.
							LabelSelector *struct {
								// MatchExpressions matchExpressions is a list of label selector requirements. The requirements are ANDed.
								MatchExpressions *[]struct {
									// Key key is the label key that the selector applies to.
									Key string `json:"key"`

									// Operator operator represents a key's relationship to a set of values.
									// Valid operators are In, NotIn, Exists and DoesNotExist.
									Operator string `json:"operator"`

									// Values values is an array of string values. If the operator is In or NotIn,
									// the values array must be non-empty. If the operator is Exists or DoesNotExist,
									// the values array must be empty. This array is replaced during a strategic
									// merge patch.
									Values *[]string `json:"values,omitempty"`
								} `json:"matchExpressions,omitempty"`

								// MatchLabels matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels
								// map is equivalent to an element of matchExpressions, whose key field is "key", the
								// operator is "In", and the values array contains only "value". The requirements are ANDed.
								MatchLabels *map[string]string `json:"matchLabels,omitempty"`
							} `json:"labelSelector,omitempty"`

							// MatchLabelKeys MatchLabelKeys is a set of pod label keys to select which pods will
							// be taken into consideration. The keys are used to lookup values from the
							// incoming pod labels, those key-value labels are merged with `labelSelector` as `key in (value)`
							// to select the group of existing pods which pods will be taken into consideration
							// for the incoming pod's pod (anti) affinity. Keys that don't exist in the incoming
							// pod labels will be ignored. The default value is empty.
							// The same key is forbidden to exist in both matchLabelKeys and labelSelector.
							// Also, matchLabelKeys cannot be set when labelSelector isn't set.
							MatchLabelKeys *[]string `json:"matchLabelKeys,omitempty"`

							// MismatchLabelKeys MismatchLabelKeys is a set of pod label keys to select which pods will
							// be taken into consideration. The keys are used to lookup values from the
							// incoming pod labels, those key-value labels are merged with `labelSelector` as `key notin (value)`
							// to select the group of existing pods which pods will be taken into consideration
							// for the incoming pod's pod (anti) affinity. Keys that don't exist in the incoming
							// pod labels will be ignored. The default value is empty.
							// The same key is forbidden to exist in both mismatchLabelKeys and labelSelector.
							// Also, mismatchLabelKeys cannot be set when labelSelector isn't set.
							MismatchLabelKeys *[]string `json:"mismatchLabelKeys,omitempty"`

							// NamespaceSelector A label query over the set of namespaces that the term applies to.
							// The term is applied to the union of the namespaces selected by this field
							// and the ones listed in the namespaces field.
							// null selector and null or empty namespaces list means "this pod's namespace".
							// An empty selector ({}) matches all namespaces.
							NamespaceSelector *struct {
								// MatchExpressions matchExpressions is a list of label selector requirements. The requirements are ANDed.
								MatchExpressions *[]struct {
									// Key key is the label key that the selector applies to.
									Key string `json:"key"`

									// Operator operator represents a key's relationship to a set of values.
									// Valid operators are In, NotIn, Exists and DoesNotExist.
									Operator string `json:"operator"`

									// Values values is an array of string values. If the operator is In or NotIn,
									// the values array must be non-empty. If the operator is Exists or DoesNotExist,
									// the values array must be empty. This array is replaced during a strategic
									// merge patch.
									Values *[]string `json:"values,omitempty"`
								} `json:"matchExpressions,omitempty"`

								// MatchLabels matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels
								// map is equivalent to an element of matchExpressions, whose key field is "key", the
								// operator is "In", and the values array contains only "value". The requirements are ANDed.
								MatchLabels *map[string]string `json:"matchLabels,omitempty"`
							} `json:"namespaceSelector,omitempty"`

							// Namespaces namespaces specifies a static list of namespace names that the term applies to.
							// The term is applied to the union of the namespaces listed in this field
							// and the ones selected by namespaceSelector.
							// null or empty namespaces list and null namespaceSelector means "this pod's namespace".
							Namespaces *[]string `json:"namespaces,omitempty"`

							// TopologyKey This pod should be co-located (affinity) or not co-located (anti-affinity) with the pods matching
							// the labelSelector in the specified namespaces, where co-located is defined as running on a node
							// whose value of the label with key topologyKey matches that of any node on which any of the
							// selected pods is running.
							// Empty topologyKey is not allowed.
							TopologyKey string `json:"topologyKey"`
						} `json:"requiredDuringSchedulingIgnoredDuringExecution,omitempty"`
					} `json:"podAntiAffinity,omitempty"`
				} `json:"proxy,omitempty"`
			} `json:"postgresql,omitempty"`

			// Psmdb PSMDB is the affinity configuration for the PSMDB DB clusters.
			Psmdb *struct {
				// ConfigServer ConfigServer is the affinity configuration for the DB Config Server pods.
				ConfigServer *struct {
					// NodeAffinity Describes node affinity scheduling rules for the pod.
					NodeAffinity *struct {
						// PreferredDuringSchedulingIgnoredDuringExecution The scheduler will prefer to schedule pods to nodes that satisfy
						// the affinity expressions specified by this field, but it may choose
						// a node that violates one or more of the expressions. The node that is
						// most preferred is the one with the greatest sum of weights, i.e.
						// for each node that meets all of the scheduling requirements (resource
						// request, requiredDuringScheduling affinity expressions, etc.),
						// compute a sum by iterating through the elements of this field and adding
						// "weight" to the sum if the node matches the corresponding matchExpressions; the
						// node(s) with the highest sum are the most preferred.
						PreferredDuringSchedulingIgnoredDuringExecution *[]struct {
							// Preference A node selector term, associated with the corresponding weight.
							Preference struct {
								// MatchExpressions A list of node selector requirements by node's labels.
								MatchExpressions *[]struct {
									// Key The label key that the selector applies to.
									Key string `json:"key"`

									// Operator Represents a key's relationship to a set of values.
									// Valid operators are In, NotIn, Exists, DoesNotExist. Gt, and Lt.
									Operator string `json:"operator"`

									// Values An array of string values. If the operator is In or NotIn,
									// the values array must be non-empty. If the operator is Exists or DoesNotExist,
									// the values array must be empty. If the operator is Gt or Lt, the values
									// array must have a single element, which will be interpreted as an integer.
									// This array is replaced during a strategic merge patch.
									Values *[]string `json:"values,omitempty"`
								} `json:"matchExpressions,omitempty"`

								// MatchFields A list of node selector requirements by node's fields.
								MatchFields *[]struct {
									// Key The label key that the selector applies to.
									Key string `json:"key"`

									// Operator Represents a key's relationship to a set of values.
									// Valid operators are In, NotIn, Exists, DoesNotExist. Gt, and Lt.
									Operator string `json:"operator"`

									// Values An array of string values. If the operator is In or NotIn,
									// the values array must be non-empty. If the operator is Exists or DoesNotExist,
									// the values array must be empty. If the operator is Gt or Lt, the values
									// array must have a single element, which will be interpreted as an integer.
									// This array is replaced during a strategic merge patch.
									Values *[]string `json:"values,omitempty"`
								} `json:"matchFields,omitempty"`
							} `json:"preference"`

							// Weight Weight associated with matching the corresponding nodeSelectorTerm, in the range 1-100.
							Weight int32 `json:"weight"`
						} `json:"preferredDuringSchedulingIgnoredDuringExecution,omitempty"`

						// RequiredDuringSchedulingIgnoredDuringExecution If the affinity requirements specified by this field are not met at
						// scheduling time, the pod will not be scheduled onto the node.
						// If the affinity requirements specified by this field cease to be met
						// at some point during pod execution (e.g. due to an update), the system
						// may or may not try to eventually evict the pod from its node.
						RequiredDuringSchedulingIgnoredDuringExecution *struct {
							// NodeSelectorTerms Required. A list of node selector terms. The terms are ORed.
							NodeSelectorTerms []struct {
								// MatchExpressions A list of node selector requirements by node's labels.
								MatchExpressions *[]struct {
									// Key The label key that the selector applies to.
									Key string `json:"key"`

									// Operator Represents a key's relationship to a set of values.
									// Valid operators are In, NotIn, Exists, DoesNotExist. Gt, and Lt.
									Operator string `json:"operator"`

									// Values An array of string values. If the operator is In or NotIn,
									// the values array must be non-empty. If the operator is Exists or DoesNotExist,
									// the values array must be empty. If the operator is Gt or Lt, the values
									// array must have a single element, which will be interpreted as an integer.
									// This array is replaced during a strategic merge patch.
									Values *[]string `json:"values,omitempty"`
								} `json:"matchExpressions,omitempty"`

								// MatchFields A list of node selector requirements by node's fields.
								MatchFields *[]struct {
									// Key The label key that the selector applies to.
									Key string `json:"key"`

									// Operator Represents a key's relationship to a set of values.
									// Valid operators are In, NotIn, Exists, DoesNotExist. Gt, and Lt.
									Operator string `json:"operator"`

									// Values An array of string values. If the operator is In or NotIn,
									// the values array must be non-empty. If the operator is Exists or DoesNotExist,
									// the values array must be empty. If the operator is Gt or Lt, the values
									// array must have a single element, which will be interpreted as an integer.
									// This array is replaced during a strategic merge patch.
									Values *[]string `json:"values,omitempty"`
								} `json:"matchFields,omitempty"`
							} `json:"nodeSelectorTerms"`
						} `json:"requiredDuringSchedulingIgnoredDuringExecution,omitempty"`
					} `json:"nodeAffinity,omitempty"`

					// PodAffinity Describes pod affinity scheduling rules (e.g. co-locate this pod in the same node, zone, etc. as some other pod(s)).
					PodAffinity *struct {
						// PreferredDuringSchedulingIgnoredDuringExecution The scheduler will prefer to schedule pods to nodes that satisfy
						// the affinity expressions specified by this field, but it may choose
						// a node that violates one or more of the expressions. The node that is
						// most preferred is the one with the greatest sum of weights, i.e.
						// for each node that meets all of the scheduling requirements (resource
						// request, requiredDuringScheduling affinity expressions, etc.),
						// compute a sum by iterating through the elements of this field and adding
						// "weight" to the sum if the node has pods which matches the corresponding podAffinityTerm; the
						// node(s) with the highest sum are the most preferred.
						PreferredDuringSchedulingIgnoredDuringExecution *[]struct {
							// PodAffinityTerm Required. A pod affinity term, associated with the corresponding weight.
							PodAffinityTerm struct {
								// LabelSelector A label query over a set of resources, in this case pods.
								// If it's null, this PodAffinityTerm matches with no Pods.
								LabelSelector *struct {
									// MatchExpressions matchExpressions is a list of label selector requirements. The requirements are ANDed.
									MatchExpressions *[]struct {
										// Key key is the label key that the selector applies to.
										Key string `json:"key"`

										// Operator operator represents a key's relationship to a set of values.
										// Valid operators are In, NotIn, Exists and DoesNotExist.
										Operator string `json:"operator"`

										// Values values is an array of string values. If the operator is In or NotIn,
										// the values array must be non-empty. If the operator is Exists or DoesNotExist,
										// the values array must be empty. This array is replaced during a strategic
										// merge patch.
										Values *[]string `json:"values,omitempty"`
									} `json:"matchExpressions,omitempty"`

									// MatchLabels matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels
									// map is equivalent to an element of matchExpressions, whose key field is "key", the
									// operator is "In", and the values array contains only "value". The requirements are ANDed.
									MatchLabels *map[string]string `json:"matchLabels,omitempty"`
								} `json:"labelSelector,omitempty"`

								// MatchLabelKeys MatchLabelKeys is a set of pod label keys to select which pods will
								// be taken into consideration. The keys are used to lookup values from the
								// incoming pod labels, those key-value labels are merged with `labelSelector` as `key in (value)`
								// to select the group of existing pods which pods will be taken into consideration
								// for the incoming pod's pod (anti) affinity. Keys that don't exist in the incoming
								// pod labels will be ignored. The default value is empty.
								// The same key is forbidden to exist in both matchLabelKeys and labelSelector.
								// Also, matchLabelKeys cannot be set when labelSelector isn't set.
								MatchLabelKeys *[]string `json:"matchLabelKeys,omitempty"`

								// MismatchLabelKeys MismatchLabelKeys is a set of pod label keys to select which pods will
								// be taken into consideration. The keys are used to lookup values from the
								// incoming pod labels, those key-value labels are merged with `labelSelector` as `key notin (value)`
								// to select the group of existing pods which pods will be taken into consideration
								// for the incoming pod's pod (anti) affinity. Keys that don't exist in the incoming
								// pod labels will be ignored. The default value is empty.
								// The same key is forbidden to exist in both mismatchLabelKeys and labelSelector.
								// Also, mismatchLabelKeys cannot be set when labelSelector isn't set.
								MismatchLabelKeys *[]string `json:"mismatchLabelKeys,omitempty"`

								// NamespaceSelector A label query over the set of namespaces that the term applies to.
								// The term is applied to the union of the namespaces selected by this field
								// and the ones listed in the namespaces field.
								// null selector and null or empty namespaces list means "this pod's namespace".
								// An empty selector ({}) matches all namespaces.
								NamespaceSelector *struct {
									// MatchExpressions matchExpressions is a list of label selector requirements. The requirements are ANDed.
									MatchExpressions *[]struct {
										// Key key is the label key that the selector applies to.
										Key string `json:"key"`

										// Operator operator represents a key's relationship to a set of values.
										// Valid operators are In, NotIn, Exists and DoesNotExist.
										Operator string `json:"operator"`

										// Values values is an array of string values. If the operator is In or NotIn,
										// the values array must be non-empty. If the operator is Exists or DoesNotExist,
										// the values array must be empty. This array is replaced during a strategic
										// merge patch.
										Values *[]string `json:"values,omitempty"`
									} `json:"matchExpressions,omitempty"`

									// MatchLabels matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels
									// map is equivalent to an element of matchExpressions, whose key field is "key", the
									// operator is "In", and the values array contains only "value". The requirements are ANDed.
									MatchLabels *map[string]string `json:"matchLabels,omitempty"`
								} `json:"namespaceSelector,omitempty"`

								// Namespaces namespaces specifies a static list of namespace names that the term applies to.
								// The term is applied to the union of the namespaces listed in this field
								// and the ones selected by namespaceSelector.
								// null or empty namespaces list and null namespaceSelector means "this pod's namespace".
								Namespaces *[]string `json:"namespaces,omitempty"`

								// TopologyKey This pod should be co-located (affinity) or not co-located (anti-affinity) with the pods matching
								// the labelSelector in the specified namespaces, where co-located is defined as running on a node
								// whose value of the label with key topologyKey matches that of any node on which any of the
								// selected pods is running.
								// Empty topologyKey is not allowed.
								TopologyKey string `json:"topologyKey"`
							} `json:"podAffinityTerm"`

							// Weight weight associated with matching the corresponding podAffinityTerm,
							// in the range 1-100.
							Weight int32 `json:"weight"`
						} `json:"preferredDuringSchedulingIgnoredDuringExecution,omitempty"`

						// RequiredDuringSchedulingIgnoredDuringExecution If the affinity requirements specified by this field are not met at
						// scheduling time, the pod will not be scheduled onto the node.
						// If the affinity requirements specified by this field cease to be met
						// at some point during pod execution (e.g. due to a pod label update), the
						// system may or may not try to eventually evict the pod from its node.
						// When there are multiple elements, the lists of nodes corresponding to each
						// podAffinityTerm are intersected, i.e. all terms must be satisfied.
						RequiredDuringSchedulingIgnoredDuringExecution *[]struct {
							// LabelSelector A label query over a set of resources, in this case pods.
							// If it's null, this PodAffinityTerm matches with no Pods.
							LabelSelector *struct {
								// MatchExpressions matchExpressions is a list of label selector requirements. The requirements are ANDed.
								MatchExpressions *[]struct {
									// Key key is the label key that the selector applies to.
									Key string `json:"key"`

									// Operator operator represents a key's relationship to a set of values.
									// Valid operators are In, NotIn, Exists and DoesNotExist.
									Operator string `json:"operator"`

									// Values values is an array of string values. If the operator is In or NotIn,
									// the values array must be non-empty. If the operator is Exists or DoesNotExist,
									// the values array must be empty. This array is replaced during a strategic
									// merge patch.
									Values *[]string `json:"values,omitempty"`
								} `json:"matchExpressions,omitempty"`

								// MatchLabels matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels
								// map is equivalent to an element of matchExpressions, whose key field is "key", the
								// operator is "In", and the values array contains only "value". The requirements are ANDed.
								MatchLabels *map[string]string `json:"matchLabels,omitempty"`
							} `json:"labelSelector,omitempty"`

							// MatchLabelKeys MatchLabelKeys is a set of pod label keys to select which pods will
							// be taken into consideration. The keys are used to lookup values from the
							// incoming pod labels, those key-value labels are merged with `labelSelector` as `key in (value)`
							// to select the group of existing pods which pods will be taken into consideration
							// for the incoming pod's pod (anti) affinity. Keys that don't exist in the incoming
							// pod labels will be ignored. The default value is empty.
							// The same key is forbidden to exist in both matchLabelKeys and labelSelector.
							// Also, matchLabelKeys cannot be set when labelSelector isn't set.
							MatchLabelKeys *[]string `json:"matchLabelKeys,omitempty"`

							// MismatchLabelKeys MismatchLabelKeys is a set of pod label keys to select which pods will
							// be taken into consideration. The keys are used to lookup values from the
							// incoming pod labels, those key-value labels are merged with `labelSelector` as `key notin (value)`
							// to select the group of existing pods which pods will be taken into consideration
							// for the incoming pod's pod (anti) affinity. Keys that don't exist in the incoming
							// pod labels will be ignored. The default value is empty.
							// The same key is forbidden to exist in both mismatchLabelKeys and labelSelector.
							// Also, mismatchLabelKeys cannot be set when labelSelector isn't set.
							MismatchLabelKeys *[]string `json:"mismatchLabelKeys,omitempty"`

							// NamespaceSelector A label query over the set of namespaces that the term applies to.
							// The term is applied to the union of the namespaces selected by this field
							// and the ones listed in the namespaces field.
							// null selector and null or empty namespaces list means "this pod's namespace".
							// An empty selector ({}) matches all namespaces.
							NamespaceSelector *struct {
								// MatchExpressions matchExpressions is a list of label selector requirements. The requirements are ANDed.
								MatchExpressions *[]struct {
									// Key key is the label key that the selector applies to.
									Key string `json:"key"`

									// Operator operator represents a key's relationship to a set of values.
									// Valid operators are In, NotIn, Exists and DoesNotExist.
									Operator string `json:"operator"`

									// Values values is an array of string values. If the operator is In or NotIn,
									// the values array must be non-empty. If the operator is Exists or DoesNotExist,
									// the values array must be empty. This array is replaced during a strategic
									// merge patch.
									Values *[]string `json:"values,omitempty"`
								} `json:"matchExpressions,omitempty"`

								// MatchLabels matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels
								// map is equivalent to an element of matchExpressions, whose key field is "key", the
								// operator is "In", and the values array contains only "value". The requirements are ANDed.
								MatchLabels *map[string]string `json:"matchLabels,omitempty"`
							} `json:"namespaceSelector,omitempty"`

							// Namespaces namespaces specifies a static list of namespace names that the term applies to.
							// The term is applied to the union of the namespaces listed in this field
							// and the ones selected by namespaceSelector.
							// null or empty namespaces list and null namespaceSelector means "this pod's namespace".
							Namespaces *[]string `json:"namespaces,omitempty"`

							// TopologyKey This pod should be co-located (affinity) or not co-located (anti-affinity) with the pods matching
							// the labelSelector in the specified namespaces, where co-located is defined as running on a node
							// whose value of the label with key topologyKey matches that of any node on which any of the
							// selected pods is running.
							// Empty topologyKey is not allowed.
							TopologyKey string `json:"topologyKey"`
						} `json:"requiredDuringSchedulingIgnoredDuringExecution,omitempty"`
					} `json:"podAffinity,omitempty"`

					// PodAntiAffinity Describes pod anti-affinity scheduling rules (e.g. avoid putting this pod in the same node, zone, etc. as some other pod(s)).
					PodAntiAffinity *struct {
						// PreferredDuringSchedulingIgnoredDuringExecution The scheduler will prefer to schedule pods to nodes that satisfy
						// the anti-affinity expressions specified by this field, but it may choose
						// a node that violates one or more of the expressions. The node that is
						// most preferred is the one with the greatest sum of weights, i.e.
						// for each node that meets all of the scheduling requirements (resource
						// request, requiredDuringScheduling anti-affinity expressions, etc.),
						// compute a sum by iterating through the elements of this field and adding
						// "weight" to the sum if the node has pods which matches the corresponding podAffinityTerm; the
						// node(s) with the highest sum are the most preferred.
						PreferredDuringSchedulingIgnoredDuringExecution *[]struct {
							// PodAffinityTerm Required. A pod affinity term, associated with the corresponding weight.
							PodAffinityTerm struct {
								// LabelSelector A label query over a set of resources, in this case pods.
								// If it's null, this PodAffinityTerm matches with no Pods.
								LabelSelector *struct {
									// MatchExpressions matchExpressions is a list of label selector requirements. The requirements are ANDed.
									MatchExpressions *[]struct {
										// Key key is the label key that the selector applies to.
										Key string `json:"key"`

										// Operator operator represents a key's relationship to a set of values.
										// Valid operators are In, NotIn, Exists and DoesNotExist.
										Operator string `json:"operator"`

										// Values values is an array of string values. If the operator is In or NotIn,
										// the values array must be non-empty. If the operator is Exists or DoesNotExist,
										// the values array must be empty. This array is replaced during a strategic
										// merge patch.
										Values *[]string `json:"values,omitempty"`
									} `json:"matchExpressions,omitempty"`

									// MatchLabels matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels
									// map is equivalent to an element of matchExpressions, whose key field is "key", the
									// operator is "In", and the values array contains only "value". The requirements are ANDed.
									MatchLabels *map[string]string `json:"matchLabels,omitempty"`
								} `json:"labelSelector,omitempty"`

								// MatchLabelKeys MatchLabelKeys is a set of pod label keys to select which pods will
								// be taken into consideration. The keys are used to lookup values from the
								// incoming pod labels, those key-value labels are merged with `labelSelector` as `key in (value)`
								// to select the group of existing pods which pods will be taken into consideration
								// for the incoming pod's pod (anti) affinity. Keys that don't exist in the incoming
								// pod labels will be ignored. The default value is empty.
								// The same key is forbidden to exist in both matchLabelKeys and labelSelector.
								// Also, matchLabelKeys cannot be set when labelSelector isn't set.
								MatchLabelKeys *[]string `json:"matchLabelKeys,omitempty"`

								// MismatchLabelKeys MismatchLabelKeys is a set of pod label keys to select which pods will
								// be taken into consideration. The keys are used to lookup values from the
								// incoming pod labels, those key-value labels are merged with `labelSelector` as `key notin (value)`
								// to select the group of existing pods which pods will be taken into consideration
								// for the incoming pod's pod (anti) affinity. Keys that don't exist in the incoming
								// pod labels will be ignored. The default value is empty.
								// The same key is forbidden to exist in both mismatchLabelKeys and labelSelector.
								// Also, mismatchLabelKeys cannot be set when labelSelector isn't set.
								MismatchLabelKeys *[]string `json:"mismatchLabelKeys,omitempty"`

								// NamespaceSelector A label query over the set of namespaces that the term applies to.
								// The term is applied to the union of the namespaces selected by this field
								// and the ones listed in the namespaces field.
								// null selector and null or empty namespaces list means "this pod's namespace".
								// An empty selector ({}) matches all namespaces.
								NamespaceSelector *struct {
									// MatchExpressions matchExpressions is a list of label selector requirements. The requirements are ANDed.
									MatchExpressions *[]struct {
										// Key key is the label key that the selector applies to.
										Key string `json:"key"`

										// Operator operator represents a key's relationship to a set of values.
										// Valid operators are In, NotIn, Exists and DoesNotExist.
										Operator string `json:"operator"`

										// Values values is an array of string values. If the operator is In or NotIn,
										// the values array must be non-empty. If the operator is Exists or DoesNotExist,
										// the values array must be empty. This array is replaced during a strategic
										// merge patch.
										Values *[]string `json:"values,omitempty"`
									} `json:"matchExpressions,omitempty"`

									// MatchLabels matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels
									// map is equivalent to an element of matchExpressions, whose key field is "key", the
									// operator is "In", and the values array contains only "value". The requirements are ANDed.
									MatchLabels *map[string]string `json:"matchLabels,omitempty"`
								} `json:"namespaceSelector,omitempty"`

								// Namespaces namespaces specifies a static list of namespace names that the term applies to.
								// The term is applied to the union of the namespaces listed in this field
								// and the ones selected by namespaceSelector.
								// null or empty namespaces list and null namespaceSelector means "this pod's namespace".
								Namespaces *[]string `json:"namespaces,omitempty"`

								// TopologyKey This pod should be co-located (affinity) or not co-located (anti-affinity) with the pods matching
								// the labelSelector in the specified namespaces, where co-located is defined as running on a node
								// whose value of the label with key topologyKey matches that of any node on which any of the
								// selected pods is running.
								// Empty topologyKey is not allowed.
								TopologyKey string `json:"topologyKey"`
							} `json:"podAffinityTerm"`

							// Weight weight associated with matching the corresponding podAffinityTerm,
							// in the range 1-100.
							Weight int32 `json:"weight"`
						} `json:"preferredDuringSchedulingIgnoredDuringExecution,omitempty"`

						// RequiredDuringSchedulingIgnoredDuringExecution If the anti-affinity requirements specified by this field are not met at
						// scheduling time, the pod will not be scheduled onto the node.
						// If the anti-affinity requirements specified by this field cease to be met
						// at some point during pod execution (e.g. due to a pod label update), the
						// system may or may not try to eventually evict the pod from its node.
						// When there are multiple elements, the lists of nodes corresponding to each
						// podAffinityTerm are intersected, i.e. all terms must be satisfied.
						RequiredDuringSchedulingIgnoredDuringExecution *[]struct {
							// LabelSelector A label query over a set of resources, in this case pods.
							// If it's null, this PodAffinityTerm matches with no Pods.
							LabelSelector *struct {
								// MatchExpressions matchExpressions is a list of label selector requirements. The requirements are ANDed.
								MatchExpressions *[]struct {
									// Key key is the label key that the selector applies to.
									Key string `json:"key"`

									// Operator operator represents a key's relationship to a set of values.
									// Valid operators are In, NotIn, Exists and DoesNotExist.
									Operator string `json:"operator"`

									// Values values is an array of string values. If the operator is In or NotIn,
									// the values array must be non-empty. If the operator is Exists or DoesNotExist,
									// the values array must be empty. This array is replaced during a strategic
									// merge patch.
									Values *[]string `json:"values,omitempty"`
								} `json:"matchExpressions,omitempty"`

								// MatchLabels matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels
								// map is equivalent to an element of matchExpressions, whose key field is "key", the
								// operator is "In", and the values array contains only "value". The requirements are ANDed.
								MatchLabels *map[string]string `json:"matchLabels,omitempty"`
							} `json:"labelSelector,omitempty"`

							// MatchLabelKeys MatchLabelKeys is a set of pod label keys to select which pods will
							// be taken into consideration. The keys are used to lookup values from the
							// incoming pod labels, those key-value labels are merged with `labelSelector` as `key in (value)`
							// to select the group of existing pods which pods will be taken into consideration
							// for the incoming pod's pod (anti) affinity. Keys that don't exist in the incoming
							// pod labels will be ignored. The default value is empty.
							// The same key is forbidden to exist in both matchLabelKeys and labelSelector.
							// Also, matchLabelKeys cannot be set when labelSelector isn't set.
							MatchLabelKeys *[]string `json:"matchLabelKeys,omitempty"`

							// MismatchLabelKeys MismatchLabelKeys is a set of pod label keys to select which pods will
							// be taken into consideration. The keys are used to lookup values from the
							// incoming pod labels, those key-value labels are merged with `labelSelector` as `key notin (value)`
							// to select the group of existing pods which pods will be taken into consideration
							// for the incoming pod's pod (anti) affinity. Keys that don't exist in the incoming
							// pod labels will be ignored. The default value is empty.
							// The same key is forbidden to exist in both mismatchLabelKeys and labelSelector.
							// Also, mismatchLabelKeys cannot be set when labelSelector isn't set.
							MismatchLabelKeys *[]string `json:"mismatchLabelKeys,omitempty"`

							// NamespaceSelector A label query over the set of namespaces that the term applies to.
							// The term is applied to the union of the namespaces selected by this field
							// and the ones listed in the namespaces field.
							// null selector and null or empty namespaces list means "this pod's namespace".
							// An empty selector ({}) matches all namespaces.
							NamespaceSelector *struct {
								// MatchExpressions matchExpressions is a list of label selector requirements. The requirements are ANDed.
								MatchExpressions *[]struct {
									// Key key is the label key that the selector applies to.
									Key string `json:"key"`

									// Operator operator represents a key's relationship to a set of values.
									// Valid operators are In, NotIn, Exists and DoesNotExist.
									Operator string `json:"operator"`

									// Values values is an array of string values. If the operator is In or NotIn,
									// the values array must be non-empty. If the operator is Exists or DoesNotExist,
									// the values array must be empty. This array is replaced during a strategic
									// merge patch.
									Values *[]string `json:"values,omitempty"`
								} `json:"matchExpressions,omitempty"`

								// MatchLabels matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels
								// map is equivalent to an element of matchExpressions, whose key field is "key", the
								// operator is "In", and the values array contains only "value". The requirements are ANDed.
								MatchLabels *map[string]string `json:"matchLabels,omitempty"`
							} `json:"namespaceSelector,omitempty"`

							// Namespaces namespaces specifies a static list of namespace names that the term applies to.
							// The term is applied to the union of the namespaces listed in this field
							// and the ones selected by namespaceSelector.
							// null or empty namespaces list and null namespaceSelector means "this pod's namespace".
							Namespaces *[]string `json:"namespaces,omitempty"`

							// TopologyKey This pod should be co-located (affinity) or not co-located (anti-affinity) with the pods matching
							// the labelSelector in the specified namespaces, where co-located is defined as running on a node
							// whose value of the label with key topologyKey matches that of any node on which any of the
							// selected pods is running.
							// Empty topologyKey is not allowed.
							TopologyKey string `json:"topologyKey"`
						} `json:"requiredDuringSchedulingIgnoredDuringExecution,omitempty"`
					} `json:"podAntiAffinity,omitempty"`
				} `json:"configServer,omitempty"`

				// Engine Engine is the affinity configuration for the DB Engine pods.
				Engine *struct {
					// NodeAffinity Describes node affinity scheduling rules for the pod.
					NodeAffinity *struct {
						// PreferredDuringSchedulingIgnoredDuringExecution The scheduler will prefer to schedule pods to nodes that satisfy
						// the affinity expressions specified by this field, but it may choose
						// a node that violates one or more of the expressions. The node that is
						// most preferred is the one with the greatest sum of weights, i.e.
						// for each node that meets all of the scheduling requirements (resource
						// request, requiredDuringScheduling affinity expressions, etc.),
						// compute a sum by iterating through the elements of this field and adding
						// "weight" to the sum if the node matches the corresponding matchExpressions; the
						// node(s) with the highest sum are the most preferred.
						PreferredDuringSchedulingIgnoredDuringExecution *[]struct {
							// Preference A node selector term, associated with the corresponding weight.
							Preference struct {
								// MatchExpressions A list of node selector requirements by node's labels.
								MatchExpressions *[]struct {
									// Key The label key that the selector applies to.
									Key string `json:"key"`

									// Operator Represents a key's relationship to a set of values.
									// Valid operators are In, NotIn, Exists, DoesNotExist. Gt, and Lt.
									Operator string `json:"operator"`

									// Values An array of string values. If the operator is In or NotIn,
									// the values array must be non-empty. If the operator is Exists or DoesNotExist,
									// the values array must be empty. If the operator is Gt or Lt, the values
									// array must have a single element, which will be interpreted as an integer.
									// This array is replaced during a strategic merge patch.
									Values *[]string `json:"values,omitempty"`
								} `json:"matchExpressions,omitempty"`

								// MatchFields A list of node selector requirements by node's fields.
								MatchFields *[]struct {
									// Key The label key that the selector applies to.
									Key string `json:"key"`

									// Operator Represents a key's relationship to a set of values.
									// Valid operators are In, NotIn, Exists, DoesNotExist. Gt, and Lt.
									Operator string `json:"operator"`

									// Values An array of string values. If the operator is In or NotIn,
									// the values array must be non-empty. If the operator is Exists or DoesNotExist,
									// the values array must be empty. If the operator is Gt or Lt, the values
									// array must have a single element, which will be interpreted as an integer.
									// This array is replaced during a strategic merge patch.
									Values *[]string `json:"values,omitempty"`
								} `json:"matchFields,omitempty"`
							} `json:"preference"`

							// Weight Weight associated with matching the corresponding nodeSelectorTerm, in the range 1-100.
							Weight int32 `json:"weight"`
						} `json:"preferredDuringSchedulingIgnoredDuringExecution,omitempty"`

						// RequiredDuringSchedulingIgnoredDuringExecution If the affinity requirements specified by this field are not met at
						// scheduling time, the pod will not be scheduled onto the node.
						// If the affinity requirements specified by this field cease to be met
						// at some point during pod execution (e.g. due to an update), the system
						// may or may not try to eventually evict the pod from its node.
						RequiredDuringSchedulingIgnoredDuringExecution *struct {
							// NodeSelectorTerms Required. A list of node selector terms. The terms are ORed.
							NodeSelectorTerms []struct {
								// MatchExpressions A list of node selector requirements by node's labels.
								MatchExpressions *[]struct {
									// Key The label key that the selector applies to.
									Key string `json:"key"`

									// Operator Represents a key's relationship to a set of values.
									// Valid operators are In, NotIn, Exists, DoesNotExist. Gt, and Lt.
									Operator string `json:"operator"`

									// Values An array of string values. If the operator is In or NotIn,
									// the values array must be non-empty. If the operator is Exists or DoesNotExist,
									// the values array must be empty. If the operator is Gt or Lt, the values
									// array must have a single element, which will be interpreted as an integer.
									// This array is replaced during a strategic merge patch.
									Values *[]string `json:"values,omitempty"`
								} `json:"matchExpressions,omitempty"`

								// MatchFields A list of node selector requirements by node's fields.
								MatchFields *[]struct {
									// Key The label key that the selector applies to.
									Key string `json:"key"`

									// Operator Represents a key's relationship to a set of values.
									// Valid operators are In, NotIn, Exists, DoesNotExist. Gt, and Lt.
									Operator string `json:"operator"`

									// Values An array of string values. If the operator is In or NotIn,
									// the values array must be non-empty. If the operator is Exists or DoesNotExist,
									// the values array must be empty. If the operator is Gt or Lt, the values
									// array must have a single element, which will be interpreted as an integer.
									// This array is replaced during a strategic merge patch.
									Values *[]string `json:"values,omitempty"`
								} `json:"matchFields,omitempty"`
							} `json:"nodeSelectorTerms"`
						} `json:"requiredDuringSchedulingIgnoredDuringExecution,omitempty"`
					} `json:"nodeAffinity,omitempty"`

					// PodAffinity Describes pod affinity scheduling rules (e.g. co-locate this pod in the same node, zone, etc. as some other pod(s)).
					PodAffinity *struct {
						// PreferredDuringSchedulingIgnoredDuringExecution The scheduler will prefer to schedule pods to nodes that satisfy
						// the affinity expressions specified by this field, but it may choose
						// a node that violates one or more of the expressions. The node that is
						// most preferred is the one with the greatest sum of weights, i.e.
						// for each node that meets all of the scheduling requirements (resource
						// request, requiredDuringScheduling affinity expressions, etc.),
						// compute a sum by iterating through the elements of this field and adding
						// "weight" to the sum if the node has pods which matches the corresponding podAffinityTerm; the
						// node(s) with the highest sum are the most preferred.
						PreferredDuringSchedulingIgnoredDuringExecution *[]struct {
							// PodAffinityTerm Required. A pod affinity term, associated with the corresponding weight.
							PodAffinityTerm struct {
								// LabelSelector A label query over a set of resources, in this case pods.
								// If it's null, this PodAffinityTerm matches with no Pods.
								LabelSelector *struct {
									// MatchExpressions matchExpressions is a list of label selector requirements. The requirements are ANDed.
									MatchExpressions *[]struct {
										// Key key is the label key that the selector applies to.
										Key string `json:"key"`

										// Operator operator represents a key's relationship to a set of values.
										// Valid operators are In, NotIn, Exists and DoesNotExist.
										Operator string `json:"operator"`

										// Values values is an array of string values. If the operator is In or NotIn,
										// the values array must be non-empty. If the operator is Exists or DoesNotExist,
										// the values array must be empty. This array is replaced during a strategic
										// merge patch.
										Values *[]string `json:"values,omitempty"`
									} `json:"matchExpressions,omitempty"`

									// MatchLabels matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels
									// map is equivalent to an element of matchExpressions, whose key field is "key", the
									// operator is "In", and the values array contains only "value". The requirements are ANDed.
									MatchLabels *map[string]string `json:"matchLabels,omitempty"`
								} `json:"labelSelector,omitempty"`

								// MatchLabelKeys MatchLabelKeys is a set of pod label keys to select which pods will
								// be taken into consideration. The keys are used to lookup values from the
								// incoming pod labels, those key-value labels are merged with `labelSelector` as `key in (value)`
								// to select the group of existing pods which pods will be taken into consideration
								// for the incoming pod's pod (anti) affinity. Keys that don't exist in the incoming
								// pod labels will be ignored. The default value is empty.
								// The same key is forbidden to exist in both matchLabelKeys and labelSelector.
								// Also, matchLabelKeys cannot be set when labelSelector isn't set.
								MatchLabelKeys *[]string `json:"matchLabelKeys,omitempty"`

								// MismatchLabelKeys MismatchLabelKeys is a set of pod label keys to select which pods will
								// be taken into consideration. The keys are used to lookup values from the
								// incoming pod labels, those key-value labels are merged with `labelSelector` as `key notin (value)`
								// to select the group of existing pods which pods will be taken into consideration
								// for the incoming pod's pod (anti) affinity. Keys that don't exist in the incoming
								// pod labels will be ignored. The default value is empty.
								// The same key is forbidden to exist in both mismatchLabelKeys and labelSelector.
								// Also, mismatchLabelKeys cannot be set when labelSelector isn't set.
								MismatchLabelKeys *[]string `json:"mismatchLabelKeys,omitempty"`

								// NamespaceSelector A label query over the set of namespaces that the term applies to.
								// The term is applied to the union of the namespaces selected by this field
								// and the ones listed in the namespaces field.
								// null selector and null or empty namespaces list means "this pod's namespace".
								// An empty selector ({}) matches all namespaces.
								NamespaceSelector *struct {
									// MatchExpressions matchExpressions is a list of label selector requirements. The requirements are ANDed.
									MatchExpressions *[]struct {
										// Key key is the label key that the selector applies to.
										Key string `json:"key"`

										// Operator operator represents a key's relationship to a set of values.
										// Valid operators are In, NotIn, Exists and DoesNotExist.
										Operator string `json:"operator"`

										// Values values is an array of string values. If the operator is In or NotIn,
										// the values array must be non-empty. If the operator is Exists or DoesNotExist,
										// the values array must be empty. This array is replaced during a strategic
										// merge patch.
										Values *[]string `json:"values,omitempty"`
									} `json:"matchExpressions,omitempty"`

									// MatchLabels matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels
									// map is equivalent to an element of matchExpressions, whose key field is "key", the
									// operator is "In", and the values array contains only "value". The requirements are ANDed.
									MatchLabels *map[string]string `json:"matchLabels,omitempty"`
								} `json:"namespaceSelector,omitempty"`

								// Namespaces namespaces specifies a static list of namespace names that the term applies to.
								// The term is applied to the union of the namespaces listed in this field
								// and the ones selected by namespaceSelector.
								// null or empty namespaces list and null namespaceSelector means "this pod's namespace".
								Namespaces *[]string `json:"namespaces,omitempty"`

								// TopologyKey This pod should be co-located (affinity) or not co-located (anti-affinity) with the pods matching
								// the labelSelector in the specified namespaces, where co-located is defined as running on a node
								// whose value of the label with key topologyKey matches that of any node on which any of the
								// selected pods is running.
								// Empty topologyKey is not allowed.
								TopologyKey string `json:"topologyKey"`
							} `json:"podAffinityTerm"`

							// Weight weight associated with matching the corresponding podAffinityTerm,
							// in the range 1-100.
							Weight int32 `json:"weight"`
						} `json:"preferredDuringSchedulingIgnoredDuringExecution,omitempty"`

						// RequiredDuringSchedulingIgnoredDuringExecution If the affinity requirements specified by this field are not met at
						// scheduling time, the pod will not be scheduled onto the node.
						// If the affinity requirements specified by this field cease to be met
						// at some point during pod execution (e.g. due to a pod label update), the
						// system may or may not try to eventually evict the pod from its node.
						// When there are multiple elements, the lists of nodes corresponding to each
						// podAffinityTerm are intersected, i.e. all terms must be satisfied.
						RequiredDuringSchedulingIgnoredDuringExecution *[]struct {
							// LabelSelector A label query over a set of resources, in this case pods.
							// If it's null, this PodAffinityTerm matches with no Pods.
							LabelSelector *struct {
								// MatchExpressions matchExpressions is a list of label selector requirements. The requirements are ANDed.
								MatchExpressions *[]struct {
									// Key key is the label key that the selector applies to.
									Key string `json:"key"`

									// Operator operator represents a key's relationship to a set of values.
									// Valid operators are In, NotIn, Exists and DoesNotExist.
									Operator string `json:"operator"`

									// Values values is an array of string values. If the operator is In or NotIn,
									// the values array must be non-empty. If the operator is Exists or DoesNotExist,
									// the values array must be empty. This array is replaced during a strategic
									// merge patch.
									Values *[]string `json:"values,omitempty"`
								} `json:"matchExpressions,omitempty"`

								// MatchLabels matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels
								// map is equivalent to an element of matchExpressions, whose key field is "key", the
								// operator is "In", and the values array contains only "value". The requirements are ANDed.
								MatchLabels *map[string]string `json:"matchLabels,omitempty"`
							} `json:"labelSelector,omitempty"`

							// MatchLabelKeys MatchLabelKeys is a set of pod label keys to select which pods will
							// be taken into consideration. The keys are used to lookup values from the
							// incoming pod labels, those key-value labels are merged with `labelSelector` as `key in (value)`
							// to select the group of existing pods which pods will be taken into consideration
							// for the incoming pod's pod (anti) affinity. Keys that don't exist in the incoming
							// pod labels will be ignored. The default value is empty.
							// The same key is forbidden to exist in both matchLabelKeys and labelSelector.
							// Also, matchLabelKeys cannot be set when labelSelector isn't set.
							MatchLabelKeys *[]string `json:"matchLabelKeys,omitempty"`

							// MismatchLabelKeys MismatchLabelKeys is a set of pod label keys to select which pods will
							// be taken into consideration. The keys are used to lookup values from the
							// incoming pod labels, those key-value labels are merged with `labelSelector` as `key notin (value)`
							// to select the group of existing pods which pods will be taken into consideration
							// for the incoming pod's pod (anti) affinity. Keys that don't exist in the incoming
							// pod labels will be ignored. The default value is empty.
							// The same key is forbidden to exist in both mismatchLabelKeys and labelSelector.
							// Also, mismatchLabelKeys cannot be set when labelSelector isn't set.
							MismatchLabelKeys *[]string `json:"mismatchLabelKeys,omitempty"`

							// NamespaceSelector A label query over the set of namespaces that the term applies to.
							// The term is applied to the union of the namespaces selected by this field
							// and the ones listed in the namespaces field.
							// null selector and null or empty namespaces list means "this pod's namespace".
							// An empty selector ({}) matches all namespaces.
							NamespaceSelector *struct {
								// MatchExpressions matchExpressions is a list of label selector requirements. The requirements are ANDed.
								MatchExpressions *[]struct {
									// Key key is the label key that the selector applies to.
									Key string `json:"key"`

									// Operator operator represents a key's relationship to a set of values.
									// Valid operators are In, NotIn, Exists and DoesNotExist.
									Operator string `json:"operator"`

									// Values values is an array of string values. If the operator is In or NotIn,
									// the values array must be non-empty. If the operator is Exists or DoesNotExist,
									// the values array must be empty. This array is replaced during a strategic
									// merge patch.
									Values *[]string `json:"values,omitempty"`
								} `json:"matchExpressions,omitempty"`

								// MatchLabels matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels
								// map is equivalent to an element of matchExpressions, whose key field is "key", the
								// operator is "In", and the values array contains only "value". The requirements are ANDed.
								MatchLabels *map[string]string `json:"matchLabels,omitempty"`
							} `json:"namespaceSelector,omitempty"`

							// Namespaces namespaces specifies a static list of namespace names that the term applies to.
							// The term is applied to the union of the namespaces listed in this field
							// and the ones selected by namespaceSelector.
							// null or empty namespaces list and null namespaceSelector means "this pod's namespace".
							Namespaces *[]string `json:"namespaces,omitempty"`

							// TopologyKey This pod should be co-located (affinity) or not co-located (anti-affinity) with the pods matching
							// the labelSelector in the specified namespaces, where co-located is defined as running on a node
							// whose value of the label with key topologyKey matches that of any node on which any of the
							// selected pods is running.
							// Empty topologyKey is not allowed.
							TopologyKey string `json:"topologyKey"`
						} `json:"requiredDuringSchedulingIgnoredDuringExecution,omitempty"`
					} `json:"podAffinity,omitempty"`

					// PodAntiAffinity Describes pod anti-affinity scheduling rules (e.g. avoid putting this pod in the same node, zone, etc. as some other pod(s)).
					PodAntiAffinity *struct {
						// PreferredDuringSchedulingIgnoredDuringExecution The scheduler will prefer to schedule pods to nodes that satisfy
						// the anti-affinity expressions specified by this field, but it may choose
						// a node that violates one or more of the expressions. The node that is
						// most preferred is the one with the greatest sum of weights, i.e.
						// for each node that meets all of the scheduling requirements (resource
						// request, requiredDuringScheduling anti-affinity expressions, etc.),
						// compute a sum by iterating through the elements of this field and adding
						// "weight" to the sum if the node has pods which matches the corresponding podAffinityTerm; the
						// node(s) with the highest sum are the most preferred.
						PreferredDuringSchedulingIgnoredDuringExecution *[]struct {
							// PodAffinityTerm Required. A pod affinity term, associated with the corresponding weight.
							PodAffinityTerm struct {
								// LabelSelector A label query over a set of resources, in this case pods.
								// If it's null, this PodAffinityTerm matches with no Pods.
								LabelSelector *struct {
									// MatchExpressions matchExpressions is a list of label selector requirements. The requirements are ANDed.
									MatchExpressions *[]struct {
										// Key key is the label key that the selector applies to.
										Key string `json:"key"`

										// Operator operator represents a key's relationship to a set of values.
										// Valid operators are In, NotIn, Exists and DoesNotExist.
										Operator string `json:"operator"`

										// Values values is an array of string values. If the operator is In or NotIn,
										// the values array must be non-empty. If the operator is Exists or DoesNotExist,
										// the values array must be empty. This array is replaced during a strategic
										// merge patch.
										Values *[]string `json:"values,omitempty"`
									} `json:"matchExpressions,omitempty"`

									// MatchLabels matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels
									// map is equivalent to an element of matchExpressions, whose key field is "key", the
									// operator is "In", and the values array contains only "value". The requirements are ANDed.
									MatchLabels *map[string]string `json:"matchLabels,omitempty"`
								} `json:"labelSelector,omitempty"`

								// MatchLabelKeys MatchLabelKeys is a set of pod label keys to select which pods will
								// be taken into consideration. The keys are used to lookup values from the
								// incoming pod labels, those key-value labels are merged with `labelSelector` as `key in (value)`
								// to select the group of existing pods which pods will be taken into consideration
								// for the incoming pod's pod (anti) affinity. Keys that don't exist in the incoming
								// pod labels will be ignored. The default value is empty.
								// The same key is forbidden to exist in both matchLabelKeys and labelSelector.
								// Also, matchLabelKeys cannot be set when labelSelector isn't set.
								MatchLabelKeys *[]string `json:"matchLabelKeys,omitempty"`

								// MismatchLabelKeys MismatchLabelKeys is a set of pod label keys to select which pods will
								// be taken into consideration. The keys are used to lookup values from the
								// incoming pod labels, those key-value labels are merged with `labelSelector` as `key notin (value)`
								// to select the group of existing pods which pods will be taken into consideration
								// for the incoming pod's pod (anti) affinity. Keys that don't exist in the incoming
								// pod labels will be ignored. The default value is empty.
								// The same key is forbidden to exist in both mismatchLabelKeys and labelSelector.
								// Also, mismatchLabelKeys cannot be set when labelSelector isn't set.
								MismatchLabelKeys *[]string `json:"mismatchLabelKeys,omitempty"`

								// NamespaceSelector A label query over the set of namespaces that the term applies to.
								// The term is applied to the union of the namespaces selected by this field
								// and the ones listed in the namespaces field.
								// null selector and null or empty namespaces list means "this pod's namespace".
								// An empty selector ({}) matches all namespaces.
								NamespaceSelector *struct {
									// MatchExpressions matchExpressions is a list of label selector requirements. The requirements are ANDed.
									MatchExpressions *[]struct {
										// Key key is the label key that the selector applies to.
										Key string `json:"key"`

										// Operator operator represents a key's relationship to a set of values.
										// Valid operators are In, NotIn, Exists and DoesNotExist.
										Operator string `json:"operator"`

										// Values values is an array of string values. If the operator is In or NotIn,
										// the values array must be non-empty. If the operator is Exists or DoesNotExist,
										// the values array must be empty. This array is replaced during a strategic
										// merge patch.
										Values *[]string `json:"values,omitempty"`
									} `json:"matchExpressions,omitempty"`

									// MatchLabels matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels
									// map is equivalent to an element of matchExpressions, whose key field is "key", the
									// operator is "In", and the values array contains only "value". The requirements are ANDed.
									MatchLabels *map[string]string `json:"matchLabels,omitempty"`
								} `json:"namespaceSelector,omitempty"`

								// Namespaces namespaces specifies a static list of namespace names that the term applies to.
								// The term is applied to the union of the namespaces listed in this field
								// and the ones selected by namespaceSelector.
								// null or empty namespaces list and null namespaceSelector means "this pod's namespace".
								Namespaces *[]string `json:"namespaces,omitempty"`

								// TopologyKey This pod should be co-located (affinity) or not co-located (anti-affinity) with the pods matching
								// the labelSelector in the specified namespaces, where co-located is defined as running on a node
								// whose value of the label with key topologyKey matches that of any node on which any of the
								// selected pods is running.
								// Empty topologyKey is not allowed.
								TopologyKey string `json:"topologyKey"`
							} `json:"podAffinityTerm"`

							// Weight weight associated with matching the corresponding podAffinityTerm,
							// in the range 1-100.
							Weight int32 `json:"weight"`
						} `json:"preferredDuringSchedulingIgnoredDuringExecution,omitempty"`

						// RequiredDuringSchedulingIgnoredDuringExecution If the anti-affinity requirements specified by this field are not met at
						// scheduling time, the pod will not be scheduled onto the node.
						// If the anti-affinity requirements specified by this field cease to be met
						// at some point during pod execution (e.g. due to a pod label update), the
						// system may or may not try to eventually evict the pod from its node.
						// When there are multiple elements, the lists of nodes corresponding to each
						// podAffinityTerm are intersected, i.e. all terms must be satisfied.
						RequiredDuringSchedulingIgnoredDuringExecution *[]struct {
							// LabelSelector A label query over a set of resources, in this case pods.
							// If it's null, this PodAffinityTerm matches with no Pods.
							LabelSelector *struct {
								// MatchExpressions matchExpressions is a list of label selector requirements. The requirements are ANDed.
								MatchExpressions *[]struct {
									// Key key is the label key that the selector applies to.
									Key string `json:"key"`

									// Operator operator represents a key's relationship to a set of values.
									// Valid operators are In, NotIn, Exists and DoesNotExist.
									Operator string `json:"operator"`

									// Values values is an array of string values. If the operator is In or NotIn,
									// the values array must be non-empty. If the operator is Exists or DoesNotExist,
									// the values array must be empty. This array is replaced during a strategic
									// merge patch.
									Values *[]string `json:"values,omitempty"`
								} `json:"matchExpressions,omitempty"`

								// MatchLabels matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels
								// map is equivalent to an element of matchExpressions, whose key field is "key", the
								// operator is "In", and the values array contains only "value". The requirements are ANDed.
								MatchLabels *map[string]string `json:"matchLabels,omitempty"`
							} `json:"labelSelector,omitempty"`

							// MatchLabelKeys MatchLabelKeys is a set of pod label keys to select which pods will
							// be taken into consideration. The keys are used to lookup values from the
							// incoming pod labels, those key-value labels are merged with `labelSelector` as `key in (value)`
							// to select the group of existing pods which pods will be taken into consideration
							// for the incoming pod's pod (anti) affinity. Keys that don't exist in the incoming
							// pod labels will be ignored. The default value is empty.
							// The same key is forbidden to exist in both matchLabelKeys and labelSelector.
							// Also, matchLabelKeys cannot be set when labelSelector isn't set.
							MatchLabelKeys *[]string `json:"matchLabelKeys,omitempty"`

							// MismatchLabelKeys MismatchLabelKeys is a set of pod label keys to select which pods will
							// be taken into consideration. The keys are used to lookup values from the
							// incoming pod labels, those key-value labels are merged with `labelSelector` as `key notin (value)`
							// to select the group of existing pods which pods will be taken into consideration
							// for the incoming pod's pod (anti) affinity. Keys that don't exist in the incoming
							// pod labels will be ignored. The default value is empty.
							// The same key is forbidden to exist in both mismatchLabelKeys and labelSelector.
							// Also, mismatchLabelKeys cannot be set when labelSelector isn't set.
							MismatchLabelKeys *[]string `json:"mismatchLabelKeys,omitempty"`

							// NamespaceSelector A label query over the set of namespaces that the term applies to.
							// The term is applied to the union of the namespaces selected by this field
							// and the ones listed in the namespaces field.
							// null selector and null or empty namespaces list means "this pod's namespace".
							// An empty selector ({}) matches all namespaces.
							NamespaceSelector *struct {
								// MatchExpressions matchExpressions is a list of label selector requirements. The requirements are ANDed.
								MatchExpressions *[]struct {
									// Key key is the label key that the selector applies to.
									Key string `json:"key"`

									// Operator operator represents a key's relationship to a set of values.
									// Valid operators are In, NotIn, Exists and DoesNotExist.
									Operator string `json:"operator"`

									// Values values is an array of string values. If the operator is In or NotIn,
									// the values array must be non-empty. If the operator is Exists or DoesNotExist,
									// the values array must be empty. This array is replaced during a strategic
									// merge patch.
									Values *[]string `json:"values,omitempty"`
								} `json:"matchExpressions,omitempty"`

								// MatchLabels matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels
								// map is equivalent to an element of matchExpressions, whose key field is "key", the
								// operator is "In", and the values array contains only "value". The requirements are ANDed.
								MatchLabels *map[string]string `json:"matchLabels,omitempty"`
							} `json:"namespaceSelector,omitempty"`

							// Namespaces namespaces specifies a static list of namespace names that the term applies to.
							// The term is applied to the union of the namespaces listed in this field
							// and the ones selected by namespaceSelector.
							// null or empty namespaces list and null namespaceSelector means "this pod's namespace".
							Namespaces *[]string `json:"namespaces,omitempty"`

							// TopologyKey This pod should be co-located (affinity) or not co-located (anti-affinity) with the pods matching
							// the labelSelector in the specified namespaces, where co-located is defined as running on a node
							// whose value of the label with key topologyKey matches that of any node on which any of the
							// selected pods is running.
							// Empty topologyKey is not allowed.
							TopologyKey string `json:"topologyKey"`
						} `json:"requiredDuringSchedulingIgnoredDuringExecution,omitempty"`
					} `json:"podAntiAffinity,omitempty"`
				} `json:"engine,omitempty"`

				// Proxy Proxy is the affinity configuration for the DB Proxy pods.
				Proxy *struct {
					// NodeAffinity Describes node affinity scheduling rules for the pod.
					NodeAffinity *struct {
						// PreferredDuringSchedulingIgnoredDuringExecution The scheduler will prefer to schedule pods to nodes that satisfy
						// the affinity expressions specified by this field, but it may choose
						// a node that violates one or more of the expressions. The node that is
						// most preferred is the one with the greatest sum of weights, i.e.
						// for each node that meets all of the scheduling requirements (resource
						// request, requiredDuringScheduling affinity expressions, etc.),
						// compute a sum by iterating through the elements of this field and adding
						// "weight" to the sum if the node matches the corresponding matchExpressions; the
						// node(s) with the highest sum are the most preferred.
						PreferredDuringSchedulingIgnoredDuringExecution *[]struct {
							// Preference A node selector term, associated with the corresponding weight.
							Preference struct {
								// MatchExpressions A list of node selector requirements by node's labels.
								MatchExpressions *[]struct {
									// Key The label key that the selector applies to.
									Key string `json:"key"`

									// Operator Represents a key's relationship to a set of values.
									// Valid operators are In, NotIn, Exists, DoesNotExist. Gt, and Lt.
									Operator string `json:"operator"`

									// Values An array of string values. If the operator is In or NotIn,
									// the values array must be non-empty. If the operator is Exists or DoesNotExist,
									// the values array must be empty. If the operator is Gt or Lt, the values
									// array must have a single element, which will be interpreted as an integer.
									// This array is replaced during a strategic merge patch.
									Values *[]string `json:"values,omitempty"`
								} `json:"matchExpressions,omitempty"`

								// MatchFields A list of node selector requirements by node's fields.
								MatchFields *[]struct {
									// Key The label key that the selector applies to.
									Key string `json:"key"`

									// Operator Represents a key's relationship to a set of values.
									// Valid operators are In, NotIn, Exists, DoesNotExist. Gt, and Lt.
									Operator string `json:"operator"`

									// Values An array of string values. If the operator is In or NotIn,
									// the values array must be non-empty. If the operator is Exists or DoesNotExist,
									// the values array must be empty. If the operator is Gt or Lt, the values
									// array must have a single element, which will be interpreted as an integer.
									// This array is replaced during a strategic merge patch.
									Values *[]string `json:"values,omitempty"`
								} `json:"matchFields,omitempty"`
							} `json:"preference"`

							// Weight Weight associated with matching the corresponding nodeSelectorTerm, in the range 1-100.
							Weight int32 `json:"weight"`
						} `json:"preferredDuringSchedulingIgnoredDuringExecution,omitempty"`

						// RequiredDuringSchedulingIgnoredDuringExecution If the affinity requirements specified by this field are not met at
						// scheduling time, the pod will not be scheduled onto the node.
						// If the affinity requirements specified by this field cease to be met
						// at some point during pod execution (e.g. due to an update), the system
						// may or may not try to eventually evict the pod from its node.
						RequiredDuringSchedulingIgnoredDuringExecution *struct {
							// NodeSelectorTerms Required. A list of node selector terms. The terms are ORed.
							NodeSelectorTerms []struct {
								// MatchExpressions A list of node selector requirements by node's labels.
								MatchExpressions *[]struct {
									// Key The label key that the selector applies to.
									Key string `json:"key"`

									// Operator Represents a key's relationship to a set of values.
									// Valid operators are In, NotIn, Exists, DoesNotExist. Gt, and Lt.
									Operator string `json:"operator"`

									// Values An array of string values. If the operator is In or NotIn,
									// the values array must be non-empty. If the operator is Exists or DoesNotExist,
									// the values array must be empty. If the operator is Gt or Lt, the values
									// array must have a single element, which will be interpreted as an integer.
									// This array is replaced during a strategic merge patch.
									Values *[]string `json:"values,omitempty"`
								} `json:"matchExpressions,omitempty"`

								// MatchFields A list of node selector requirements by node's fields.
								MatchFields *[]struct {
									// Key The label key that the selector applies to.
									Key string `json:"key"`

									// Operator Represents a key's relationship to a set of values.
									// Valid operators are In, NotIn, Exists, DoesNotExist. Gt, and Lt.
									Operator string `json:"operator"`

									// Values An array of string values. If the operator is In or NotIn,
									// the values array must be non-empty. If the operator is Exists or DoesNotExist,
									// the values array must be empty. If the operator is Gt or Lt, the values
									// array must have a single element, which will be interpreted as an integer.
									// This array is replaced during a strategic merge patch.
									Values *[]string `json:"values,omitempty"`
								} `json:"matchFields,omitempty"`
							} `json:"nodeSelectorTerms"`
						} `json:"requiredDuringSchedulingIgnoredDuringExecution,omitempty"`
					} `json:"nodeAffinity,omitempty"`

					// PodAffinity Describes pod affinity scheduling rules (e.g. co-locate this pod in the same node, zone, etc. as some other pod(s)).
					PodAffinity *struct {
						// PreferredDuringSchedulingIgnoredDuringExecution The scheduler will prefer to schedule pods to nodes that satisfy
						// the affinity expressions specified by this field, but it may choose
						// a node that violates one or more of the expressions. The node that is
						// most preferred is the one with the greatest sum of weights, i.e.
						// for each node that meets all of the scheduling requirements (resource
						// request, requiredDuringScheduling affinity expressions, etc.),
						// compute a sum by iterating through the elements of this field and adding
						// "weight" to the sum if the node has pods which matches the corresponding podAffinityTerm; the
						// node(s) with the highest sum are the most preferred.
						PreferredDuringSchedulingIgnoredDuringExecution *[]struct {
							// PodAffinityTerm Required. A pod affinity term, associated with the corresponding weight.
							PodAffinityTerm struct {
								// LabelSelector A label query over a set of resources, in this case pods.
								// If it's null, this PodAffinityTerm matches with no Pods.
								LabelSelector *struct {
									// MatchExpressions matchExpressions is a list of label selector requirements. The requirements are ANDed.
									MatchExpressions *[]struct {
										// Key key is the label key that the selector applies to.
										Key string `json:"key"`

										// Operator operator represents a key's relationship to a set of values.
										// Valid operators are In, NotIn, Exists and DoesNotExist.
										Operator string `json:"operator"`

										// Values values is an array of string values. If the operator is In or NotIn,
										// the values array must be non-empty. If the operator is Exists or DoesNotExist,
										// the values array must be empty. This array is replaced during a strategic
										// merge patch.
										Values *[]string `json:"values,omitempty"`
									} `json:"matchExpressions,omitempty"`

									// MatchLabels matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels
									// map is equivalent to an element of matchExpressions, whose key field is "key", the
									// operator is "In", and the values array contains only "value". The requirements are ANDed.
									MatchLabels *map[string]string `json:"matchLabels,omitempty"`
								} `json:"labelSelector,omitempty"`

								// MatchLabelKeys MatchLabelKeys is a set of pod label keys to select which pods will
								// be taken into consideration. The keys are used to lookup values from the
								// incoming pod labels, those key-value labels are merged with `labelSelector` as `key in (value)`
								// to select the group of existing pods which pods will be taken into consideration
								// for the incoming pod's pod (anti) affinity. Keys that don't exist in the incoming
								// pod labels will be ignored. The default value is empty.
								// The same key is forbidden to exist in both matchLabelKeys and labelSelector.
								// Also, matchLabelKeys cannot be set when labelSelector isn't set.
								MatchLabelKeys *[]string `json:"matchLabelKeys,omitempty"`

								// MismatchLabelKeys MismatchLabelKeys is a set of pod label keys to select which pods will
								// be taken into consideration. The keys are used to lookup values from the
								// incoming pod labels, those key-value labels are merged with `labelSelector` as `key notin (value)`
								// to select the group of existing pods which pods will be taken into consideration
								// for the incoming pod's pod (anti) affinity. Keys that don't exist in the incoming
								// pod labels will be ignored. The default value is empty.
								// The same key is forbidden to exist in both mismatchLabelKeys and labelSelector.
								// Also, mismatchLabelKeys cannot be set when labelSelector isn't set.
								MismatchLabelKeys *[]string `json:"mismatchLabelKeys,omitempty"`

								// NamespaceSelector A label query over the set of namespaces that the term applies to.
								// The term is applied to the union of the namespaces selected by this field
								// and the ones listed in the namespaces field.
								// null selector and null or empty namespaces list means "this pod's namespace".
								// An empty selector ({}) matches all namespaces.
								NamespaceSelector *struct {
									// MatchExpressions matchExpressions is a list of label selector requirements. The requirements are ANDed.
									MatchExpressions *[]struct {
										// Key key is the label key that the selector applies to.
										Key string `json:"key"`

										// Operator operator represents a key's relationship to a set of values.
										// Valid operators are In, NotIn, Exists and DoesNotExist.
										Operator string `json:"operator"`

										// Values values is an array of string values. If the operator is In or NotIn,
										// the values array must be non-empty. If the operator is Exists or DoesNotExist,
										// the values array must be empty. This array is replaced during a strategic
										// merge patch.
										Values *[]string `json:"values,omitempty"`
									} `json:"matchExpressions,omitempty"`

									// MatchLabels matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels
									// map is equivalent to an element of matchExpressions, whose key field is "key", the
									// operator is "In", and the values array contains only "value". The requirements are ANDed.
									MatchLabels *map[string]string `json:"matchLabels,omitempty"`
								} `json:"namespaceSelector,omitempty"`

								// Namespaces namespaces specifies a static list of namespace names that the term applies to.
								// The term is applied to the union of the namespaces listed in this field
								// and the ones selected by namespaceSelector.
								// null or empty namespaces list and null namespaceSelector means "this pod's namespace".
								Namespaces *[]string `json:"namespaces,omitempty"`

								// TopologyKey This pod should be co-located (affinity) or not co-located (anti-affinity) with the pods matching
								// the labelSelector in the specified namespaces, where co-located is defined as running on a node
								// whose value of the label with key topologyKey matches that of any node on which any of the
								// selected pods is running.
								// Empty topologyKey is not allowed.
								TopologyKey string `json:"topologyKey"`
							} `json:"podAffinityTerm"`

							// Weight weight associated with matching the corresponding podAffinityTerm,
							// in the range 1-100.
							Weight int32 `json:"weight"`
						} `json:"preferredDuringSchedulingIgnoredDuringExecution,omitempty"`

						// RequiredDuringSchedulingIgnoredDuringExecution If the affinity requirements specified by this field are not met at
						// scheduling time, the pod will not be scheduled onto the node.
						// If the affinity requirements specified by this field cease to be met
						// at some point during pod execution (e.g. due to a pod label update), the
						// system may or may not try to eventually evict the pod from its node.
						// When there are multiple elements, the lists of nodes corresponding to each
						// podAffinityTerm are intersected, i.e. all terms must be satisfied.
						RequiredDuringSchedulingIgnoredDuringExecution *[]struct {
							// LabelSelector A label query over a set of resources, in this case pods.
							// If it's null, this PodAffinityTerm matches with no Pods.
							LabelSelector *struct {
								// MatchExpressions matchExpressions is a list of label selector requirements. The requirements are ANDed.
								MatchExpressions *[]struct {
									// Key key is the label key that the selector applies to.
									Key string `json:"key"`

									// Operator operator represents a key's relationship to a set of values.
									// Valid operators are In, NotIn, Exists and DoesNotExist.
									Operator string `json:"operator"`

									// Values values is an array of string values. If the operator is In or NotIn,
									// the values array must be non-empty. If the operator is Exists or DoesNotExist,
									// the values array must be empty. This array is replaced during a strategic
									// merge patch.
									Values *[]string `json:"values,omitempty"`
								} `json:"matchExpressions,omitempty"`

								// MatchLabels matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels
								// map is equivalent to an element of matchExpressions, whose key field is "key", the
								// operator is "In", and the values array contains only "value". The requirements are ANDed.
								MatchLabels *map[string]string `json:"matchLabels,omitempty"`
							} `json:"labelSelector,omitempty"`

							// MatchLabelKeys MatchLabelKeys is a set of pod label keys to select which pods will
							// be taken into consideration. The keys are used to lookup values from the
							// incoming pod labels, those key-value labels are merged with `labelSelector` as `key in (value)`
							// to select the group of existing pods which pods will be taken into consideration
							// for the incoming pod's pod (anti) affinity. Keys that don't exist in the incoming
							// pod labels will be ignored. The default value is empty.
							// The same key is forbidden to exist in both matchLabelKeys and labelSelector.
							// Also, matchLabelKeys cannot be set when labelSelector isn't set.
							MatchLabelKeys *[]string `json:"matchLabelKeys,omitempty"`

							// MismatchLabelKeys MismatchLabelKeys is a set of pod label keys to select which pods will
							// be taken into consideration. The keys are used to lookup values from the
							// incoming pod labels, those key-value labels are merged with `labelSelector` as `key notin (value)`
							// to select the group of existing pods which pods will be taken into consideration
							// for the incoming pod's pod (anti) affinity. Keys that don't exist in the incoming
							// pod labels will be ignored. The default value is empty.
							// The same key is forbidden to exist in both mismatchLabelKeys and labelSelector.
							// Also, mismatchLabelKeys cannot be set when labelSelector isn't set.
							MismatchLabelKeys *[]string `json:"mismatchLabelKeys,omitempty"`

							// NamespaceSelector A label query over the set of namespaces that the term applies to.
							// The term is applied to the union of the namespaces selected by this field
							// and the ones listed in the namespaces field.
							// null selector and null or empty namespaces list means "this pod's namespace".
							// An empty selector ({}) matches all namespaces.
							NamespaceSelector *struct {
								// MatchExpressions matchExpressions is a list of label selector requirements. The requirements are ANDed.
								MatchExpressions *[]struct {
									// Key key is the label key that the selector applies to.
									Key string `json:"key"`

									// Operator operator represents a key's relationship to a set of values.
									// Valid operators are In, NotIn, Exists and DoesNotExist.
									Operator string `json:"operator"`

									// Values values is an array of string values. If the operator is In or NotIn,
									// the values array must be non-empty. If the operator is Exists or DoesNotExist,
									// the values array must be empty. This array is replaced during a strategic
									// merge patch.
									Values *[]string `json:"values,omitempty"`
								} `json:"matchExpressions,omitempty"`

								// MatchLabels matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels
								// map is equivalent to an element of matchExpressions, whose key field is "key", the
								// operator is "In", and the values array contains only "value". The requirements are ANDed.
								MatchLabels *map[string]string `json:"matchLabels,omitempty"`
							} `json:"namespaceSelector,omitempty"`

							// Namespaces namespaces specifies a static list of namespace names that the term applies to.
							// The term is applied to the union of the namespaces listed in this field
							// and the ones selected by namespaceSelector.
							// null or empty namespaces list and null namespaceSelector means "this pod's namespace".
							Namespaces *[]string `json:"namespaces,omitempty"`

							// TopologyKey This pod should be co-located (affinity) or not co-located (anti-affinity) with the pods matching
							// the labelSelector in the specified namespaces, where co-located is defined as running on a node
							// whose value of the label with key topologyKey matches that of any node on which any of the
							// selected pods is running.
							// Empty topologyKey is not allowed.
							TopologyKey string `json:"topologyKey"`
						} `json:"requiredDuringSchedulingIgnoredDuringExecution,omitempty"`
					} `json:"podAffinity,omitempty"`

					// PodAntiAffinity Describes pod anti-affinity scheduling rules (e.g. avoid putting this pod in the same node, zone, etc. as some other pod(s)).
					PodAntiAffinity *struct {
						// PreferredDuringSchedulingIgnoredDuringExecution The scheduler will prefer to schedule pods to nodes that satisfy
						// the anti-affinity expressions specified by this field, but it may choose
						// a node that violates one or more of the expressions. The node that is
						// most preferred is the one with the greatest sum of weights, i.e.
						// for each node that meets all of the scheduling requirements (resource
						// request, requiredDuringScheduling anti-affinity expressions, etc.),
						// compute a sum by iterating through the elements of this field and adding
						// "weight" to the sum if the node has pods which matches the corresponding podAffinityTerm; the
						// node(s) with the highest sum are the most preferred.
						PreferredDuringSchedulingIgnoredDuringExecution *[]struct {
							// PodAffinityTerm Required. A pod affinity term, associated with the corresponding weight.
							PodAffinityTerm struct {
								// LabelSelector A label query over a set of resources, in this case pods.
								// If it's null, this PodAffinityTerm matches with no Pods.
								LabelSelector *struct {
									// MatchExpressions matchExpressions is a list of label selector requirements. The requirements are ANDed.
									MatchExpressions *[]struct {
										// Key key is the label key that the selector applies to.
										Key string `json:"key"`

										// Operator operator represents a key's relationship to a set of values.
										// Valid operators are In, NotIn, Exists and DoesNotExist.
										Operator string `json:"operator"`

										// Values values is an array of string values. If the operator is In or NotIn,
										// the values array must be non-empty. If the operator is Exists or DoesNotExist,
										// the values array must be empty. This array is replaced during a strategic
										// merge patch.
										Values *[]string `json:"values,omitempty"`
									} `json:"matchExpressions,omitempty"`

									// MatchLabels matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels
									// map is equivalent to an element of matchExpressions, whose key field is "key", the
									// operator is "In", and the values array contains only "value". The requirements are ANDed.
									MatchLabels *map[string]string `json:"matchLabels,omitempty"`
								} `json:"labelSelector,omitempty"`

								// MatchLabelKeys MatchLabelKeys is a set of pod label keys to select which pods will
								// be taken into consideration. The keys are used to lookup values from the
								// incoming pod labels, those key-value labels are merged with `labelSelector` as `key in (value)`
								// to select the group of existing pods which pods will be taken into consideration
								// for the incoming pod's pod (anti) affinity. Keys that don't exist in the incoming
								// pod labels will be ignored. The default value is empty.
								// The same key is forbidden to exist in both matchLabelKeys and labelSelector.
								// Also, matchLabelKeys cannot be set when labelSelector isn't set.
								MatchLabelKeys *[]string `json:"matchLabelKeys,omitempty"`

								// MismatchLabelKeys MismatchLabelKeys is a set of pod label keys to select which pods will
								// be taken into consideration. The keys are used to lookup values from the
								// incoming pod labels, those key-value labels are merged with `labelSelector` as `key notin (value)`
								// to select the group of existing pods which pods will be taken into consideration
								// for the incoming pod's pod (anti) affinity. Keys that don't exist in the incoming
								// pod labels will be ignored. The default value is empty.
								// The same key is forbidden to exist in both mismatchLabelKeys and labelSelector.
								// Also, mismatchLabelKeys cannot be set when labelSelector isn't set.
								MismatchLabelKeys *[]string `json:"mismatchLabelKeys,omitempty"`

								// NamespaceSelector A label query over the set of namespaces that the term applies to.
								// The term is applied to the union of the namespaces selected by this field
								// and the ones listed in the namespaces field.
								// null selector and null or empty namespaces list means "this pod's namespace".
								// An empty selector ({}) matches all namespaces.
								NamespaceSelector *struct {
									// MatchExpressions matchExpressions is a list of label selector requirements. The requirements are ANDed.
									MatchExpressions *[]struct {
										// Key key is the label key that the selector applies to.
										Key string `json:"key"`

										// Operator operator represents a key's relationship to a set of values.
										// Valid operators are In, NotIn, Exists and DoesNotExist.
										Operator string `json:"operator"`

										// Values values is an array of string values. If the operator is In or NotIn,
										// the values array must be non-empty. If the operator is Exists or DoesNotExist,
										// the values array must be empty. This array is replaced during a strategic
										// merge patch.
										Values *[]string `json:"values,omitempty"`
									} `json:"matchExpressions,omitempty"`

									// MatchLabels matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels
									// map is equivalent to an element of matchExpressions, whose key field is "key", the
									// operator is "In", and the values array contains only "value". The requirements are ANDed.
									MatchLabels *map[string]string `json:"matchLabels,omitempty"`
								} `json:"namespaceSelector,omitempty"`

								// Namespaces namespaces specifies a static list of namespace names that the term applies to.
								// The term is applied to the union of the namespaces listed in this field
								// and the ones selected by namespaceSelector.
								// null or empty namespaces list and null namespaceSelector means "this pod's namespace".
								Namespaces *[]string `json:"namespaces,omitempty"`

								// TopologyKey This pod should be co-located (affinity) or not co-located (anti-affinity) with the pods matching
								// the labelSelector in the specified namespaces, where co-located is defined as running on a node
								// whose value of the label with key topologyKey matches that of any node on which any of the
								// selected pods is running.
								// Empty topologyKey is not allowed.
								TopologyKey string `json:"topologyKey"`
							} `json:"podAffinityTerm"`

							// Weight weight associated with matching the corresponding podAffinityTerm,
							// in the range 1-100.
							Weight int32 `json:"weight"`
						} `json:"preferredDuringSchedulingIgnoredDuringExecution,omitempty"`

						// RequiredDuringSchedulingIgnoredDuringExecution If the anti-affinity requirements specified by this field are not met at
						// scheduling time, the pod will not be scheduled onto the node.
						// If the anti-affinity requirements specified by this field cease to be met
						// at some point during pod execution (e.g. due to a pod label update), the
						// system may or may not try to eventually evict the pod from its node.
						// When there are multiple elements, the lists of nodes corresponding to each
						// podAffinityTerm are intersected, i.e. all terms must be satisfied.
						RequiredDuringSchedulingIgnoredDuringExecution *[]struct {
							// LabelSelector A label query over a set of resources, in this case pods.
							// If it's null, this PodAffinityTerm matches with no Pods.
							LabelSelector *struct {
								// MatchExpressions matchExpressions is a list of label selector requirements. The requirements are ANDed.
								MatchExpressions *[]struct {
									// Key key is the label key that the selector applies to.
									Key string `json:"key"`

									// Operator operator represents a key's relationship to a set of values.
									// Valid operators are In, NotIn, Exists and DoesNotExist.
									Operator string `json:"operator"`

									// Values values is an array of string values. If the operator is In or NotIn,
									// the values array must be non-empty. If the operator is Exists or DoesNotExist,
									// the values array must be empty. This array is replaced during a strategic
									// merge patch.
									Values *[]string `json:"values,omitempty"`
								} `json:"matchExpressions,omitempty"`

								// MatchLabels matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels
								// map is equivalent to an element of matchExpressions, whose key field is "key", the
								// operator is "In", and the values array contains only "value". The requirements are ANDed.
								MatchLabels *map[string]string `json:"matchLabels,omitempty"`
							} `json:"labelSelector,omitempty"`

							// MatchLabelKeys MatchLabelKeys is a set of pod label keys to select which pods will
							// be taken into consideration. The keys are used to lookup values from the
							// incoming pod labels, those key-value labels are merged with `labelSelector` as `key in (value)`
							// to select the group of existing pods which pods will be taken into consideration
							// for the incoming pod's pod (anti) affinity. Keys that don't exist in the incoming
							// pod labels will be ignored. The default value is empty.
							// The same key is forbidden to exist in both matchLabelKeys and labelSelector.
							// Also, matchLabelKeys cannot be set when labelSelector isn't set.
							MatchLabelKeys *[]string `json:"matchLabelKeys,omitempty"`

							// MismatchLabelKeys MismatchLabelKeys is a set of pod label keys to select which pods will
							// be taken into consideration. The keys are used to lookup values from the
							// incoming pod labels, those key-value labels are merged with `labelSelector` as `key notin (value)`
							// to select the group of existing pods which pods will be taken into consideration
							// for the incoming pod's pod (anti) affinity. Keys that don't exist in the incoming
							// pod labels will be ignored. The default value is empty.
							// The same key is forbidden to exist in both mismatchLabelKeys and labelSelector.
							// Also, mismatchLabelKeys cannot be set when labelSelector isn't set.
							MismatchLabelKeys *[]string `json:"mismatchLabelKeys,omitempty"`

							// NamespaceSelector A label query over the set of namespaces that the term applies to.
							// The term is applied to the union of the namespaces selected by this field
							// and the ones listed in the namespaces field.
							// null selector and null or empty namespaces list means "this pod's namespace".
							// An empty selector ({}) matches all namespaces.
							NamespaceSelector *struct {
								// MatchExpressions matchExpressions is a list of label selector requirements. The requirements are ANDed.
								MatchExpressions *[]struct {
									// Key key is the label key that the selector applies to.
									Key string `json:"key"`

									// Operator operator represents a key's relationship to a set of values.
									// Valid operators are In, NotIn, Exists and DoesNotExist.
									Operator string `json:"operator"`

									// Values values is an array of string values. If the operator is In or NotIn,
									// the values array must be non-empty. If the operator is Exists or DoesNotExist,
									// the values array must be empty. This array is replaced during a strategic
									// merge patch.
									Values *[]string `json:"values,omitempty"`
								} `json:"matchExpressions,omitempty"`

								// MatchLabels matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels
								// map is equivalent to an element of matchExpressions, whose key field is "key", the
								// operator is "In", and the values array contains only "value". The requirements are ANDed.
								MatchLabels *map[string]string `json:"matchLabels,omitempty"`
							} `json:"namespaceSelector,omitempty"`

							// Namespaces namespaces specifies a static list of namespace names that the term applies to.
							// The term is applied to the union of the namespaces listed in this field
							// and the ones selected by namespaceSelector.
							// null or empty namespaces list and null namespaceSelector means "this pod's namespace".
							Namespaces *[]string `json:"namespaces,omitempty"`

							// TopologyKey This pod should be co-located (affinity) or not co-located (anti-affinity) with the pods matching
							// the labelSelector in the specified namespaces, where co-located is defined as running on a node
							// whose value of the label with key topologyKey matches that of any node on which any of the
							// selected pods is running.
							// Empty topologyKey is not allowed.
							TopologyKey string `json:"topologyKey"`
						} `json:"requiredDuringSchedulingIgnoredDuringExecution,omitempty"`
					} `json:"podAntiAffinity,omitempty"`
				} `json:"proxy,omitempty"`
			} `json:"psmdb,omitempty"`

			// Pxc PXC is the affinity configuration for the PXC DB clusters.
			Pxc *struct {
				// Engine Engine is the affinity configuration for the DB Engine pods.
				Engine *struct {
					// NodeAffinity Describes node affinity scheduling rules for the pod.
					NodeAffinity *struct {
						// PreferredDuringSchedulingIgnoredDuringExecution The scheduler will prefer to schedule pods to nodes that satisfy
						// the affinity expressions specified by this field, but it may choose
						// a node that violates one or more of the expressions. The node that is
						// most preferred is the one with the greatest sum of weights, i.e.
						// for each node that meets all of the scheduling requirements (resource
						// request, requiredDuringScheduling affinity expressions, etc.),
						// compute a sum by iterating through the elements of this field and adding
						// "weight" to the sum if the node matches the corresponding matchExpressions; the
						// node(s) with the highest sum are the most preferred.
						PreferredDuringSchedulingIgnoredDuringExecution *[]struct {
							// Preference A node selector term, associated with the corresponding weight.
							Preference struct {
								// MatchExpressions A list of node selector requirements by node's labels.
								MatchExpressions *[]struct {
									// Key The label key that the selector applies to.
									Key string `json:"key"`

									// Operator Represents a key's relationship to a set of values.
									// Valid operators are In, NotIn, Exists, DoesNotExist. Gt, and Lt.
									Operator string `json:"operator"`

									// Values An array of string values. If the operator is In or NotIn,
									// the values array must be non-empty. If the operator is Exists or DoesNotExist,
									// the values array must be empty. If the operator is Gt or Lt, the values
									// array must have a single element, which will be interpreted as an integer.
									// This array is replaced during a strategic merge patch.
									Values *[]string `json:"values,omitempty"`
								} `json:"matchExpressions,omitempty"`

								// MatchFields A list of node selector requirements by node's fields.
								MatchFields *[]struct {
									// Key The label key that the selector applies to.
									Key string `json:"key"`

									// Operator Represents a key's relationship to a set of values.
									// Valid operators are In, NotIn, Exists, DoesNotExist. Gt, and Lt.
									Operator string `json:"operator"`

									// Values An array of string values. If the operator is In or NotIn,
									// the values array must be non-empty. If the operator is Exists or DoesNotExist,
									// the values array must be empty. If the operator is Gt or Lt, the values
									// array must have a single element, which will be interpreted as an integer.
									// This array is replaced during a strategic merge patch.
									Values *[]string `json:"values,omitempty"`
								} `json:"matchFields,omitempty"`
							} `json:"preference"`

							// Weight Weight associated with matching the corresponding nodeSelectorTerm, in the range 1-100.
							Weight int32 `json:"weight"`
						} `json:"preferredDuringSchedulingIgnoredDuringExecution,omitempty"`

						// RequiredDuringSchedulingIgnoredDuringExecution If the affinity requirements specified by this field are not met at
						// scheduling time, the pod will not be scheduled onto the node.
						// If the affinity requirements specified by this field cease to be met
						// at some point during pod execution (e.g. due to an update), the system
						// may or may not try to eventually evict the pod from its node.
						RequiredDuringSchedulingIgnoredDuringExecution *struct {
							// NodeSelectorTerms Required. A list of node selector terms. The terms are ORed.
							NodeSelectorTerms []struct {
								// MatchExpressions A list of node selector requirements by node's labels.
								MatchExpressions *[]struct {
									// Key The label key that the selector applies to.
									Key string `json:"key"`

									// Operator Represents a key's relationship to a set of values.
									// Valid operators are In, NotIn, Exists, DoesNotExist. Gt, and Lt.
									Operator string `json:"operator"`

									// Values An array of string values. If the operator is In or NotIn,
									// the values array must be non-empty. If the operator is Exists or DoesNotExist,
									// the values array must be empty. If the operator is Gt or Lt, the values
									// array must have a single element, which will be interpreted as an integer.
									// This array is replaced during a strategic merge patch.
									Values *[]string `json:"values,omitempty"`
								} `json:"matchExpressions,omitempty"`

								// MatchFields A list of node selector requirements by node's fields.
								MatchFields *[]struct {
									// Key The label key that the selector applies to.
									Key string `json:"key"`

									// Operator Represents a key's relationship to a set of values.
									// Valid operators are In, NotIn, Exists, DoesNotExist. Gt, and Lt.
									Operator string `json:"operator"`

									// Values An array of string values. If the operator is In or NotIn,
									// the values array must be non-empty. If the operator is Exists or DoesNotExist,
									// the values array must be empty. If the operator is Gt or Lt, the values
									// array must have a single element, which will be interpreted as an integer.
									// This array is replaced during a strategic merge patch.
									Values *[]string `json:"values,omitempty"`
								} `json:"matchFields,omitempty"`
							} `json:"nodeSelectorTerms"`
						} `json:"requiredDuringSchedulingIgnoredDuringExecution,omitempty"`
					} `json:"nodeAffinity,omitempty"`

					// PodAffinity Describes pod affinity scheduling rules (e.g. co-locate this pod in the same node, zone, etc. as some other pod(s)).
					PodAffinity *struct {
						// PreferredDuringSchedulingIgnoredDuringExecution The scheduler will prefer to schedule pods to nodes that satisfy
						// the affinity expressions specified by this field, but it may choose
						// a node that violates one or more of the expressions. The node that is
						// most preferred is the one with the greatest sum of weights, i.e.
						// for each node that meets all of the scheduling requirements (resource
						// request, requiredDuringScheduling affinity expressions, etc.),
						// compute a sum by iterating through the elements of this field and adding
						// "weight" to the sum if the node has pods which matches the corresponding podAffinityTerm; the
						// node(s) with the highest sum are the most preferred.
						PreferredDuringSchedulingIgnoredDuringExecution *[]struct {
							// PodAffinityTerm Required. A pod affinity term, associated with the corresponding weight.
							PodAffinityTerm struct {
								// LabelSelector A label query over a set of resources, in this case pods.
								// If it's null, this PodAffinityTerm matches with no Pods.
								LabelSelector *struct {
									// MatchExpressions matchExpressions is a list of label selector requirements. The requirements are ANDed.
									MatchExpressions *[]struct {
										// Key key is the label key that the selector applies to.
										Key string `json:"key"`

										// Operator operator represents a key's relationship to a set of values.
										// Valid operators are In, NotIn, Exists and DoesNotExist.
										Operator string `json:"operator"`

										// Values values is an array of string values. If the operator is In or NotIn,
										// the values array must be non-empty. If the operator is Exists or DoesNotExist,
										// the values array must be empty. This array is replaced during a strategic
										// merge patch.
										Values *[]string `json:"values,omitempty"`
									} `json:"matchExpressions,omitempty"`

									// MatchLabels matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels
									// map is equivalent to an element of matchExpressions, whose key field is "key", the
									// operator is "In", and the values array contains only "value". The requirements are ANDed.
									MatchLabels *map[string]string `json:"matchLabels,omitempty"`
								} `json:"labelSelector,omitempty"`

								// MatchLabelKeys MatchLabelKeys is a set of pod label keys to select which pods will
								// be taken into consideration. The keys are used to lookup values from the
								// incoming pod labels, those key-value labels are merged with `labelSelector` as `key in (value)`
								// to select the group of existing pods which pods will be taken into consideration
								// for the incoming pod's pod (anti) affinity. Keys that don't exist in the incoming
								// pod labels will be ignored. The default value is empty.
								// The same key is forbidden to exist in both matchLabelKeys and labelSelector.
								// Also, matchLabelKeys cannot be set when labelSelector isn't set.
								MatchLabelKeys *[]string `json:"matchLabelKeys,omitempty"`

								// MismatchLabelKeys MismatchLabelKeys is a set of pod label keys to select which pods will
								// be taken into consideration. The keys are used to lookup values from the
								// incoming pod labels, those key-value labels are merged with `labelSelector` as `key notin (value)`
								// to select the group of existing pods which pods will be taken into consideration
								// for the incoming pod's pod (anti) affinity. Keys that don't exist in the incoming
								// pod labels will be ignored. The default value is empty.
								// The same key is forbidden to exist in both mismatchLabelKeys and labelSelector.
								// Also, mismatchLabelKeys cannot be set when labelSelector isn't set.
								MismatchLabelKeys *[]string `json:"mismatchLabelKeys,omitempty"`

								// NamespaceSelector A label query over the set of namespaces that the term applies to.
								// The term is applied to the union of the namespaces selected by this field
								// and the ones listed in the namespaces field.
								// null selector and null or empty namespaces list means "this pod's namespace".
								// An empty selector ({}) matches all namespaces.
								NamespaceSelector *struct {
									// MatchExpressions matchExpressions is a list of label selector requirements. The requirements are ANDed.
									MatchExpressions *[]struct {
										// Key key is the label key that the selector applies to.
										Key string `json:"key"`

										// Operator operator represents a key's relationship to a set of values.
										// Valid operators are In, NotIn, Exists and DoesNotExist.
										Operator string `json:"operator"`

										// Values values is an array of string values. If the operator is In or NotIn,
										// the values array must be non-empty. If the operator is Exists or DoesNotExist,
										// the values array must be empty. This array is replaced during a strategic
										// merge patch.
										Values *[]string `json:"values,omitempty"`
									} `json:"matchExpressions,omitempty"`

									// MatchLabels matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels
									// map is equivalent to an element of matchExpressions, whose key field is "key", the
									// operator is "In", and the values array contains only "value". The requirements are ANDed.
									MatchLabels *map[string]string `json:"matchLabels,omitempty"`
								} `json:"namespaceSelector,omitempty"`

								// Namespaces namespaces specifies a static list of namespace names that the term applies to.
								// The term is applied to the union of the namespaces listed in this field
								// and the ones selected by namespaceSelector.
								// null or empty namespaces list and null namespaceSelector means "this pod's namespace".
								Namespaces *[]string `json:"namespaces,omitempty"`

								// TopologyKey This pod should be co-located (affinity) or not co-located (anti-affinity) with the pods matching
								// the labelSelector in the specified namespaces, where co-located is defined as running on a node
								// whose value of the label with key topologyKey matches that of any node on which any of the
								// selected pods is running.
								// Empty topologyKey is not allowed.
								TopologyKey string `json:"topologyKey"`
							} `json:"podAffinityTerm"`

							// Weight weight associated with matching the corresponding podAffinityTerm,
							// in the range 1-100.
							Weight int32 `json:"weight"`
						} `json:"preferredDuringSchedulingIgnoredDuringExecution,omitempty"`

						// RequiredDuringSchedulingIgnoredDuringExecution If the affinity requirements specified by this field are not met at
						// scheduling time, the pod will not be scheduled onto the node.
						// If the affinity requirements specified by this field cease to be met
						// at some point during pod execution (e.g. due to a pod label update), the
						// system may or may not try to eventually evict the pod from its node.
						// When there are multiple elements, the lists of nodes corresponding to each
						// podAffinityTerm are intersected, i.e. all terms must be satisfied.
						RequiredDuringSchedulingIgnoredDuringExecution *[]struct {
							// LabelSelector A label query over a set of resources, in this case pods.
							// If it's null, this PodAffinityTerm matches with no Pods.
							LabelSelector *struct {
								// MatchExpressions matchExpressions is a list of label selector requirements. The requirements are ANDed.
								MatchExpressions *[]struct {
									// Key key is the label key that the selector applies to.
									Key string `json:"key"`

									// Operator operator represents a key's relationship to a set of values.
									// Valid operators are In, NotIn, Exists and DoesNotExist.
									Operator string `json:"operator"`

									// Values values is an array of string values. If the operator is In or NotIn,
									// the values array must be non-empty. If the operator is Exists or DoesNotExist,
									// the values array must be empty. This array is replaced during a strategic
									// merge patch.
									Values *[]string `json:"values,omitempty"`
								} `json:"matchExpressions,omitempty"`

								// MatchLabels matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels
								// map is equivalent to an element of matchExpressions, whose key field is "key", the
								// operator is "In", and the values array contains only "value". The requirements are ANDed.
								MatchLabels *map[string]string `json:"matchLabels,omitempty"`
							} `json:"labelSelector,omitempty"`

							// MatchLabelKeys MatchLabelKeys is a set of pod label keys to select which pods will
							// be taken into consideration. The keys are used to lookup values from the
							// incoming pod labels, those key-value labels are merged with `labelSelector` as `key in (value)`
							// to select the group of existing pods which pods will be taken into consideration
							// for the incoming pod's pod (anti) affinity. Keys that don't exist in the incoming
							// pod labels will be ignored. The default value is empty.
							// The same key is forbidden to exist in both matchLabelKeys and labelSelector.
							// Also, matchLabelKeys cannot be set when labelSelector isn't set.
							MatchLabelKeys *[]string `json:"matchLabelKeys,omitempty"`

							// MismatchLabelKeys MismatchLabelKeys is a set of pod label keys to select which pods will
							// be taken into consideration. The keys are used to lookup values from the
							// incoming pod labels, those key-value labels are merged with `labelSelector` as `key notin (value)`
							// to select the group of existing pods which pods will be taken into consideration
							// for the incoming pod's pod (anti) affinity. Keys that don't exist in the incoming
							// pod labels will be ignored. The default value is empty.
							// The same key is forbidden to exist in both mismatchLabelKeys and labelSelector.
							// Also, mismatchLabelKeys cannot be set when labelSelector isn't set.
							MismatchLabelKeys *[]string `json:"mismatchLabelKeys,omitempty"`

							// NamespaceSelector A label query over the set of namespaces that the term applies to.
							// The term is applied to the union of the namespaces selected by this field
							// and the ones listed in the namespaces field.
							// null selector and null or empty namespaces list means "this pod's namespace".
							// An empty selector ({}) matches all namespaces.
							NamespaceSelector *struct {
								// MatchExpressions matchExpressions is a list of label selector requirements. The requirements are ANDed.
								MatchExpressions *[]struct {
									// Key key is the label key that the selector applies to.
									Key string `json:"key"`

									// Operator operator represents a key's relationship to a set of values.
									// Valid operators are In, NotIn, Exists and DoesNotExist.
									Operator string `json:"operator"`

									// Values values is an array of string values. If the operator is In or NotIn,
									// the values array must be non-empty. If the operator is Exists or DoesNotExist,
									// the values array must be empty. This array is replaced during a strategic
									// merge patch.
									Values *[]string `json:"values,omitempty"`
								} `json:"matchExpressions,omitempty"`

								// MatchLabels matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels
								// map is equivalent to an element of matchExpressions, whose key field is "key", the
								// operator is "In", and the values array contains only "value". The requirements are ANDed.
								MatchLabels *map[string]string `json:"matchLabels,omitempty"`
							} `json:"namespaceSelector,omitempty"`

							// Namespaces namespaces specifies a static list of namespace names that the term applies to.
							// The term is applied to the union of the namespaces listed in this field
							// and the ones selected by namespaceSelector.
							// null or empty namespaces list and null namespaceSelector means "this pod's namespace".
							Namespaces *[]string `json:"namespaces,omitempty"`

							// TopologyKey This pod should be co-located (affinity) or not co-located (anti-affinity) with the pods matching
							// the labelSelector in the specified namespaces, where co-located is defined as running on a node
							// whose value of the label with key topologyKey matches that of any node on which any of the
							// selected pods is running.
							// Empty topologyKey is not allowed.
							TopologyKey string `json:"topologyKey"`
						} `json:"requiredDuringSchedulingIgnoredDuringExecution,omitempty"`
					} `json:"podAffinity,omitempty"`

					// PodAntiAffinity Describes pod anti-affinity scheduling rules (e.g. avoid putting this pod in the same node, zone, etc. as some other pod(s)).
					PodAntiAffinity *struct {
						// PreferredDuringSchedulingIgnoredDuringExecution The scheduler will prefer to schedule pods to nodes that satisfy
						// the anti-affinity expressions specified by this field, but it may choose
						// a node that violates one or more of the expressions. The node that is
						// most preferred is the one with the greatest sum of weights, i.e.
						// for each node that meets all of the scheduling requirements (resource
						// request, requiredDuringScheduling anti-affinity expressions, etc.),
						// compute a sum by iterating through the elements of this field and adding
						// "weight" to the sum if the node has pods which matches the corresponding podAffinityTerm; the
						// node(s) with the highest sum are the most preferred.
						PreferredDuringSchedulingIgnoredDuringExecution *[]struct {
							// PodAffinityTerm Required. A pod affinity term, associated with the corresponding weight.
							PodAffinityTerm struct {
								// LabelSelector A label query over a set of resources, in this case pods.
								// If it's null, this PodAffinityTerm matches with no Pods.
								LabelSelector *struct {
									// MatchExpressions matchExpressions is a list of label selector requirements. The requirements are ANDed.
									MatchExpressions *[]struct {
										// Key key is the label key that the selector applies to.
										Key string `json:"key"`

										// Operator operator represents a key's relationship to a set of values.
										// Valid operators are In, NotIn, Exists and DoesNotExist.
										Operator string `json:"operator"`

										// Values values is an array of string values. If the operator is In or NotIn,
										// the values array must be non-empty. If the operator is Exists or DoesNotExist,
										// the values array must be empty. This array is replaced during a strategic
										// merge patch.
										Values *[]string `json:"values,omitempty"`
									} `json:"matchExpressions,omitempty"`

									// MatchLabels matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels
									// map is equivalent to an element of matchExpressions, whose key field is "key", the
									// operator is "In", and the values array contains only "value". The requirements are ANDed.
									MatchLabels *map[string]string `json:"matchLabels,omitempty"`
								} `json:"labelSelector,omitempty"`

								// MatchLabelKeys MatchLabelKeys is a set of pod label keys to select which pods will
								// be taken into consideration. The keys are used to lookup values from the
								// incoming pod labels, those key-value labels are merged with `labelSelector` as `key in (value)`
								// to select the group of existing pods which pods will be taken into consideration
								// for the incoming pod's pod (anti) affinity. Keys that don't exist in the incoming
								// pod labels will be ignored. The default value is empty.
								// The same key is forbidden to exist in both matchLabelKeys and labelSelector.
								// Also, matchLabelKeys cannot be set when labelSelector isn't set.
								MatchLabelKeys *[]string `json:"matchLabelKeys,omitempty"`

								// MismatchLabelKeys MismatchLabelKeys is a set of pod label keys to select which pods will
								// be taken into consideration. The keys are used to lookup values from the
								// incoming pod labels, those key-value labels are merged with `labelSelector` as `key notin (value)`
								// to select the group of existing pods which pods will be taken into consideration
								// for the incoming pod's pod (anti) affinity. Keys that don't exist in the incoming
								// pod labels will be ignored. The default value is empty.
								// The same key is forbidden to exist in both mismatchLabelKeys and labelSelector.
								// Also, mismatchLabelKeys cannot be set when labelSelector isn't set.
								MismatchLabelKeys *[]string `json:"mismatchLabelKeys,omitempty"`

								// NamespaceSelector A label query over the set of namespaces that the term applies to.
								// The term is applied to the union of the namespaces selected by this field
								// and the ones listed in the namespaces field.
								// null selector and null or empty namespaces list means "this pod's namespace".
								// An empty selector ({}) matches all namespaces.
								NamespaceSelector *struct {
									// MatchExpressions matchExpressions is a list of label selector requirements. The requirements are ANDed.
									MatchExpressions *[]struct {
										// Key key is the label key that the selector applies to.
										Key string `json:"key"`

										// Operator operator represents a key's relationship to a set of values.
										// Valid operators are In, NotIn, Exists and DoesNotExist.
										Operator string `json:"operator"`

										// Values values is an array of string values. If the operator is In or NotIn,
										// the values array must be non-empty. If the operator is Exists or DoesNotExist,
										// the values array must be empty. This array is replaced during a strategic
										// merge patch.
										Values *[]string `json:"values,omitempty"`
									} `json:"matchExpressions,omitempty"`

									// MatchLabels matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels
									// map is equivalent to an element of matchExpressions, whose key field is "key", the
									// operator is "In", and the values array contains only "value". The requirements are ANDed.
									MatchLabels *map[string]string `json:"matchLabels,omitempty"`
								} `json:"namespaceSelector,omitempty"`

								// Namespaces namespaces specifies a static list of namespace names that the term applies to.
								// The term is applied to the union of the namespaces listed in this field
								// and the ones selected by namespaceSelector.
								// null or empty namespaces list and null namespaceSelector means "this pod's namespace".
								Namespaces *[]string `json:"namespaces,omitempty"`

								// TopologyKey This pod should be co-located (affinity) or not co-located (anti-affinity) with the pods matching
								// the labelSelector in the specified namespaces, where co-located is defined as running on a node
								// whose value of the label with key topologyKey matches that of any node on which any of the
								// selected pods is running.
								// Empty topologyKey is not allowed.
								TopologyKey string `json:"topologyKey"`
							} `json:"podAffinityTerm"`

							// Weight weight associated with matching the corresponding podAffinityTerm,
							// in the range 1-100.
							Weight int32 `json:"weight"`
						} `json:"preferredDuringSchedulingIgnoredDuringExecution,omitempty"`

						// RequiredDuringSchedulingIgnoredDuringExecution If the anti-affinity requirements specified by this field are not met at
						// scheduling time, the pod will not be scheduled onto the node.
						// If the anti-affinity requirements specified by this field cease to be met
						// at some point during pod execution (e.g. due to a pod label update), the
						// system may or may not try to eventually evict the pod from its node.
						// When there are multiple elements, the lists of nodes corresponding to each
						// podAffinityTerm are intersected, i.e. all terms must be satisfied.
						RequiredDuringSchedulingIgnoredDuringExecution *[]struct {
							// LabelSelector A label query over a set of resources, in this case pods.
							// If it's null, this PodAffinityTerm matches with no Pods.
							LabelSelector *struct {
								// MatchExpressions matchExpressions is a list of label selector requirements. The requirements are ANDed.
								MatchExpressions *[]struct {
									// Key key is the label key that the selector applies to.
									Key string `json:"key"`

									// Operator operator represents a key's relationship to a set of values.
									// Valid operators are In, NotIn, Exists and DoesNotExist.
									Operator string `json:"operator"`

									// Values values is an array of string values. If the operator is In or NotIn,
									// the values array must be non-empty. If the operator is Exists or DoesNotExist,
									// the values array must be empty. This array is replaced during a strategic
									// merge patch.
									Values *[]string `json:"values,omitempty"`
								} `json:"matchExpressions,omitempty"`

								// MatchLabels matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels
								// map is equivalent to an element of matchExpressions, whose key field is "key", the
								// operator is "In", and the values array contains only "value". The requirements are ANDed.
								MatchLabels *map[string]string `json:"matchLabels,omitempty"`
							} `json:"labelSelector,omitempty"`

							// MatchLabelKeys MatchLabelKeys is a set of pod label keys to select which pods will
							// be taken into consideration. The keys are used to lookup values from the
							// incoming pod labels, those key-value labels are merged with `labelSelector` as `key in (value)`
							// to select the group of existing pods which pods will be taken into consideration
							// for the incoming pod's pod (anti) affinity. Keys that don't exist in the incoming
							// pod labels will be ignored. The default value is empty.
							// The same key is forbidden to exist in both matchLabelKeys and labelSelector.
							// Also, matchLabelKeys cannot be set when labelSelector isn't set.
							MatchLabelKeys *[]string `json:"matchLabelKeys,omitempty"`

							// MismatchLabelKeys MismatchLabelKeys is a set of pod label keys to select which pods will
							// be taken into consideration. The keys are used to lookup values from the
							// incoming pod labels, those key-value labels are merged with `labelSelector` as `key notin (value)`
							// to select the group of existing pods which pods will be taken into consideration
							// for the incoming pod's pod (anti) affinity. Keys that don't exist in the incoming
							// pod labels will be ignored. The default value is empty.
							// The same key is forbidden to exist in both mismatchLabelKeys and labelSelector.
							// Also, mismatchLabelKeys cannot be set when labelSelector isn't set.
							MismatchLabelKeys *[]string `json:"mismatchLabelKeys,omitempty"`

							// NamespaceSelector A label query over the set of namespaces that the term applies to.
							// The term is applied to the union of the namespaces selected by this field
							// and the ones listed in the namespaces field.
							// null selector and null or empty namespaces list means "this pod's namespace".
							// An empty selector ({}) matches all namespaces.
							NamespaceSelector *struct {
								// MatchExpressions matchExpressions is a list of label selector requirements. The requirements are ANDed.
								MatchExpressions *[]struct {
									// Key key is the label key that the selector applies to.
									Key string `json:"key"`

									// Operator operator represents a key's relationship to a set of values.
									// Valid operators are In, NotIn, Exists and DoesNotExist.
									Operator string `json:"operator"`

									// Values values is an array of string values. If the operator is In or NotIn,
									// the values array must be non-empty. If the operator is Exists or DoesNotExist,
									// the values array must be empty. This array is replaced during a strategic
									// merge patch.
									Values *[]string `json:"values,omitempty"`
								} `json:"matchExpressions,omitempty"`

								// MatchLabels matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels
								// map is equivalent to an element of matchExpressions, whose key field is "key", the
								// operator is "In", and the values array contains only "value". The requirements are ANDed.
								MatchLabels *map[string]string `json:"matchLabels,omitempty"`
							} `json:"namespaceSelector,omitempty"`

							// Namespaces namespaces specifies a static list of namespace names that the term applies to.
							// The term is applied to the union of the namespaces listed in this field
							// and the ones selected by namespaceSelector.
							// null or empty namespaces list and null namespaceSelector means "this pod's namespace".
							Namespaces *[]string `json:"namespaces,omitempty"`

							// TopologyKey This pod should be co-located (affinity) or not co-located (anti-affinity) with the pods matching
							// the labelSelector in the specified namespaces, where co-located is defined as running on a node
							// whose value of the label with key topologyKey matches that of any node on which any of the
							// selected pods is running.
							// Empty topologyKey is not allowed.
							TopologyKey string `json:"topologyKey"`
						} `json:"requiredDuringSchedulingIgnoredDuringExecution,omitempty"`
					} `json:"podAntiAffinity,omitempty"`
				} `json:"engine,omitempty"`

				// Proxy Proxy is the affinity configuration for the DB Proxy pods.
				Proxy *struct {
					// NodeAffinity Describes node affinity scheduling rules for the pod.
					NodeAffinity *struct {
						// PreferredDuringSchedulingIgnoredDuringExecution The scheduler will prefer to schedule pods to nodes that satisfy
						// the affinity expressions specified by this field, but it may choose
						// a node that violates one or more of the expressions. The node that is
						// most preferred is the one with the greatest sum of weights, i.e.
						// for each node that meets all of the scheduling requirements (resource
						// request, requiredDuringScheduling affinity expressions, etc.),
						// compute a sum by iterating through the elements of this field and adding
						// "weight" to the sum if the node matches the corresponding matchExpressions; the
						// node(s) with the highest sum are the most preferred.
						PreferredDuringSchedulingIgnoredDuringExecution *[]struct {
							// Preference A node selector term, associated with the corresponding weight.
							Preference struct {
								// MatchExpressions A list of node selector requirements by node's labels.
								MatchExpressions *[]struct {
									// Key The label key that the selector applies to.
									Key string `json:"key"`

									// Operator Represents a key's relationship to a set of values.
									// Valid operators are In, NotIn, Exists, DoesNotExist. Gt, and Lt.
									Operator string `json:"operator"`

									// Values An array of string values. If the operator is In or NotIn,
									// the values array must be non-empty. If the operator is Exists or DoesNotExist,
									// the values array must be empty. If the operator is Gt or Lt, the values
									// array must have a single element, which will be interpreted as an integer.
									// This array is replaced during a strategic merge patch.
									Values *[]string `json:"values,omitempty"`
								} `json:"matchExpressions,omitempty"`

								// MatchFields A list of node selector requirements by node's fields.
								MatchFields *[]struct {
									// Key The label key that the selector applies to.
									Key string `json:"key"`

									// Operator Represents a key's relationship to a set of values.
									// Valid operators are In, NotIn, Exists, DoesNotExist. Gt, and Lt.
									Operator string `json:"operator"`

									// Values An array of string values. If the operator is In or NotIn,
									// the values array must be non-empty. If the operator is Exists or DoesNotExist,
									// the values array must be empty. If the operator is Gt or Lt, the values
									// array must have a single element, which will be interpreted as an integer.
									// This array is replaced during a strategic merge patch.
									Values *[]string `json:"values,omitempty"`
								} `json:"matchFields,omitempty"`
							} `json:"preference"`

							// Weight Weight associated with matching the corresponding nodeSelectorTerm, in the range 1-100.
							Weight int32 `json:"weight"`
						} `json:"preferredDuringSchedulingIgnoredDuringExecution,omitempty"`

						// RequiredDuringSchedulingIgnoredDuringExecution If the affinity requirements specified by this field are not met at
						// scheduling time, the pod will not be scheduled onto the node.
						// If the affinity requirements specified by this field cease to be met
						// at some point during pod execution (e.g. due to an update), the system
						// may or may not try to eventually evict the pod from its node.
						RequiredDuringSchedulingIgnoredDuringExecution *struct {
							// NodeSelectorTerms Required. A list of node selector terms. The terms are ORed.
							NodeSelectorTerms []struct {
								// MatchExpressions A list of node selector requirements by node's labels.
								MatchExpressions *[]struct {
									// Key The label key that the selector applies to.
									Key string `json:"key"`

									// Operator Represents a key's relationship to a set of values.
									// Valid operators are In, NotIn, Exists, DoesNotExist. Gt, and Lt.
									Operator string `json:"operator"`

									// Values An array of string values. If the operator is In or NotIn,
									// the values array must be non-empty. If the operator is Exists or DoesNotExist,
									// the values array must be empty. If the operator is Gt or Lt, the values
									// array must have a single element, which will be interpreted as an integer.
									// This array is replaced during a strategic merge patch.
									Values *[]string `json:"values,omitempty"`
								} `json:"matchExpressions,omitempty"`

								// MatchFields A list of node selector requirements by node's fields.
								MatchFields *[]struct {
									// Key The label key that the selector applies to.
									Key string `json:"key"`

									// Operator Represents a key's relationship to a set of values.
									// Valid operators are In, NotIn, Exists, DoesNotExist. Gt, and Lt.
									Operator string `json:"operator"`

									// Values An array of string values. If the operator is In or NotIn,
									// the values array must be non-empty. If the operator is Exists or DoesNotExist,
									// the values array must be empty. If the operator is Gt or Lt, the values
									// array must have a single element, which will be interpreted as an integer.
									// This array is replaced during a strategic merge patch.
									Values *[]string `json:"values,omitempty"`
								} `json:"matchFields,omitempty"`
							} `json:"nodeSelectorTerms"`
						} `json:"requiredDuringSchedulingIgnoredDuringExecution,omitempty"`
					} `json:"nodeAffinity,omitempty"`

					// PodAffinity Describes pod affinity scheduling rules (e.g. co-locate this pod in the same node, zone, etc. as some other pod(s)).
					PodAffinity *struct {
						// PreferredDuringSchedulingIgnoredDuringExecution The scheduler will prefer to schedule pods to nodes that satisfy
						// the affinity expressions specified by this field, but it may choose
						// a node that violates one or more of the expressions. The node that is
						// most preferred is the one with the greatest sum of weights, i.e.
						// for each node that meets all of the scheduling requirements (resource
						// request, requiredDuringScheduling affinity expressions, etc.),
						// compute a sum by iterating through the elements of this field and adding
						// "weight" to the sum if the node has pods which matches the corresponding podAffinityTerm; the
						// node(s) with the highest sum are the most preferred.
						PreferredDuringSchedulingIgnoredDuringExecution *[]struct {
							// PodAffinityTerm Required. A pod affinity term, associated with the corresponding weight.
							PodAffinityTerm struct {
								// LabelSelector A label query over a set of resources, in this case pods.
								// If it's null, this PodAffinityTerm matches with no Pods.
								LabelSelector *struct {
									// MatchExpressions matchExpressions is a list of label selector requirements. The requirements are ANDed.
									MatchExpressions *[]struct {
										// Key key is the label key that the selector applies to.
										Key string `json:"key"`

										// Operator operator represents a key's relationship to a set of values.
										// Valid operators are In, NotIn, Exists and DoesNotExist.
										Operator string `json:"operator"`

										// Values values is an array of string values. If the operator is In or NotIn,
										// the values array must be non-empty. If the operator is Exists or DoesNotExist,
										// the values array must be empty. This array is replaced during a strategic
										// merge patch.
										Values *[]string `json:"values,omitempty"`
									} `json:"matchExpressions,omitempty"`

									// MatchLabels matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels
									// map is equivalent to an element of matchExpressions, whose key field is "key", the
									// operator is "In", and the values array contains only "value". The requirements are ANDed.
									MatchLabels *map[string]string `json:"matchLabels,omitempty"`
								} `json:"labelSelector,omitempty"`

								// MatchLabelKeys MatchLabelKeys is a set of pod label keys to select which pods will
								// be taken into consideration. The keys are used to lookup values from the
								// incoming pod labels, those key-value labels are merged with `labelSelector` as `key in (value)`
								// to select the group of existing pods which pods will be taken into consideration
								// for the incoming pod's pod (anti) affinity. Keys that don't exist in the incoming
								// pod labels will be ignored. The default value is empty.
								// The same key is forbidden to exist in both matchLabelKeys and labelSelector.
								// Also, matchLabelKeys cannot be set when labelSelector isn't set.
								MatchLabelKeys *[]string `json:"matchLabelKeys,omitempty"`

								// MismatchLabelKeys MismatchLabelKeys is a set of pod label keys to select which pods will
								// be taken into consideration. The keys are used to lookup values from the
								// incoming pod labels, those key-value labels are merged with `labelSelector` as `key notin (value)`
								// to select the group of existing pods which pods will be taken into consideration
								// for the incoming pod's pod (anti) affinity. Keys that don't exist in the incoming
								// pod labels will be ignored. The default value is empty.
								// The same key is forbidden to exist in both mismatchLabelKeys and labelSelector.
								// Also, mismatchLabelKeys cannot be set when labelSelector isn't set.
								MismatchLabelKeys *[]string `json:"mismatchLabelKeys,omitempty"`

								// NamespaceSelector A label query over the set of namespaces that the term applies to.
								// The term is applied to the union of the namespaces selected by this field
								// and the ones listed in the namespaces field.
								// null selector and null or empty namespaces list means "this pod's namespace".
								// An empty selector ({}) matches all namespaces.
								NamespaceSelector *struct {
									// MatchExpressions matchExpressions is a list of label selector requirements. The requirements are ANDed.
									MatchExpressions *[]struct {
										// Key key is the label key that the selector applies to.
										Key string `json:"key"`

										// Operator operator represents a key's relationship to a set of values.
										// Valid operators are In, NotIn, Exists and DoesNotExist.
										Operator string `json:"operator"`

										// Values values is an array of string values. If the operator is In or NotIn,
										// the values array must be non-empty. If the operator is Exists or DoesNotExist,
										// the values array must be empty. This array is replaced during a strategic
										// merge patch.
										Values *[]string `json:"values,omitempty"`
									} `json:"matchExpressions,omitempty"`

									// MatchLabels matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels
									// map is equivalent to an element of matchExpressions, whose key field is "key", the
									// operator is "In", and the values array contains only "value". The requirements are ANDed.
									MatchLabels *map[string]string `json:"matchLabels,omitempty"`
								} `json:"namespaceSelector,omitempty"`

								// Namespaces namespaces specifies a static list of namespace names that the term applies to.
								// The term is applied to the union of the namespaces listed in this field
								// and the ones selected by namespaceSelector.
								// null or empty namespaces list and null namespaceSelector means "this pod's namespace".
								Namespaces *[]string `json:"namespaces,omitempty"`

								// TopologyKey This pod should be co-located (affinity) or not co-located (anti-affinity) with the pods matching
								// the labelSelector in the specified namespaces, where co-located is defined as running on a node
								// whose value of the label with key topologyKey matches that of any node on which any of the
								// selected pods is running.
								// Empty topologyKey is not allowed.
								TopologyKey string `json:"topologyKey"`
							} `json:"podAffinityTerm"`

							// Weight weight associated with matching the corresponding podAffinityTerm,
							// in the range 1-100.
							Weight int32 `json:"weight"`
						} `json:"preferredDuringSchedulingIgnoredDuringExecution,omitempty"`

						// RequiredDuringSchedulingIgnoredDuringExecution If the affinity requirements specified by this field are not met at
						// scheduling time, the pod will not be scheduled onto the node.
						// If the affinity requirements specified by this field cease to be met
						// at some point during pod execution (e.g. due to a pod label update), the
						// system may or may not try to eventually evict the pod from its node.
						// When there are multiple elements, the lists of nodes corresponding to each
						// podAffinityTerm are intersected, i.e. all terms must be satisfied.
						RequiredDuringSchedulingIgnoredDuringExecution *[]struct {
							// LabelSelector A label query over a set of resources, in this case pods.
							// If it's null, this PodAffinityTerm matches with no Pods.
							LabelSelector *struct {
								// MatchExpressions matchExpressions is a list of label selector requirements. The requirements are ANDed.
								MatchExpressions *[]struct {
									// Key key is the label key that the selector applies to.
									Key string `json:"key"`

									// Operator operator represents a key's relationship to a set of values.
									// Valid operators are In, NotIn, Exists and DoesNotExist.
									Operator string `json:"operator"`

									// Values values is an array of string values. If the operator is In or NotIn,
									// the values array must be non-empty. If the operator is Exists or DoesNotExist,
									// the values array must be empty. This array is replaced during a strategic
									// merge patch.
									Values *[]string `json:"values,omitempty"`
								} `json:"matchExpressions,omitempty"`

								// MatchLabels matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels
								// map is equivalent to an element of matchExpressions, whose key field is "key", the
								// operator is "In", and the values array contains only "value". The requirements are ANDed.
								MatchLabels *map[string]string `json:"matchLabels,omitempty"`
							} `json:"labelSelector,omitempty"`

							// MatchLabelKeys MatchLabelKeys is a set of pod label keys to select which pods will
							// be taken into consideration. The keys are used to lookup values from the
							// incoming pod labels, those key-value labels are merged with `labelSelector` as `key in (value)`
							// to select the group of existing pods which pods will be taken into consideration
							// for the incoming pod's pod (anti) affinity. Keys that don't exist in the incoming
							// pod labels will be ignored. The default value is empty.
							// The same key is forbidden to exist in both matchLabelKeys and labelSelector.
							// Also, matchLabelKeys cannot be set when labelSelector isn't set.
							MatchLabelKeys *[]string `json:"matchLabelKeys,omitempty"`

							// MismatchLabelKeys MismatchLabelKeys is a set of pod label keys to select which pods will
							// be taken into consideration. The keys are used to lookup values from the
							// incoming pod labels, those key-value labels are merged with `labelSelector` as `key notin (value)`
							// to select the group of existing pods which pods will be taken into consideration
							// for the incoming pod's pod (anti) affinity. Keys that don't exist in the incoming
							// pod labels will be ignored. The default value is empty.
							// The same key is forbidden to exist in both mismatchLabelKeys and labelSelector.
							// Also, mismatchLabelKeys cannot be set when labelSelector isn't set.
							MismatchLabelKeys *[]string `json:"mismatchLabelKeys,omitempty"`

							// NamespaceSelector A label query over the set of namespaces that the term applies to.
							// The term is applied to the union of the namespaces selected by this field
							// and the ones listed in the namespaces field.
							// null selector and null or empty namespaces list means "this pod's namespace".
							// An empty selector ({}) matches all namespaces.
							NamespaceSelector *struct {
								// MatchExpressions matchExpressions is a list of label selector requirements. The requirements are ANDed.
								MatchExpressions *[]struct {
									// Key key is the label key that the selector applies to.
									Key string `json:"key"`

									// Operator operator represents a key's relationship to a set of values.
									// Valid operators are In, NotIn, Exists and DoesNotExist.
									Operator string `json:"operator"`

									// Values values is an array of string values. If the operator is In or NotIn,
									// the values array must be non-empty. If the operator is Exists or DoesNotExist,
									// the values array must be empty. This array is replaced during a strategic
									// merge patch.
									Values *[]string `json:"values,omitempty"`
								} `json:"matchExpressions,omitempty"`

								// MatchLabels matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels
								// map is equivalent to an element of matchExpressions, whose key field is "key", the
								// operator is "In", and the values array contains only "value". The requirements are ANDed.
								MatchLabels *map[string]string `json:"matchLabels,omitempty"`
							} `json:"namespaceSelector,omitempty"`

							// Namespaces namespaces specifies a static list of namespace names that the term applies to.
							// The term is applied to the union of the namespaces listed in this field
							// and the ones selected by namespaceSelector.
							// null or empty namespaces list and null namespaceSelector means "this pod's namespace".
							Namespaces *[]string `json:"namespaces,omitempty"`

							// TopologyKey This pod should be co-located (affinity) or not co-located (anti-affinity) with the pods matching
							// the labelSelector in the specified namespaces, where co-located is defined as running on a node
							// whose value of the label with key topologyKey matches that of any node on which any of the
							// selected pods is running.
							// Empty topologyKey is not allowed.
							TopologyKey string `json:"topologyKey"`
						} `json:"requiredDuringSchedulingIgnoredDuringExecution,omitempty"`
					} `json:"podAffinity,omitempty"`

					// PodAntiAffinity Describes pod anti-affinity scheduling rules (e.g. avoid putting this pod in the same node, zone, etc. as some other pod(s)).
					PodAntiAffinity *struct {
						// PreferredDuringSchedulingIgnoredDuringExecution The scheduler will prefer to schedule pods to nodes that satisfy
						// the anti-affinity expressions specified by this field, but it may choose
						// a node that violates one or more of the expressions. The node that is
						// most preferred is the one with the greatest sum of weights, i.e.
						// for each node that meets all of the scheduling requirements (resource
						// request, requiredDuringScheduling anti-affinity expressions, etc.),
						// compute a sum by iterating through the elements of this field and adding
						// "weight" to the sum if the node has pods which matches the corresponding podAffinityTerm; the
						// node(s) with the highest sum are the most preferred.
						PreferredDuringSchedulingIgnoredDuringExecution *[]struct {
							// PodAffinityTerm Required. A pod affinity term, associated with the corresponding weight.
							PodAffinityTerm struct {
								// LabelSelector A label query over a set of resources, in this case pods.
								// If it's null, this PodAffinityTerm matches with no Pods.
								LabelSelector *struct {
									// MatchExpressions matchExpressions is a list of label selector requirements. The requirements are ANDed.
									MatchExpressions *[]struct {
										// Key key is the label key that the selector applies to.
										Key string `json:"key"`

										// Operator operator represents a key's relationship to a set of values.
										// Valid operators are In, NotIn, Exists and DoesNotExist.
										Operator string `json:"operator"`

										// Values values is an array of string values. If the operator is In or NotIn,
										// the values array must be non-empty. If the operator is Exists or DoesNotExist,
										// the values array must be empty. This array is replaced during a strategic
										// merge patch.
										Values *[]string `json:"values,omitempty"`
									} `json:"matchExpressions,omitempty"`

									// MatchLabels matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels
									// map is equivalent to an element of matchExpressions, whose key field is "key", the
									// operator is "In", and the values array contains only "value". The requirements are ANDed.
									MatchLabels *map[string]string `json:"matchLabels,omitempty"`
								} `json:"labelSelector,omitempty"`

								// MatchLabelKeys MatchLabelKeys is a set of pod label keys to select which pods will
								// be taken into consideration. The keys are used to lookup values from the
								// incoming pod labels, those key-value labels are merged with `labelSelector` as `key in (value)`
								// to select the group of existing pods which pods will be taken into consideration
								// for the incoming pod's pod (anti) affinity. Keys that don't exist in the incoming
								// pod labels will be ignored. The default value is empty.
								// The same key is forbidden to exist in both matchLabelKeys and labelSelector.
								// Also, matchLabelKeys cannot be set when labelSelector isn't set.
								MatchLabelKeys *[]string `json:"matchLabelKeys,omitempty"`

								// MismatchLabelKeys MismatchLabelKeys is a set of pod label keys to select which pods will
								// be taken into consideration. The keys are used to lookup values from the
								// incoming pod labels, those key-value labels are merged with `labelSelector` as `key notin (value)`
								// to select the group of existing pods which pods will be taken into consideration
								// for the incoming pod's pod (anti) affinity. Keys that don't exist in the incoming
								// pod labels will be ignored. The default value is empty.
								// The same key is forbidden to exist in both mismatchLabelKeys and labelSelector.
								// Also, mismatchLabelKeys cannot be set when labelSelector isn't set.
								MismatchLabelKeys *[]string `json:"mismatchLabelKeys,omitempty"`

								// NamespaceSelector A label query over the set of namespaces that the term applies to.
								// The term is applied to the union of the namespaces selected by this field
								// and the ones listed in the namespaces field.
								// null selector and null or empty namespaces list means "this pod's namespace".
								// An empty selector ({}) matches all namespaces.
								NamespaceSelector *struct {
									// MatchExpressions matchExpressions is a list of label selector requirements. The requirements are ANDed.
									MatchExpressions *[]struct {
										// Key key is the label key that the selector applies to.
										Key string `json:"key"`

										// Operator operator represents a key's relationship to a set of values.
										// Valid operators are In, NotIn, Exists and DoesNotExist.
										Operator string `json:"operator"`

										// Values values is an array of string values. If the operator is In or NotIn,
										// the values array must be non-empty. If the operator is Exists or DoesNotExist,
										// the values array must be empty. This array is replaced during a strategic
										// merge patch.
										Values *[]string `json:"values,omitempty"`
									} `json:"matchExpressions,omitempty"`

									// MatchLabels matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels
									// map is equivalent to an element of matchExpressions, whose key field is "key", the
									// operator is "In", and the values array contains only "value". The requirements are ANDed.
									MatchLabels *map[string]string `json:"matchLabels,omitempty"`
								} `json:"namespaceSelector,omitempty"`

								// Namespaces namespaces specifies a static list of namespace names that the term applies to.
								// The term is applied to the union of the namespaces listed in this field
								// and the ones selected by namespaceSelector.
								// null or empty namespaces list and null namespaceSelector means "this pod's namespace".
								Namespaces *[]string `json:"namespaces,omitempty"`

								// TopologyKey This pod should be co-located (affinity) or not co-located (anti-affinity) with the pods matching
								// the labelSelector in the specified namespaces, where co-located is defined as running on a node
								// whose value of the label with key topologyKey matches that of any node on which any of the
								// selected pods is running.
								// Empty topologyKey is not allowed.
								TopologyKey string `json:"topologyKey"`
							} `json:"podAffinityTerm"`

							// Weight weight associated with matching the corresponding podAffinityTerm,
							// in the range 1-100.
							Weight int32 `json:"weight"`
						} `json:"preferredDuringSchedulingIgnoredDuringExecution,omitempty"`

						// RequiredDuringSchedulingIgnoredDuringExecution If the anti-affinity requirements specified by this field are not met at
						// scheduling time, the pod will not be scheduled onto the node.
						// If the anti-affinity requirements specified by this field cease to be met
						// at some point during pod execution (e.g. due to a pod label update), the
						// system may or may not try to eventually evict the pod from its node.
						// When there are multiple elements, the lists of nodes corresponding to each
						// podAffinityTerm are intersected, i.e. all terms must be satisfied.
						RequiredDuringSchedulingIgnoredDuringExecution *[]struct {
							// LabelSelector A label query over a set of resources, in this case pods.
							// If it's null, this PodAffinityTerm matches with no Pods.
							LabelSelector *struct {
								// MatchExpressions matchExpressions is a list of label selector requirements. The requirements are ANDed.
								MatchExpressions *[]struct {
									// Key key is the label key that the selector applies to.
									Key string `json:"key"`

									// Operator operator represents a key's relationship to a set of values.
									// Valid operators are In, NotIn, Exists and DoesNotExist.
									Operator string `json:"operator"`

									// Values values is an array of string values. If the operator is In or NotIn,
									// the values array must be non-empty. If the operator is Exists or DoesNotExist,
									// the values array must be empty. This array is replaced during a strategic
									// merge patch.
									Values *[]string `json:"values,omitempty"`
								} `json:"matchExpressions,omitempty"`

								// MatchLabels matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels
								// map is equivalent to an element of matchExpressions, whose key field is "key", the
								// operator is "In", and the values array contains only "value". The requirements are ANDed.
								MatchLabels *map[string]string `json:"matchLabels,omitempty"`
							} `json:"labelSelector,omitempty"`

							// MatchLabelKeys MatchLabelKeys is a set of pod label keys to select which pods will
							// be taken into consideration. The keys are used to lookup values from the
							// incoming pod labels, those key-value labels are merged with `labelSelector` as `key in (value)`
							// to select the group of existing pods which pods will be taken into consideration
							// for the incoming pod's pod (anti) affinity. Keys that don't exist in the incoming
							// pod labels will be ignored. The default value is empty.
							// The same key is forbidden to exist in both matchLabelKeys and labelSelector.
							// Also, matchLabelKeys cannot be set when labelSelector isn't set.
							MatchLabelKeys *[]string `json:"matchLabelKeys,omitempty"`

							// MismatchLabelKeys MismatchLabelKeys is a set of pod label keys to select which pods will
							// be taken into consideration. The keys are used to lookup values from the
							// incoming pod labels, those key-value labels are merged with `labelSelector` as `key notin (value)`
							// to select the group of existing pods which pods will be taken into consideration
							// for the incoming pod's pod (anti) affinity. Keys that don't exist in the incoming
							// pod labels will be ignored. The default value is empty.
							// The same key is forbidden to exist in both mismatchLabelKeys and labelSelector.
							// Also, mismatchLabelKeys cannot be set when labelSelector isn't set.
							MismatchLabelKeys *[]string `json:"mismatchLabelKeys,omitempty"`

							// NamespaceSelector A label query over the set of namespaces that the term applies to.
							// The term is applied to the union of the namespaces selected by this field
							// and the ones listed in the namespaces field.
							// null selector and null or empty namespaces list means "this pod's namespace".
							// An empty selector ({}) matches all namespaces.
							NamespaceSelector *struct {
								// MatchExpressions matchExpressions is a list of label selector requirements. The requirements are ANDed.
								MatchExpressions *[]struct {
									// Key key is the label key that the selector applies to.
									Key string `json:"key"`

									// Operator operator represents a key's relationship to a set of values.
									// Valid operators are In, NotIn, Exists and DoesNotExist.
									Operator string `json:"operator"`

									// Values values is an array of string values. If the operator is In or NotIn,
									// the values array must be non-empty. If the operator is Exists or DoesNotExist,
									// the values array must be empty. This array is replaced during a strategic
									// merge patch.
									Values *[]string `json:"values,omitempty"`
								} `json:"matchExpressions,omitempty"`

								// MatchLabels matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels
								// map is equivalent to an element of matchExpressions, whose key field is "key", the
								// operator is "In", and the values array contains only "value". The requirements are ANDed.
								MatchLabels *map[string]string `json:"matchLabels,omitempty"`
							} `json:"namespaceSelector,omitempty"`

							// Namespaces namespaces specifies a static list of namespace names that the term applies to.
							// The term is applied to the union of the namespaces listed in this field
							// and the ones selected by namespaceSelector.
							// null or empty namespaces list and null namespaceSelector means "this pod's namespace".
							Namespaces *[]string `json:"namespaces,omitempty"`

							// TopologyKey This pod should be co-located (affinity) or not co-located (anti-affinity) with the pods matching
							// the labelSelector in the specified namespaces, where co-located is defined as running on a node
							// whose value of the label with key topologyKey matches that of any node on which any of the
							// selected pods is running.
							// Empty topologyKey is not allowed.
							TopologyKey string `json:"topologyKey"`
						} `json:"requiredDuringSchedulingIgnoredDuringExecution,omitempty"`
					} `json:"podAntiAffinity,omitempty"`
				} `json:"proxy,omitempty"`
			} `json:"pxc,omitempty"`
		} `json:"affinityConfig,omitempty"`

		// EngineType EngineType is type of DB engine that this policy can be applied to.
		EngineType PodSchedulingPolicySpecEngineType `json:"engineType"`
	} `json:"spec,omitempty"`

	// Status PodSchedulingPolicyStatus defines the observed state of PodSchedulingPolicy.
	Status *struct {
		// InUse InUse is a flag that indicates if the policy is used by any DB cluster.
		InUse *bool `json:"inUse,omitempty"`

		// LastObservedGeneration LastObservedGeneration is the most recent generation observed for this PodSchedulingPolicy.
		LastObservedGeneration *int64 `json:"lastObservedGeneration,omitempty"`
	} `json:"status,omitempty"`
}

// PodSchedulingPolicySpecEngineType EngineType is type of DB engine that this policy can be applied to.
type PodSchedulingPolicySpecEngineType string

// PodSchedulingPolicyList PodSchedulingPolicyList is an object that contains the list of the existing pod scheduling policies.
type PodSchedulingPolicyList struct {
	// ApiVersion APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
	ApiVersion *string                `json:"apiVersion,omitempty"`
	Items      *[]PodSchedulingPolicy `json:"items,omitempty"`

	// Kind Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
	Kind     *string                 `json:"kind,omitempty"`
	Metadata *map[string]interface{} `json:"metadata,omitempty"`
}

// Settings Everest global settings
type Settings struct {
	// OidcConfig Everest OIDC provider configuration
	OidcConfig OIDCConfig `json:"oidcConfig"`
}

// StorageClass StorageClass describes the parameters for a class of storage for which PersistentVolumes can be dynamically provisioned.
//
// StorageClasses are non-namespaced; the name of the storage class according to etcd is in ObjectMeta.Name.
type StorageClass struct {
	// AllowVolumeExpansion allowVolumeExpansion shows whether the storage class allow volume expand.
	AllowVolumeExpansion *bool `json:"allowVolumeExpansion,omitempty"`

	// Metadata Standard object's metadata. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata
	Metadata *map[string]interface{} `json:"metadata,omitempty"`
}

// UpdateBackupStorageParams Backup storage parameters
type UpdateBackupStorageParams struct {
	AccessKey *string `json:"accessKey,omitempty"`

	// AllowedNamespaces List of namespaces allowed to use this backup storage
	// Deprecated:
	AllowedNamespaces *[]string `json:"allowedNamespaces,omitempty"`

	// BucketName The cloud storage bucket/container name
	BucketName     *string `json:"bucketName,omitempty"`
	Description    *string `json:"description,omitempty"`
	ForcePathStyle *bool   `json:"forcePathStyle,omitempty"`
	Region         *string `json:"region,omitempty"`
	SecretKey      *string `json:"secretKey,omitempty"`
	Url            *string `json:"url,omitempty"`
	VerifyTLS      *bool   `json:"verifyTLS,omitempty"`
}

// Upgrade defines model for Upgrade.
type Upgrade struct {
	// CurrentVersion The current operator version
	CurrentVersion *string `json:"currentVersion,omitempty"`

	// Name Name of the operator
	Name *string `json:"name,omitempty"`

	// TargetVersion The next version of the operator to upgrade to.
	TargetVersion *string `json:"targetVersion,omitempty"`
}

// UpgradePlan Operators upgrade plan
type UpgradePlan struct {
	PendingActions *[]UpgradeTask `json:"pendingActions,omitempty"`
	Upgrades       *[]Upgrade     `json:"upgrades,omitempty"`
}

// UpgradePlanApproval This no-op object is used to trigger the operator upgrade in a namespace.
type UpgradePlanApproval = map[string]interface{}

// UpgradeTask defines model for UpgradeTask.
type UpgradeTask struct {
	Message *string `json:"message,omitempty"`

	// Name Name of the database cluster
	Name *string `json:"name,omitempty"`

	// PendingTask Pending task for the database cluster
	PendingTask *UpgradeTaskPendingTask `json:"pendingTask,omitempty"`
}

// UpgradeTaskPendingTask Pending task for the database cluster
type UpgradeTaskPendingTask string

// UserCredentials defines model for UserCredentials.
type UserCredentials struct {
	Password *string `json:"password,omitempty"`
	Username *string `json:"username,omitempty"`
}

// UserPermissions defines model for UserPermissions.
type UserPermissions struct {
	Enabled     bool        `json:"enabled"`
	Permissions *[][]string `json:"permissions,omitempty"`
}

// Version Everest version info
type Version struct {
	FullCommit  string `json:"fullCommit"`
	ProjectName string `json:"projectName"`
	Version     string `json:"version"`
}

// IoK8sApimachineryPkgApisMetaV1ListMeta ListMeta describes metadata that synthetic resources must have, including lists and various status objects. A resource may have only one of {ObjectMeta, ListMeta}.
type IoK8sApimachineryPkgApisMetaV1ListMeta struct {
	// Continue continue may be set if the user set a limit on the number of items returned, and indicates that the server has more data available. The value is opaque and may be used to issue another request to the endpoint that served this list to retrieve the next set of available objects. Continuing a consistent list may not be possible if the server configuration has changed or more than a few minutes have passed. The resourceVersion field returned when using this continue value will be identical to the value in the first response, unless you have received this token from an error message.
	Continue *string `json:"continue,omitempty"`

	// RemainingItemCount remainingItemCount is the number of subsequent items in the list which are not included in this list response. If the list request contained label or field selectors, then the number of remaining items is unknown and the field will be left unset and omitted during serialization. If the list is complete (either because it is not chunking or because this is the last chunk), then there are no more remaining items and this field will be left unset and omitted during serialization. Servers older than v1.15 do not set this field. The intended use of the remainingItemCount is *estimating* the size of a collection. Clients should not rely on the remainingItemCount to be set or to be exact.
	RemainingItemCount *int64 `json:"remainingItemCount,omitempty"`

	// ResourceVersion String that identifies the server's internal version of this object that can be used by clients to determine when objects have changed. Value must be treated as opaque by clients and passed unmodified back to the server. Populated by the system. Read-only. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#concurrency-control-and-consistency
	ResourceVersion *string `json:"resourceVersion,omitempty"`

	// SelfLink selfLink is a URL representing this object. Populated by the system. Read-only.
	//
	// DEPRECATED Kubernetes will stop propagating this field in 1.20 release and the field is planned to be removed in 1.21 release.
	SelfLink *string `json:"selfLink,omitempty"`
}

// IoK8sApimachineryPkgApisMetaV1StatusCause StatusCause provides more information about an api.Status failure, including cases when multiple errors are encountered.
type IoK8sApimachineryPkgApisMetaV1StatusCause struct {
	// Field The field of the resource that has caused this error, as named by its JSON serialization. May include dot and postfix notation for nested attributes. Arrays are zero-indexed.  Fields may appear more than once in an array of causes due to fields having multiple errors. Optional.
	//
	// Examples:
	//   "name" - the field "name" on the current resource
	//   "items[0].name" - the field "name" on the first array entry in "items"
	Field *string `json:"field,omitempty"`

	// Message A human-readable description of the cause of the error.  This field may be presented as-is to a reader.
	Message *string `json:"message,omitempty"`

	// Reason A machine-readable description of the cause of the error. If this value is empty there is no information available.
	Reason *string `json:"reason,omitempty"`
}

// IoK8sApimachineryPkgApisMetaV1StatusDetailsV2 StatusDetails is a set of additional properties that MAY be set by the server to provide additional information about a response. The Reason field of a Status object defines what attributes will be set. Clients must ignore fields that do not match the defined type of each attribute, and should assume that any attribute may be empty, invalid, or under defined.
type IoK8sApimachineryPkgApisMetaV1StatusDetailsV2 struct {
	// Causes The Causes array includes more details associated with the StatusReason failure. Not all StatusReasons may provide detailed causes.
	Causes *[]IoK8sApimachineryPkgApisMetaV1StatusCause `json:"causes,omitempty"`

	// Group The group attribute of the resource associated with the status StatusReason.
	Group *string `json:"group,omitempty"`

	// Kind The kind attribute of the resource associated with the status StatusReason. On some operations may differ from the requested resource Kind. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
	Kind *string `json:"kind,omitempty"`

	// Name The name attribute of the resource associated with the status StatusReason (when there is a single name which can be described).
	Name *string `json:"name,omitempty"`

	// RetryAfterSeconds If specified, the time in seconds before the operation should be retried. Some errors may indicate the client must take an alternate action - for those errors this field may indicate how long to wait before taking the alternate action.
	RetryAfterSeconds *int32 `json:"retryAfterSeconds,omitempty"`

	// Uid UID of the resource. (when there is a single resource which can be described). More info: http://kubernetes.io/docs/user-guide/identifiers#uids
	Uid *string `json:"uid,omitempty"`
}

// IoK8sApimachineryPkgApisMetaV1StatusV2 Status is a return value for calls that don't return other objects.
type IoK8sApimachineryPkgApisMetaV1StatusV2 struct {
	// ApiVersion APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
	ApiVersion *string `json:"apiVersion,omitempty"`

	// Code Suggested HTTP return code for this status, 0 if not set.
	Code *int32 `json:"code,omitempty"`

	// Details StatusDetails is a set of additional properties that MAY be set by the server to provide additional information about a response. The Reason field of a Status object defines what attributes will be set. Clients must ignore fields that do not match the defined type of each attribute, and should assume that any attribute may be empty, invalid, or under defined.
	Details *IoK8sApimachineryPkgApisMetaV1StatusDetailsV2 `json:"details,omitempty"`

	// Kind Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
	Kind *string `json:"kind,omitempty"`

	// Message A human-readable description of the status of this operation.
	Message *string `json:"message,omitempty"`

	// Metadata ListMeta describes metadata that synthetic resources must have, including lists and various status objects. A resource may have only one of {ObjectMeta, ListMeta}.
	Metadata *IoK8sApimachineryPkgApisMetaV1ListMeta `json:"metadata,omitempty"`

	// Reason A machine-readable description of why this operation is in the "Failure" status. If this value is empty there is no information available. A Reason clarifies an HTTP status code but does not override it.
	Reason *string `json:"reason,omitempty"`

	// Status Status of the operation. One of: "Success" or "Failure". More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#spec-and-status
	Status *string `json:"status,omitempty"`
}

// DeleteDatabaseClusterBackupParams defines parameters for DeleteDatabaseClusterBackup.
type DeleteDatabaseClusterBackupParams struct {
	// CleanupBackupStorage If set, remove the backed up data from storage
	CleanupBackupStorage *bool `form:"cleanupBackupStorage,omitempty" json:"cleanupBackupStorage,omitempty"`
}

// DeleteDatabaseClusterParams defines parameters for DeleteDatabaseCluster.
type DeleteDatabaseClusterParams struct {
	// CleanupBackupStorage If set, remove the backed up data from storage
	CleanupBackupStorage *bool `form:"cleanupBackupStorage,omitempty" json:"cleanupBackupStorage,omitempty"`
}

// ListPodSchedulingPolicyParams defines parameters for ListPodSchedulingPolicy.
type ListPodSchedulingPolicyParams struct {
	// EngineType Database engine type that Pod Scheduling Policy is applicable to.
	EngineType *ListPodSchedulingPolicyParamsEngineType `form:"engineType,omitempty" json:"engineType,omitempty"`

	// HasRules Return list of Pod Scheduling Policy that has at least 1 rule.
	HasRules *bool `form:"hasRules,omitempty" json:"hasRules,omitempty"`
}

// ListPodSchedulingPolicyParamsEngineType defines parameters for ListPodSchedulingPolicy.
type ListPodSchedulingPolicyParamsEngineType string

// CreateBackupStorageJSONRequestBody defines body for CreateBackupStorage for application/json ContentType.
type CreateBackupStorageJSONRequestBody = CreateBackupStorageParams

// UpdateBackupStorageJSONRequestBody defines body for UpdateBackupStorage for application/json ContentType.
type UpdateBackupStorageJSONRequestBody = UpdateBackupStorageParams

// CreateDatabaseClusterBackupJSONRequestBody defines body for CreateDatabaseClusterBackup for application/json ContentType.
type CreateDatabaseClusterBackupJSONRequestBody = DatabaseClusterBackup

// CreateDatabaseClusterRestoreJSONRequestBody defines body for CreateDatabaseClusterRestore for application/json ContentType.
type CreateDatabaseClusterRestoreJSONRequestBody = DatabaseClusterRestore

// UpdateDatabaseClusterRestoreJSONRequestBody defines body for UpdateDatabaseClusterRestore for application/json ContentType.
type UpdateDatabaseClusterRestoreJSONRequestBody = DatabaseClusterRestore

// CreateDatabaseClusterJSONRequestBody defines body for CreateDatabaseCluster for application/json ContentType.
type CreateDatabaseClusterJSONRequestBody = DatabaseCluster

// UpdateDatabaseClusterJSONRequestBody defines body for UpdateDatabaseCluster for application/json ContentType.
type UpdateDatabaseClusterJSONRequestBody = DatabaseCluster

// ApproveUpgradePlanJSONRequestBody defines body for ApproveUpgradePlan for application/json ContentType.
type ApproveUpgradePlanJSONRequestBody = UpgradePlanApproval

// UpdateDatabaseEngineJSONRequestBody defines body for UpdateDatabaseEngine for application/json ContentType.
type UpdateDatabaseEngineJSONRequestBody = DatabaseEngine

// CreateMonitoringInstanceJSONRequestBody defines body for CreateMonitoringInstance for application/json ContentType.
type CreateMonitoringInstanceJSONRequestBody = MonitoringInstanceCreateParams

// UpdateMonitoringInstanceJSONRequestBody defines body for UpdateMonitoringInstance for application/json ContentType.
type UpdateMonitoringInstanceJSONRequestBody = MonitoringInstanceUpdateParams

// CreatePodSchedulingPolicyJSONRequestBody defines body for CreatePodSchedulingPolicy for application/json ContentType.
type CreatePodSchedulingPolicyJSONRequestBody = PodSchedulingPolicy

// UpdatePodSchedulingPolicyJSONRequestBody defines body for UpdatePodSchedulingPolicy for application/json ContentType.
type UpdatePodSchedulingPolicyJSONRequestBody = PodSchedulingPolicy

// CreateSessionJSONRequestBody defines body for CreateSession for application/json ContentType.
type CreateSessionJSONRequestBody = UserCredentials

// AsDatabaseClusterSpecEngineResourcesCpu0 returns the union data inside the DatabaseCluster_Spec_Engine_Resources_Cpu as a DatabaseClusterSpecEngineResourcesCpu0
func (t DatabaseCluster_Spec_Engine_Resources_Cpu) AsDatabaseClusterSpecEngineResourcesCpu0() (DatabaseClusterSpecEngineResourcesCpu0, error) {
	var body DatabaseClusterSpecEngineResourcesCpu0
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromDatabaseClusterSpecEngineResourcesCpu0 overwrites any union data inside the DatabaseCluster_Spec_Engine_Resources_Cpu as the provided DatabaseClusterSpecEngineResourcesCpu0
func (t *DatabaseCluster_Spec_Engine_Resources_Cpu) FromDatabaseClusterSpecEngineResourcesCpu0(v DatabaseClusterSpecEngineResourcesCpu0) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeDatabaseClusterSpecEngineResourcesCpu0 performs a merge with any union data inside the DatabaseCluster_Spec_Engine_Resources_Cpu, using the provided DatabaseClusterSpecEngineResourcesCpu0
func (t *DatabaseCluster_Spec_Engine_Resources_Cpu) MergeDatabaseClusterSpecEngineResourcesCpu0(v DatabaseClusterSpecEngineResourcesCpu0) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

// AsDatabaseClusterSpecEngineResourcesCpu1 returns the union data inside the DatabaseCluster_Spec_Engine_Resources_Cpu as a DatabaseClusterSpecEngineResourcesCpu1
func (t DatabaseCluster_Spec_Engine_Resources_Cpu) AsDatabaseClusterSpecEngineResourcesCpu1() (DatabaseClusterSpecEngineResourcesCpu1, error) {
	var body DatabaseClusterSpecEngineResourcesCpu1
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromDatabaseClusterSpecEngineResourcesCpu1 overwrites any union data inside the DatabaseCluster_Spec_Engine_Resources_Cpu as the provided DatabaseClusterSpecEngineResourcesCpu1
func (t *DatabaseCluster_Spec_Engine_Resources_Cpu) FromDatabaseClusterSpecEngineResourcesCpu1(v DatabaseClusterSpecEngineResourcesCpu1) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeDatabaseClusterSpecEngineResourcesCpu1 performs a merge with any union data inside the DatabaseCluster_Spec_Engine_Resources_Cpu, using the provided DatabaseClusterSpecEngineResourcesCpu1
func (t *DatabaseCluster_Spec_Engine_Resources_Cpu) MergeDatabaseClusterSpecEngineResourcesCpu1(v DatabaseClusterSpecEngineResourcesCpu1) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

func (t DatabaseCluster_Spec_Engine_Resources_Cpu) MarshalJSON() ([]byte, error) {
	b, err := t.union.MarshalJSON()
	return b, err
}

func (t *DatabaseCluster_Spec_Engine_Resources_Cpu) UnmarshalJSON(b []byte) error {
	err := t.union.UnmarshalJSON(b)
	return err
}

// AsDatabaseClusterSpecEngineResourcesMemory0 returns the union data inside the DatabaseCluster_Spec_Engine_Resources_Memory as a DatabaseClusterSpecEngineResourcesMemory0
func (t DatabaseCluster_Spec_Engine_Resources_Memory) AsDatabaseClusterSpecEngineResourcesMemory0() (DatabaseClusterSpecEngineResourcesMemory0, error) {
	var body DatabaseClusterSpecEngineResourcesMemory0
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromDatabaseClusterSpecEngineResourcesMemory0 overwrites any union data inside the DatabaseCluster_Spec_Engine_Resources_Memory as the provided DatabaseClusterSpecEngineResourcesMemory0
func (t *DatabaseCluster_Spec_Engine_Resources_Memory) FromDatabaseClusterSpecEngineResourcesMemory0(v DatabaseClusterSpecEngineResourcesMemory0) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeDatabaseClusterSpecEngineResourcesMemory0 performs a merge with any union data inside the DatabaseCluster_Spec_Engine_Resources_Memory, using the provided DatabaseClusterSpecEngineResourcesMemory0
func (t *DatabaseCluster_Spec_Engine_Resources_Memory) MergeDatabaseClusterSpecEngineResourcesMemory0(v DatabaseClusterSpecEngineResourcesMemory0) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

// AsDatabaseClusterSpecEngineResourcesMemory1 returns the union data inside the DatabaseCluster_Spec_Engine_Resources_Memory as a DatabaseClusterSpecEngineResourcesMemory1
func (t DatabaseCluster_Spec_Engine_Resources_Memory) AsDatabaseClusterSpecEngineResourcesMemory1() (DatabaseClusterSpecEngineResourcesMemory1, error) {
	var body DatabaseClusterSpecEngineResourcesMemory1
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromDatabaseClusterSpecEngineResourcesMemory1 overwrites any union data inside the DatabaseCluster_Spec_Engine_Resources_Memory as the provided DatabaseClusterSpecEngineResourcesMemory1
func (t *DatabaseCluster_Spec_Engine_Resources_Memory) FromDatabaseClusterSpecEngineResourcesMemory1(v DatabaseClusterSpecEngineResourcesMemory1) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeDatabaseClusterSpecEngineResourcesMemory1 performs a merge with any union data inside the DatabaseCluster_Spec_Engine_Resources_Memory, using the provided DatabaseClusterSpecEngineResourcesMemory1
func (t *DatabaseCluster_Spec_Engine_Resources_Memory) MergeDatabaseClusterSpecEngineResourcesMemory1(v DatabaseClusterSpecEngineResourcesMemory1) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

func (t DatabaseCluster_Spec_Engine_Resources_Memory) MarshalJSON() ([]byte, error) {
	b, err := t.union.MarshalJSON()
	return b, err
}

func (t *DatabaseCluster_Spec_Engine_Resources_Memory) UnmarshalJSON(b []byte) error {
	err := t.union.UnmarshalJSON(b)
	return err
}

// AsDatabaseClusterSpecEngineStorageSize0 returns the union data inside the DatabaseCluster_Spec_Engine_Storage_Size as a DatabaseClusterSpecEngineStorageSize0
func (t DatabaseCluster_Spec_Engine_Storage_Size) AsDatabaseClusterSpecEngineStorageSize0() (DatabaseClusterSpecEngineStorageSize0, error) {
	var body DatabaseClusterSpecEngineStorageSize0
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromDatabaseClusterSpecEngineStorageSize0 overwrites any union data inside the DatabaseCluster_Spec_Engine_Storage_Size as the provided DatabaseClusterSpecEngineStorageSize0
func (t *DatabaseCluster_Spec_Engine_Storage_Size) FromDatabaseClusterSpecEngineStorageSize0(v DatabaseClusterSpecEngineStorageSize0) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeDatabaseClusterSpecEngineStorageSize0 performs a merge with any union data inside the DatabaseCluster_Spec_Engine_Storage_Size, using the provided DatabaseClusterSpecEngineStorageSize0
func (t *DatabaseCluster_Spec_Engine_Storage_Size) MergeDatabaseClusterSpecEngineStorageSize0(v DatabaseClusterSpecEngineStorageSize0) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

// AsDatabaseClusterSpecEngineStorageSize1 returns the union data inside the DatabaseCluster_Spec_Engine_Storage_Size as a DatabaseClusterSpecEngineStorageSize1
func (t DatabaseCluster_Spec_Engine_Storage_Size) AsDatabaseClusterSpecEngineStorageSize1() (DatabaseClusterSpecEngineStorageSize1, error) {
	var body DatabaseClusterSpecEngineStorageSize1
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromDatabaseClusterSpecEngineStorageSize1 overwrites any union data inside the DatabaseCluster_Spec_Engine_Storage_Size as the provided DatabaseClusterSpecEngineStorageSize1
func (t *DatabaseCluster_Spec_Engine_Storage_Size) FromDatabaseClusterSpecEngineStorageSize1(v DatabaseClusterSpecEngineStorageSize1) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeDatabaseClusterSpecEngineStorageSize1 performs a merge with any union data inside the DatabaseCluster_Spec_Engine_Storage_Size, using the provided DatabaseClusterSpecEngineStorageSize1
func (t *DatabaseCluster_Spec_Engine_Storage_Size) MergeDatabaseClusterSpecEngineStorageSize1(v DatabaseClusterSpecEngineStorageSize1) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

func (t DatabaseCluster_Spec_Engine_Storage_Size) MarshalJSON() ([]byte, error) {
	b, err := t.union.MarshalJSON()
	return b, err
}

func (t *DatabaseCluster_Spec_Engine_Storage_Size) UnmarshalJSON(b []byte) error {
	err := t.union.UnmarshalJSON(b)
	return err
}

// AsDatabaseClusterSpecMonitoringResourcesLimits0 returns the union data inside the DatabaseCluster_Spec_Monitoring_Resources_Limits_AdditionalProperties as a DatabaseClusterSpecMonitoringResourcesLimits0
func (t DatabaseCluster_Spec_Monitoring_Resources_Limits_AdditionalProperties) AsDatabaseClusterSpecMonitoringResourcesLimits0() (DatabaseClusterSpecMonitoringResourcesLimits0, error) {
	var body DatabaseClusterSpecMonitoringResourcesLimits0
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromDatabaseClusterSpecMonitoringResourcesLimits0 overwrites any union data inside the DatabaseCluster_Spec_Monitoring_Resources_Limits_AdditionalProperties as the provided DatabaseClusterSpecMonitoringResourcesLimits0
func (t *DatabaseCluster_Spec_Monitoring_Resources_Limits_AdditionalProperties) FromDatabaseClusterSpecMonitoringResourcesLimits0(v DatabaseClusterSpecMonitoringResourcesLimits0) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeDatabaseClusterSpecMonitoringResourcesLimits0 performs a merge with any union data inside the DatabaseCluster_Spec_Monitoring_Resources_Limits_AdditionalProperties, using the provided DatabaseClusterSpecMonitoringResourcesLimits0
func (t *DatabaseCluster_Spec_Monitoring_Resources_Limits_AdditionalProperties) MergeDatabaseClusterSpecMonitoringResourcesLimits0(v DatabaseClusterSpecMonitoringResourcesLimits0) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

// AsDatabaseClusterSpecMonitoringResourcesLimits1 returns the union data inside the DatabaseCluster_Spec_Monitoring_Resources_Limits_AdditionalProperties as a DatabaseClusterSpecMonitoringResourcesLimits1
func (t DatabaseCluster_Spec_Monitoring_Resources_Limits_AdditionalProperties) AsDatabaseClusterSpecMonitoringResourcesLimits1() (DatabaseClusterSpecMonitoringResourcesLimits1, error) {
	var body DatabaseClusterSpecMonitoringResourcesLimits1
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromDatabaseClusterSpecMonitoringResourcesLimits1 overwrites any union data inside the DatabaseCluster_Spec_Monitoring_Resources_Limits_AdditionalProperties as the provided DatabaseClusterSpecMonitoringResourcesLimits1
func (t *DatabaseCluster_Spec_Monitoring_Resources_Limits_AdditionalProperties) FromDatabaseClusterSpecMonitoringResourcesLimits1(v DatabaseClusterSpecMonitoringResourcesLimits1) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeDatabaseClusterSpecMonitoringResourcesLimits1 performs a merge with any union data inside the DatabaseCluster_Spec_Monitoring_Resources_Limits_AdditionalProperties, using the provided DatabaseClusterSpecMonitoringResourcesLimits1
func (t *DatabaseCluster_Spec_Monitoring_Resources_Limits_AdditionalProperties) MergeDatabaseClusterSpecMonitoringResourcesLimits1(v DatabaseClusterSpecMonitoringResourcesLimits1) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

func (t DatabaseCluster_Spec_Monitoring_Resources_Limits_AdditionalProperties) MarshalJSON() ([]byte, error) {
	b, err := t.union.MarshalJSON()
	return b, err
}

func (t *DatabaseCluster_Spec_Monitoring_Resources_Limits_AdditionalProperties) UnmarshalJSON(b []byte) error {
	err := t.union.UnmarshalJSON(b)
	return err
}

// AsDatabaseClusterSpecMonitoringResourcesRequests0 returns the union data inside the DatabaseCluster_Spec_Monitoring_Resources_Requests_AdditionalProperties as a DatabaseClusterSpecMonitoringResourcesRequests0
func (t DatabaseCluster_Spec_Monitoring_Resources_Requests_AdditionalProperties) AsDatabaseClusterSpecMonitoringResourcesRequests0() (DatabaseClusterSpecMonitoringResourcesRequests0, error) {
	var body DatabaseClusterSpecMonitoringResourcesRequests0
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromDatabaseClusterSpecMonitoringResourcesRequests0 overwrites any union data inside the DatabaseCluster_Spec_Monitoring_Resources_Requests_AdditionalProperties as the provided DatabaseClusterSpecMonitoringResourcesRequests0
func (t *DatabaseCluster_Spec_Monitoring_Resources_Requests_AdditionalProperties) FromDatabaseClusterSpecMonitoringResourcesRequests0(v DatabaseClusterSpecMonitoringResourcesRequests0) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeDatabaseClusterSpecMonitoringResourcesRequests0 performs a merge with any union data inside the DatabaseCluster_Spec_Monitoring_Resources_Requests_AdditionalProperties, using the provided DatabaseClusterSpecMonitoringResourcesRequests0
func (t *DatabaseCluster_Spec_Monitoring_Resources_Requests_AdditionalProperties) MergeDatabaseClusterSpecMonitoringResourcesRequests0(v DatabaseClusterSpecMonitoringResourcesRequests0) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

// AsDatabaseClusterSpecMonitoringResourcesRequests1 returns the union data inside the DatabaseCluster_Spec_Monitoring_Resources_Requests_AdditionalProperties as a DatabaseClusterSpecMonitoringResourcesRequests1
func (t DatabaseCluster_Spec_Monitoring_Resources_Requests_AdditionalProperties) AsDatabaseClusterSpecMonitoringResourcesRequests1() (DatabaseClusterSpecMonitoringResourcesRequests1, error) {
	var body DatabaseClusterSpecMonitoringResourcesRequests1
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromDatabaseClusterSpecMonitoringResourcesRequests1 overwrites any union data inside the DatabaseCluster_Spec_Monitoring_Resources_Requests_AdditionalProperties as the provided DatabaseClusterSpecMonitoringResourcesRequests1
func (t *DatabaseCluster_Spec_Monitoring_Resources_Requests_AdditionalProperties) FromDatabaseClusterSpecMonitoringResourcesRequests1(v DatabaseClusterSpecMonitoringResourcesRequests1) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeDatabaseClusterSpecMonitoringResourcesRequests1 performs a merge with any union data inside the DatabaseCluster_Spec_Monitoring_Resources_Requests_AdditionalProperties, using the provided DatabaseClusterSpecMonitoringResourcesRequests1
func (t *DatabaseCluster_Spec_Monitoring_Resources_Requests_AdditionalProperties) MergeDatabaseClusterSpecMonitoringResourcesRequests1(v DatabaseClusterSpecMonitoringResourcesRequests1) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

func (t DatabaseCluster_Spec_Monitoring_Resources_Requests_AdditionalProperties) MarshalJSON() ([]byte, error) {
	b, err := t.union.MarshalJSON()
	return b, err
}

func (t *DatabaseCluster_Spec_Monitoring_Resources_Requests_AdditionalProperties) UnmarshalJSON(b []byte) error {
	err := t.union.UnmarshalJSON(b)
	return err
}

// AsDatabaseClusterSpecProxyResourcesCpu0 returns the union data inside the DatabaseCluster_Spec_Proxy_Resources_Cpu as a DatabaseClusterSpecProxyResourcesCpu0
func (t DatabaseCluster_Spec_Proxy_Resources_Cpu) AsDatabaseClusterSpecProxyResourcesCpu0() (DatabaseClusterSpecProxyResourcesCpu0, error) {
	var body DatabaseClusterSpecProxyResourcesCpu0
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromDatabaseClusterSpecProxyResourcesCpu0 overwrites any union data inside the DatabaseCluster_Spec_Proxy_Resources_Cpu as the provided DatabaseClusterSpecProxyResourcesCpu0
func (t *DatabaseCluster_Spec_Proxy_Resources_Cpu) FromDatabaseClusterSpecProxyResourcesCpu0(v DatabaseClusterSpecProxyResourcesCpu0) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeDatabaseClusterSpecProxyResourcesCpu0 performs a merge with any union data inside the DatabaseCluster_Spec_Proxy_Resources_Cpu, using the provided DatabaseClusterSpecProxyResourcesCpu0
func (t *DatabaseCluster_Spec_Proxy_Resources_Cpu) MergeDatabaseClusterSpecProxyResourcesCpu0(v DatabaseClusterSpecProxyResourcesCpu0) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

// AsDatabaseClusterSpecProxyResourcesCpu1 returns the union data inside the DatabaseCluster_Spec_Proxy_Resources_Cpu as a DatabaseClusterSpecProxyResourcesCpu1
func (t DatabaseCluster_Spec_Proxy_Resources_Cpu) AsDatabaseClusterSpecProxyResourcesCpu1() (DatabaseClusterSpecProxyResourcesCpu1, error) {
	var body DatabaseClusterSpecProxyResourcesCpu1
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromDatabaseClusterSpecProxyResourcesCpu1 overwrites any union data inside the DatabaseCluster_Spec_Proxy_Resources_Cpu as the provided DatabaseClusterSpecProxyResourcesCpu1
func (t *DatabaseCluster_Spec_Proxy_Resources_Cpu) FromDatabaseClusterSpecProxyResourcesCpu1(v DatabaseClusterSpecProxyResourcesCpu1) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeDatabaseClusterSpecProxyResourcesCpu1 performs a merge with any union data inside the DatabaseCluster_Spec_Proxy_Resources_Cpu, using the provided DatabaseClusterSpecProxyResourcesCpu1
func (t *DatabaseCluster_Spec_Proxy_Resources_Cpu) MergeDatabaseClusterSpecProxyResourcesCpu1(v DatabaseClusterSpecProxyResourcesCpu1) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

func (t DatabaseCluster_Spec_Proxy_Resources_Cpu) MarshalJSON() ([]byte, error) {
	b, err := t.union.MarshalJSON()
	return b, err
}

func (t *DatabaseCluster_Spec_Proxy_Resources_Cpu) UnmarshalJSON(b []byte) error {
	err := t.union.UnmarshalJSON(b)
	return err
}

// AsDatabaseClusterSpecProxyResourcesMemory0 returns the union data inside the DatabaseCluster_Spec_Proxy_Resources_Memory as a DatabaseClusterSpecProxyResourcesMemory0
func (t DatabaseCluster_Spec_Proxy_Resources_Memory) AsDatabaseClusterSpecProxyResourcesMemory0() (DatabaseClusterSpecProxyResourcesMemory0, error) {
	var body DatabaseClusterSpecProxyResourcesMemory0
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromDatabaseClusterSpecProxyResourcesMemory0 overwrites any union data inside the DatabaseCluster_Spec_Proxy_Resources_Memory as the provided DatabaseClusterSpecProxyResourcesMemory0
func (t *DatabaseCluster_Spec_Proxy_Resources_Memory) FromDatabaseClusterSpecProxyResourcesMemory0(v DatabaseClusterSpecProxyResourcesMemory0) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeDatabaseClusterSpecProxyResourcesMemory0 performs a merge with any union data inside the DatabaseCluster_Spec_Proxy_Resources_Memory, using the provided DatabaseClusterSpecProxyResourcesMemory0
func (t *DatabaseCluster_Spec_Proxy_Resources_Memory) MergeDatabaseClusterSpecProxyResourcesMemory0(v DatabaseClusterSpecProxyResourcesMemory0) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

// AsDatabaseClusterSpecProxyResourcesMemory1 returns the union data inside the DatabaseCluster_Spec_Proxy_Resources_Memory as a DatabaseClusterSpecProxyResourcesMemory1
func (t DatabaseCluster_Spec_Proxy_Resources_Memory) AsDatabaseClusterSpecProxyResourcesMemory1() (DatabaseClusterSpecProxyResourcesMemory1, error) {
	var body DatabaseClusterSpecProxyResourcesMemory1
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromDatabaseClusterSpecProxyResourcesMemory1 overwrites any union data inside the DatabaseCluster_Spec_Proxy_Resources_Memory as the provided DatabaseClusterSpecProxyResourcesMemory1
func (t *DatabaseCluster_Spec_Proxy_Resources_Memory) FromDatabaseClusterSpecProxyResourcesMemory1(v DatabaseClusterSpecProxyResourcesMemory1) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeDatabaseClusterSpecProxyResourcesMemory1 performs a merge with any union data inside the DatabaseCluster_Spec_Proxy_Resources_Memory, using the provided DatabaseClusterSpecProxyResourcesMemory1
func (t *DatabaseCluster_Spec_Proxy_Resources_Memory) MergeDatabaseClusterSpecProxyResourcesMemory1(v DatabaseClusterSpecProxyResourcesMemory1) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

func (t DatabaseCluster_Spec_Proxy_Resources_Memory) MarshalJSON() ([]byte, error) {
	b, err := t.union.MarshalJSON()
	return b, err
}

func (t *DatabaseCluster_Spec_Proxy_Resources_Memory) UnmarshalJSON(b []byte) error {
	err := t.union.UnmarshalJSON(b)
	return err
}

// RequestEditorFn  is the function signature for the RequestEditor callback function
type RequestEditorFn func(ctx context.Context, req *http.Request) error

// Doer performs HTTP requests.
//
// The standard http.Client implements this interface.
type HttpRequestDoer interface {
	Do(req *http.Request) (*http.Response, error)
}

// Client which conforms to the OpenAPI3 specification for this service.
type Client struct {
	// The endpoint of the server conforming to this interface, with scheme,
	// https://api.deepmap.com for example. This can contain a path relative
	// to the server, such as https://api.deepmap.com/dev-test, and all the
	// paths in the swagger spec will be appended to the server.
	Server string

	// Doer for performing requests, typically a *http.Client with any
	// customized settings, such as certificate chains.
	Client HttpRequestDoer

	// A list of callbacks for modifying requests which are generated before sending over
	// the network.
	RequestEditors []RequestEditorFn
}

// ClientOption allows setting custom parameters during construction
type ClientOption func(*Client) error

// Creates a new Client, with reasonable defaults
func NewClient(server string, opts ...ClientOption) (*Client, error) {
	// create a client with sane default values
	client := Client{
		Server: server,
	}
	// mutate client and add all optional params
	for _, o := range opts {
		if err := o(&client); err != nil {
			return nil, err
		}
	}
	// ensure the server URL always has a trailing slash
	if !strings.HasSuffix(client.Server, "/") {
		client.Server += "/"
	}
	// create httpClient, if not already present
	if client.Client == nil {
		client.Client = &http.Client{}
	}
	return &client, nil
}

// WithHTTPClient allows overriding the default Doer, which is
// automatically created using http.Client. This is useful for tests.
func WithHTTPClient(doer HttpRequestDoer) ClientOption {
	return func(c *Client) error {
		c.Client = doer
		return nil
	}
}

// WithRequestEditorFn allows setting up a callback function, which will be
// called right before sending the request. This can be used to mutate the request.
func WithRequestEditorFn(fn RequestEditorFn) ClientOption {
	return func(c *Client) error {
		c.RequestEditors = append(c.RequestEditors, fn)
		return nil
	}
}

// The interface specification for the client above.
type ClientInterface interface {
	// GetKubernetesClusterInfo request
	GetKubernetesClusterInfo(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error)

	// ListNamespaces request
	ListNamespaces(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error)

	// ListBackupStorages request
	ListBackupStorages(ctx context.Context, namespace string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// CreateBackupStorageWithBody request with any body
	CreateBackupStorageWithBody(ctx context.Context, namespace string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	CreateBackupStorage(ctx context.Context, namespace string, body CreateBackupStorageJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// DeleteBackupStorage request
	DeleteBackupStorage(ctx context.Context, namespace string, name string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetBackupStorage request
	GetBackupStorage(ctx context.Context, namespace string, name string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// UpdateBackupStorageWithBody request with any body
	UpdateBackupStorageWithBody(ctx context.Context, namespace string, name string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	UpdateBackupStorage(ctx context.Context, namespace string, name string, body UpdateBackupStorageJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// CreateDatabaseClusterBackupWithBody request with any body
	CreateDatabaseClusterBackupWithBody(ctx context.Context, namespace string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	CreateDatabaseClusterBackup(ctx context.Context, namespace string, body CreateDatabaseClusterBackupJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// DeleteDatabaseClusterBackup request
	DeleteDatabaseClusterBackup(ctx context.Context, namespace string, name string, params *DeleteDatabaseClusterBackupParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetDatabaseClusterBackup request
	GetDatabaseClusterBackup(ctx context.Context, namespace string, name string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// CreateDatabaseClusterRestoreWithBody request with any body
	CreateDatabaseClusterRestoreWithBody(ctx context.Context, namespace string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	CreateDatabaseClusterRestore(ctx context.Context, namespace string, body CreateDatabaseClusterRestoreJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// DeleteDatabaseClusterRestore request
	DeleteDatabaseClusterRestore(ctx context.Context, namespace string, name string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetDatabaseClusterRestore request
	GetDatabaseClusterRestore(ctx context.Context, namespace string, name string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// UpdateDatabaseClusterRestoreWithBody request with any body
	UpdateDatabaseClusterRestoreWithBody(ctx context.Context, namespace string, name string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	UpdateDatabaseClusterRestore(ctx context.Context, namespace string, name string, body UpdateDatabaseClusterRestoreJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// ListDatabaseClusters request
	ListDatabaseClusters(ctx context.Context, namespace string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// CreateDatabaseClusterWithBody request with any body
	CreateDatabaseClusterWithBody(ctx context.Context, namespace string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	CreateDatabaseCluster(ctx context.Context, namespace string, body CreateDatabaseClusterJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// ListDatabaseClusterBackups request
	ListDatabaseClusterBackups(ctx context.Context, namespace string, clusterName string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// ListDatabaseClusterRestores request
	ListDatabaseClusterRestores(ctx context.Context, namespace string, clusterName string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// DeleteDatabaseCluster request
	DeleteDatabaseCluster(ctx context.Context, namespace string, name string, params *DeleteDatabaseClusterParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetDatabaseCluster request
	GetDatabaseCluster(ctx context.Context, namespace string, name string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// UpdateDatabaseClusterWithBody request with any body
	UpdateDatabaseClusterWithBody(ctx context.Context, namespace string, name string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	UpdateDatabaseCluster(ctx context.Context, namespace string, name string, body UpdateDatabaseClusterJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetDatabaseClusterComponents request
	GetDatabaseClusterComponents(ctx context.Context, namespace string, name string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetDatabaseClusterCredentials request
	GetDatabaseClusterCredentials(ctx context.Context, namespace string, name string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetDatabaseClusterPitr request
	GetDatabaseClusterPitr(ctx context.Context, namespace string, name string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// ListDatabaseEngines request
	ListDatabaseEngines(ctx context.Context, namespace string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetUpgradePlan request
	GetUpgradePlan(ctx context.Context, namespace string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// ApproveUpgradePlanWithBody request with any body
	ApproveUpgradePlanWithBody(ctx context.Context, namespace string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	ApproveUpgradePlan(ctx context.Context, namespace string, body ApproveUpgradePlanJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetDatabaseEngine request
	GetDatabaseEngine(ctx context.Context, namespace string, name string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// UpdateDatabaseEngineWithBody request with any body
	UpdateDatabaseEngineWithBody(ctx context.Context, namespace string, name string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	UpdateDatabaseEngine(ctx context.Context, namespace string, name string, body UpdateDatabaseEngineJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// ListMonitoringInstances request
	ListMonitoringInstances(ctx context.Context, namespace string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// CreateMonitoringInstanceWithBody request with any body
	CreateMonitoringInstanceWithBody(ctx context.Context, namespace string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	CreateMonitoringInstance(ctx context.Context, namespace string, body CreateMonitoringInstanceJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// DeleteMonitoringInstance request
	DeleteMonitoringInstance(ctx context.Context, namespace string, name string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetMonitoringInstance request
	GetMonitoringInstance(ctx context.Context, namespace string, name string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// UpdateMonitoringInstanceWithBody request with any body
	UpdateMonitoringInstanceWithBody(ctx context.Context, namespace string, name string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	UpdateMonitoringInstance(ctx context.Context, namespace string, name string, body UpdateMonitoringInstanceJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetUserPermissions request
	GetUserPermissions(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error)

	// ListPodSchedulingPolicy request
	ListPodSchedulingPolicy(ctx context.Context, params *ListPodSchedulingPolicyParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// CreatePodSchedulingPolicyWithBody request with any body
	CreatePodSchedulingPolicyWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	CreatePodSchedulingPolicy(ctx context.Context, body CreatePodSchedulingPolicyJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// DeletePodSchedulingPolicy request
	DeletePodSchedulingPolicy(ctx context.Context, policyName string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetPodSchedulingPolicy request
	GetPodSchedulingPolicy(ctx context.Context, policyName string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// UpdatePodSchedulingPolicyWithBody request with any body
	UpdatePodSchedulingPolicyWithBody(ctx context.Context, policyName string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	UpdatePodSchedulingPolicy(ctx context.Context, policyName string, body UpdatePodSchedulingPolicyJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetKubernetesClusterResources request
	GetKubernetesClusterResources(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error)

	// DeleteSession request
	DeleteSession(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error)

	// CreateSessionWithBody request with any body
	CreateSessionWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	CreateSession(ctx context.Context, body CreateSessionJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetSettings request
	GetSettings(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error)

	// VersionInfo request
	VersionInfo(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error)
}

func (c *Client) GetKubernetesClusterInfo(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetKubernetesClusterInfoRequest(c.Server)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) ListNamespaces(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewListNamespacesRequest(c.Server)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) ListBackupStorages(ctx context.Context, namespace string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewListBackupStoragesRequest(c.Server, namespace)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) CreateBackupStorageWithBody(ctx context.Context, namespace string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewCreateBackupStorageRequestWithBody(c.Server, namespace, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) CreateBackupStorage(ctx context.Context, namespace string, body CreateBackupStorageJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewCreateBackupStorageRequest(c.Server, namespace, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) DeleteBackupStorage(ctx context.Context, namespace string, name string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewDeleteBackupStorageRequest(c.Server, namespace, name)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetBackupStorage(ctx context.Context, namespace string, name string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetBackupStorageRequest(c.Server, namespace, name)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) UpdateBackupStorageWithBody(ctx context.Context, namespace string, name string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewUpdateBackupStorageRequestWithBody(c.Server, namespace, name, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) UpdateBackupStorage(ctx context.Context, namespace string, name string, body UpdateBackupStorageJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewUpdateBackupStorageRequest(c.Server, namespace, name, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) CreateDatabaseClusterBackupWithBody(ctx context.Context, namespace string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewCreateDatabaseClusterBackupRequestWithBody(c.Server, namespace, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) CreateDatabaseClusterBackup(ctx context.Context, namespace string, body CreateDatabaseClusterBackupJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewCreateDatabaseClusterBackupRequest(c.Server, namespace, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) DeleteDatabaseClusterBackup(ctx context.Context, namespace string, name string, params *DeleteDatabaseClusterBackupParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewDeleteDatabaseClusterBackupRequest(c.Server, namespace, name, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetDatabaseClusterBackup(ctx context.Context, namespace string, name string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetDatabaseClusterBackupRequest(c.Server, namespace, name)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) CreateDatabaseClusterRestoreWithBody(ctx context.Context, namespace string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewCreateDatabaseClusterRestoreRequestWithBody(c.Server, namespace, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) CreateDatabaseClusterRestore(ctx context.Context, namespace string, body CreateDatabaseClusterRestoreJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewCreateDatabaseClusterRestoreRequest(c.Server, namespace, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) DeleteDatabaseClusterRestore(ctx context.Context, namespace string, name string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewDeleteDatabaseClusterRestoreRequest(c.Server, namespace, name)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetDatabaseClusterRestore(ctx context.Context, namespace string, name string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetDatabaseClusterRestoreRequest(c.Server, namespace, name)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) UpdateDatabaseClusterRestoreWithBody(ctx context.Context, namespace string, name string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewUpdateDatabaseClusterRestoreRequestWithBody(c.Server, namespace, name, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) UpdateDatabaseClusterRestore(ctx context.Context, namespace string, name string, body UpdateDatabaseClusterRestoreJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewUpdateDatabaseClusterRestoreRequest(c.Server, namespace, name, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) ListDatabaseClusters(ctx context.Context, namespace string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewListDatabaseClustersRequest(c.Server, namespace)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) CreateDatabaseClusterWithBody(ctx context.Context, namespace string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewCreateDatabaseClusterRequestWithBody(c.Server, namespace, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) CreateDatabaseCluster(ctx context.Context, namespace string, body CreateDatabaseClusterJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewCreateDatabaseClusterRequest(c.Server, namespace, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) ListDatabaseClusterBackups(ctx context.Context, namespace string, clusterName string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewListDatabaseClusterBackupsRequest(c.Server, namespace, clusterName)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) ListDatabaseClusterRestores(ctx context.Context, namespace string, clusterName string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewListDatabaseClusterRestoresRequest(c.Server, namespace, clusterName)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) DeleteDatabaseCluster(ctx context.Context, namespace string, name string, params *DeleteDatabaseClusterParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewDeleteDatabaseClusterRequest(c.Server, namespace, name, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetDatabaseCluster(ctx context.Context, namespace string, name string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetDatabaseClusterRequest(c.Server, namespace, name)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) UpdateDatabaseClusterWithBody(ctx context.Context, namespace string, name string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewUpdateDatabaseClusterRequestWithBody(c.Server, namespace, name, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) UpdateDatabaseCluster(ctx context.Context, namespace string, name string, body UpdateDatabaseClusterJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewUpdateDatabaseClusterRequest(c.Server, namespace, name, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetDatabaseClusterComponents(ctx context.Context, namespace string, name string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetDatabaseClusterComponentsRequest(c.Server, namespace, name)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetDatabaseClusterCredentials(ctx context.Context, namespace string, name string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetDatabaseClusterCredentialsRequest(c.Server, namespace, name)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetDatabaseClusterPitr(ctx context.Context, namespace string, name string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetDatabaseClusterPitrRequest(c.Server, namespace, name)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) ListDatabaseEngines(ctx context.Context, namespace string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewListDatabaseEnginesRequest(c.Server, namespace)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetUpgradePlan(ctx context.Context, namespace string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetUpgradePlanRequest(c.Server, namespace)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) ApproveUpgradePlanWithBody(ctx context.Context, namespace string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewApproveUpgradePlanRequestWithBody(c.Server, namespace, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) ApproveUpgradePlan(ctx context.Context, namespace string, body ApproveUpgradePlanJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewApproveUpgradePlanRequest(c.Server, namespace, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetDatabaseEngine(ctx context.Context, namespace string, name string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetDatabaseEngineRequest(c.Server, namespace, name)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) UpdateDatabaseEngineWithBody(ctx context.Context, namespace string, name string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewUpdateDatabaseEngineRequestWithBody(c.Server, namespace, name, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) UpdateDatabaseEngine(ctx context.Context, namespace string, name string, body UpdateDatabaseEngineJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewUpdateDatabaseEngineRequest(c.Server, namespace, name, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) ListMonitoringInstances(ctx context.Context, namespace string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewListMonitoringInstancesRequest(c.Server, namespace)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) CreateMonitoringInstanceWithBody(ctx context.Context, namespace string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewCreateMonitoringInstanceRequestWithBody(c.Server, namespace, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) CreateMonitoringInstance(ctx context.Context, namespace string, body CreateMonitoringInstanceJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewCreateMonitoringInstanceRequest(c.Server, namespace, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) DeleteMonitoringInstance(ctx context.Context, namespace string, name string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewDeleteMonitoringInstanceRequest(c.Server, namespace, name)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetMonitoringInstance(ctx context.Context, namespace string, name string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetMonitoringInstanceRequest(c.Server, namespace, name)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) UpdateMonitoringInstanceWithBody(ctx context.Context, namespace string, name string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewUpdateMonitoringInstanceRequestWithBody(c.Server, namespace, name, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) UpdateMonitoringInstance(ctx context.Context, namespace string, name string, body UpdateMonitoringInstanceJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewUpdateMonitoringInstanceRequest(c.Server, namespace, name, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetUserPermissions(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetUserPermissionsRequest(c.Server)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) ListPodSchedulingPolicy(ctx context.Context, params *ListPodSchedulingPolicyParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewListPodSchedulingPolicyRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) CreatePodSchedulingPolicyWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewCreatePodSchedulingPolicyRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) CreatePodSchedulingPolicy(ctx context.Context, body CreatePodSchedulingPolicyJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewCreatePodSchedulingPolicyRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) DeletePodSchedulingPolicy(ctx context.Context, policyName string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewDeletePodSchedulingPolicyRequest(c.Server, policyName)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetPodSchedulingPolicy(ctx context.Context, policyName string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetPodSchedulingPolicyRequest(c.Server, policyName)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) UpdatePodSchedulingPolicyWithBody(ctx context.Context, policyName string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewUpdatePodSchedulingPolicyRequestWithBody(c.Server, policyName, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) UpdatePodSchedulingPolicy(ctx context.Context, policyName string, body UpdatePodSchedulingPolicyJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewUpdatePodSchedulingPolicyRequest(c.Server, policyName, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetKubernetesClusterResources(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetKubernetesClusterResourcesRequest(c.Server)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) DeleteSession(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewDeleteSessionRequest(c.Server)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) CreateSessionWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewCreateSessionRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) CreateSession(ctx context.Context, body CreateSessionJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewCreateSessionRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetSettings(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetSettingsRequest(c.Server)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) VersionInfo(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewVersionInfoRequest(c.Server)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

// NewGetKubernetesClusterInfoRequest generates requests for GetKubernetesClusterInfo
func NewGetKubernetesClusterInfoRequest(server string) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/cluster-info")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewListNamespacesRequest generates requests for ListNamespaces
func NewListNamespacesRequest(server string) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/namespaces")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewListBackupStoragesRequest generates requests for ListBackupStorages
func NewListBackupStoragesRequest(server string, namespace string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "namespace", runtime.ParamLocationPath, namespace)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/namespaces/%s/backup-storages", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewCreateBackupStorageRequest calls the generic CreateBackupStorage builder with application/json body
func NewCreateBackupStorageRequest(server string, namespace string, body CreateBackupStorageJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewCreateBackupStorageRequestWithBody(server, namespace, "application/json", bodyReader)
}

// NewCreateBackupStorageRequestWithBody generates requests for CreateBackupStorage with any type of body
func NewCreateBackupStorageRequestWithBody(server string, namespace string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "namespace", runtime.ParamLocationPath, namespace)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/namespaces/%s/backup-storages", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewDeleteBackupStorageRequest generates requests for DeleteBackupStorage
func NewDeleteBackupStorageRequest(server string, namespace string, name string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "namespace", runtime.ParamLocationPath, namespace)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "name", runtime.ParamLocationPath, name)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/namespaces/%s/backup-storages/%s", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("DELETE", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetBackupStorageRequest generates requests for GetBackupStorage
func NewGetBackupStorageRequest(server string, namespace string, name string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "namespace", runtime.ParamLocationPath, namespace)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "name", runtime.ParamLocationPath, name)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/namespaces/%s/backup-storages/%s", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewUpdateBackupStorageRequest calls the generic UpdateBackupStorage builder with application/json body
func NewUpdateBackupStorageRequest(server string, namespace string, name string, body UpdateBackupStorageJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewUpdateBackupStorageRequestWithBody(server, namespace, name, "application/json", bodyReader)
}

// NewUpdateBackupStorageRequestWithBody generates requests for UpdateBackupStorage with any type of body
func NewUpdateBackupStorageRequestWithBody(server string, namespace string, name string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "namespace", runtime.ParamLocationPath, namespace)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "name", runtime.ParamLocationPath, name)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/namespaces/%s/backup-storages/%s", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PATCH", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewCreateDatabaseClusterBackupRequest calls the generic CreateDatabaseClusterBackup builder with application/json body
func NewCreateDatabaseClusterBackupRequest(server string, namespace string, body CreateDatabaseClusterBackupJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewCreateDatabaseClusterBackupRequestWithBody(server, namespace, "application/json", bodyReader)
}

// NewCreateDatabaseClusterBackupRequestWithBody generates requests for CreateDatabaseClusterBackup with any type of body
func NewCreateDatabaseClusterBackupRequestWithBody(server string, namespace string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "namespace", runtime.ParamLocationPath, namespace)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/namespaces/%s/database-cluster-backups", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewDeleteDatabaseClusterBackupRequest generates requests for DeleteDatabaseClusterBackup
func NewDeleteDatabaseClusterBackupRequest(server string, namespace string, name string, params *DeleteDatabaseClusterBackupParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "namespace", runtime.ParamLocationPath, namespace)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "name", runtime.ParamLocationPath, name)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/namespaces/%s/database-cluster-backups/%s", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.CleanupBackupStorage != nil {
			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "cleanupBackupStorage", runtime.ParamLocationQuery, *params.CleanupBackupStorage); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}
		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("DELETE", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetDatabaseClusterBackupRequest generates requests for GetDatabaseClusterBackup
func NewGetDatabaseClusterBackupRequest(server string, namespace string, name string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "namespace", runtime.ParamLocationPath, namespace)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "name", runtime.ParamLocationPath, name)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/namespaces/%s/database-cluster-backups/%s", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewCreateDatabaseClusterRestoreRequest calls the generic CreateDatabaseClusterRestore builder with application/json body
func NewCreateDatabaseClusterRestoreRequest(server string, namespace string, body CreateDatabaseClusterRestoreJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewCreateDatabaseClusterRestoreRequestWithBody(server, namespace, "application/json", bodyReader)
}

// NewCreateDatabaseClusterRestoreRequestWithBody generates requests for CreateDatabaseClusterRestore with any type of body
func NewCreateDatabaseClusterRestoreRequestWithBody(server string, namespace string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "namespace", runtime.ParamLocationPath, namespace)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/namespaces/%s/database-cluster-restores", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewDeleteDatabaseClusterRestoreRequest generates requests for DeleteDatabaseClusterRestore
func NewDeleteDatabaseClusterRestoreRequest(server string, namespace string, name string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "namespace", runtime.ParamLocationPath, namespace)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "name", runtime.ParamLocationPath, name)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/namespaces/%s/database-cluster-restores/%s", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("DELETE", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetDatabaseClusterRestoreRequest generates requests for GetDatabaseClusterRestore
func NewGetDatabaseClusterRestoreRequest(server string, namespace string, name string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "namespace", runtime.ParamLocationPath, namespace)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "name", runtime.ParamLocationPath, name)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/namespaces/%s/database-cluster-restores/%s", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewUpdateDatabaseClusterRestoreRequest calls the generic UpdateDatabaseClusterRestore builder with application/json body
func NewUpdateDatabaseClusterRestoreRequest(server string, namespace string, name string, body UpdateDatabaseClusterRestoreJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewUpdateDatabaseClusterRestoreRequestWithBody(server, namespace, name, "application/json", bodyReader)
}

// NewUpdateDatabaseClusterRestoreRequestWithBody generates requests for UpdateDatabaseClusterRestore with any type of body
func NewUpdateDatabaseClusterRestoreRequestWithBody(server string, namespace string, name string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "namespace", runtime.ParamLocationPath, namespace)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "name", runtime.ParamLocationPath, name)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/namespaces/%s/database-cluster-restores/%s", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PUT", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewListDatabaseClustersRequest generates requests for ListDatabaseClusters
func NewListDatabaseClustersRequest(server string, namespace string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "namespace", runtime.ParamLocationPath, namespace)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/namespaces/%s/database-clusters", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewCreateDatabaseClusterRequest calls the generic CreateDatabaseCluster builder with application/json body
func NewCreateDatabaseClusterRequest(server string, namespace string, body CreateDatabaseClusterJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewCreateDatabaseClusterRequestWithBody(server, namespace, "application/json", bodyReader)
}

// NewCreateDatabaseClusterRequestWithBody generates requests for CreateDatabaseCluster with any type of body
func NewCreateDatabaseClusterRequestWithBody(server string, namespace string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "namespace", runtime.ParamLocationPath, namespace)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/namespaces/%s/database-clusters", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewListDatabaseClusterBackupsRequest generates requests for ListDatabaseClusterBackups
func NewListDatabaseClusterBackupsRequest(server string, namespace string, clusterName string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "namespace", runtime.ParamLocationPath, namespace)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "cluster-name", runtime.ParamLocationPath, clusterName)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/namespaces/%s/database-clusters/%s/backups", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewListDatabaseClusterRestoresRequest generates requests for ListDatabaseClusterRestores
func NewListDatabaseClusterRestoresRequest(server string, namespace string, clusterName string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "namespace", runtime.ParamLocationPath, namespace)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "cluster-name", runtime.ParamLocationPath, clusterName)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/namespaces/%s/database-clusters/%s/restores", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewDeleteDatabaseClusterRequest generates requests for DeleteDatabaseCluster
func NewDeleteDatabaseClusterRequest(server string, namespace string, name string, params *DeleteDatabaseClusterParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "namespace", runtime.ParamLocationPath, namespace)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "name", runtime.ParamLocationPath, name)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/namespaces/%s/database-clusters/%s", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.CleanupBackupStorage != nil {
			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "cleanupBackupStorage", runtime.ParamLocationQuery, *params.CleanupBackupStorage); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}
		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("DELETE", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetDatabaseClusterRequest generates requests for GetDatabaseCluster
func NewGetDatabaseClusterRequest(server string, namespace string, name string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "namespace", runtime.ParamLocationPath, namespace)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "name", runtime.ParamLocationPath, name)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/namespaces/%s/database-clusters/%s", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewUpdateDatabaseClusterRequest calls the generic UpdateDatabaseCluster builder with application/json body
func NewUpdateDatabaseClusterRequest(server string, namespace string, name string, body UpdateDatabaseClusterJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewUpdateDatabaseClusterRequestWithBody(server, namespace, name, "application/json", bodyReader)
}

// NewUpdateDatabaseClusterRequestWithBody generates requests for UpdateDatabaseCluster with any type of body
func NewUpdateDatabaseClusterRequestWithBody(server string, namespace string, name string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "namespace", runtime.ParamLocationPath, namespace)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "name", runtime.ParamLocationPath, name)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/namespaces/%s/database-clusters/%s", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PUT", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewGetDatabaseClusterComponentsRequest generates requests for GetDatabaseClusterComponents
func NewGetDatabaseClusterComponentsRequest(server string, namespace string, name string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "namespace", runtime.ParamLocationPath, namespace)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "name", runtime.ParamLocationPath, name)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/namespaces/%s/database-clusters/%s/components", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetDatabaseClusterCredentialsRequest generates requests for GetDatabaseClusterCredentials
func NewGetDatabaseClusterCredentialsRequest(server string, namespace string, name string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "namespace", runtime.ParamLocationPath, namespace)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "name", runtime.ParamLocationPath, name)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/namespaces/%s/database-clusters/%s/credentials", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetDatabaseClusterPitrRequest generates requests for GetDatabaseClusterPitr
func NewGetDatabaseClusterPitrRequest(server string, namespace string, name string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "namespace", runtime.ParamLocationPath, namespace)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "name", runtime.ParamLocationPath, name)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/namespaces/%s/database-clusters/%s/pitr", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewListDatabaseEnginesRequest generates requests for ListDatabaseEngines
func NewListDatabaseEnginesRequest(server string, namespace string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "namespace", runtime.ParamLocationPath, namespace)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/namespaces/%s/database-engines", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetUpgradePlanRequest generates requests for GetUpgradePlan
func NewGetUpgradePlanRequest(server string, namespace string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "namespace", runtime.ParamLocationPath, namespace)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/namespaces/%s/database-engines/upgrade-plan", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewApproveUpgradePlanRequest calls the generic ApproveUpgradePlan builder with application/json body
func NewApproveUpgradePlanRequest(server string, namespace string, body ApproveUpgradePlanJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewApproveUpgradePlanRequestWithBody(server, namespace, "application/json", bodyReader)
}

// NewApproveUpgradePlanRequestWithBody generates requests for ApproveUpgradePlan with any type of body
func NewApproveUpgradePlanRequestWithBody(server string, namespace string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "namespace", runtime.ParamLocationPath, namespace)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/namespaces/%s/database-engines/upgrade-plan/approval", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewGetDatabaseEngineRequest generates requests for GetDatabaseEngine
func NewGetDatabaseEngineRequest(server string, namespace string, name string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "namespace", runtime.ParamLocationPath, namespace)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "name", runtime.ParamLocationPath, name)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/namespaces/%s/database-engines/%s", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewUpdateDatabaseEngineRequest calls the generic UpdateDatabaseEngine builder with application/json body
func NewUpdateDatabaseEngineRequest(server string, namespace string, name string, body UpdateDatabaseEngineJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewUpdateDatabaseEngineRequestWithBody(server, namespace, name, "application/json", bodyReader)
}

// NewUpdateDatabaseEngineRequestWithBody generates requests for UpdateDatabaseEngine with any type of body
func NewUpdateDatabaseEngineRequestWithBody(server string, namespace string, name string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "namespace", runtime.ParamLocationPath, namespace)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "name", runtime.ParamLocationPath, name)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/namespaces/%s/database-engines/%s", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PUT", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewListMonitoringInstancesRequest generates requests for ListMonitoringInstances
func NewListMonitoringInstancesRequest(server string, namespace string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "namespace", runtime.ParamLocationPath, namespace)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/namespaces/%s/monitoring-instances", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewCreateMonitoringInstanceRequest calls the generic CreateMonitoringInstance builder with application/json body
func NewCreateMonitoringInstanceRequest(server string, namespace string, body CreateMonitoringInstanceJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewCreateMonitoringInstanceRequestWithBody(server, namespace, "application/json", bodyReader)
}

// NewCreateMonitoringInstanceRequestWithBody generates requests for CreateMonitoringInstance with any type of body
func NewCreateMonitoringInstanceRequestWithBody(server string, namespace string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "namespace", runtime.ParamLocationPath, namespace)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/namespaces/%s/monitoring-instances", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewDeleteMonitoringInstanceRequest generates requests for DeleteMonitoringInstance
func NewDeleteMonitoringInstanceRequest(server string, namespace string, name string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "namespace", runtime.ParamLocationPath, namespace)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "name", runtime.ParamLocationPath, name)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/namespaces/%s/monitoring-instances/%s", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("DELETE", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetMonitoringInstanceRequest generates requests for GetMonitoringInstance
func NewGetMonitoringInstanceRequest(server string, namespace string, name string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "namespace", runtime.ParamLocationPath, namespace)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "name", runtime.ParamLocationPath, name)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/namespaces/%s/monitoring-instances/%s", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewUpdateMonitoringInstanceRequest calls the generic UpdateMonitoringInstance builder with application/json body
func NewUpdateMonitoringInstanceRequest(server string, namespace string, name string, body UpdateMonitoringInstanceJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewUpdateMonitoringInstanceRequestWithBody(server, namespace, name, "application/json", bodyReader)
}

// NewUpdateMonitoringInstanceRequestWithBody generates requests for UpdateMonitoringInstance with any type of body
func NewUpdateMonitoringInstanceRequestWithBody(server string, namespace string, name string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "namespace", runtime.ParamLocationPath, namespace)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "name", runtime.ParamLocationPath, name)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/namespaces/%s/monitoring-instances/%s", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PATCH", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewGetUserPermissionsRequest generates requests for GetUserPermissions
func NewGetUserPermissionsRequest(server string) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/permissions")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewListPodSchedulingPolicyRequest generates requests for ListPodSchedulingPolicy
func NewListPodSchedulingPolicyRequest(server string, params *ListPodSchedulingPolicyParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/pod-scheduling-policies")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.EngineType != nil {
			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "engineType", runtime.ParamLocationQuery, *params.EngineType); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}
		}

		if params.HasRules != nil {
			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "hasRules", runtime.ParamLocationQuery, *params.HasRules); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}
		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewCreatePodSchedulingPolicyRequest calls the generic CreatePodSchedulingPolicy builder with application/json body
func NewCreatePodSchedulingPolicyRequest(server string, body CreatePodSchedulingPolicyJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewCreatePodSchedulingPolicyRequestWithBody(server, "application/json", bodyReader)
}

// NewCreatePodSchedulingPolicyRequestWithBody generates requests for CreatePodSchedulingPolicy with any type of body
func NewCreatePodSchedulingPolicyRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/pod-scheduling-policies")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewDeletePodSchedulingPolicyRequest generates requests for DeletePodSchedulingPolicy
func NewDeletePodSchedulingPolicyRequest(server string, policyName string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "policy-name", runtime.ParamLocationPath, policyName)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/pod-scheduling-policies/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("DELETE", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetPodSchedulingPolicyRequest generates requests for GetPodSchedulingPolicy
func NewGetPodSchedulingPolicyRequest(server string, policyName string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "policy-name", runtime.ParamLocationPath, policyName)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/pod-scheduling-policies/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewUpdatePodSchedulingPolicyRequest calls the generic UpdatePodSchedulingPolicy builder with application/json body
func NewUpdatePodSchedulingPolicyRequest(server string, policyName string, body UpdatePodSchedulingPolicyJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewUpdatePodSchedulingPolicyRequestWithBody(server, policyName, "application/json", bodyReader)
}

// NewUpdatePodSchedulingPolicyRequestWithBody generates requests for UpdatePodSchedulingPolicy with any type of body
func NewUpdatePodSchedulingPolicyRequestWithBody(server string, policyName string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "policy-name", runtime.ParamLocationPath, policyName)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/pod-scheduling-policies/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PUT", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewGetKubernetesClusterResourcesRequest generates requests for GetKubernetesClusterResources
func NewGetKubernetesClusterResourcesRequest(server string) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/resources")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewDeleteSessionRequest generates requests for DeleteSession
func NewDeleteSessionRequest(server string) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/session")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("DELETE", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewCreateSessionRequest calls the generic CreateSession builder with application/json body
func NewCreateSessionRequest(server string, body CreateSessionJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewCreateSessionRequestWithBody(server, "application/json", bodyReader)
}

// NewCreateSessionRequestWithBody generates requests for CreateSession with any type of body
func NewCreateSessionRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/session")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewGetSettingsRequest generates requests for GetSettings
func NewGetSettingsRequest(server string) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/settings")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewVersionInfoRequest generates requests for VersionInfo
func NewVersionInfoRequest(server string) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/version")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

func (c *Client) applyEditors(ctx context.Context, req *http.Request, additionalEditors []RequestEditorFn) error {
	for _, r := range c.RequestEditors {
		if err := r(ctx, req); err != nil {
			return err
		}
	}
	for _, r := range additionalEditors {
		if err := r(ctx, req); err != nil {
			return err
		}
	}
	return nil
}

// ClientWithResponses builds on ClientInterface to offer response payloads
type ClientWithResponses struct {
	ClientInterface
}

// NewClientWithResponses creates a new ClientWithResponses, which wraps
// Client with return type handling
func NewClientWithResponses(server string, opts ...ClientOption) (*ClientWithResponses, error) {
	client, err := NewClient(server, opts...)
	if err != nil {
		return nil, err
	}
	return &ClientWithResponses{client}, nil
}

// WithBaseURL overrides the baseURL.
func WithBaseURL(baseURL string) ClientOption {
	return func(c *Client) error {
		newBaseURL, err := url.Parse(baseURL)
		if err != nil {
			return err
		}
		c.Server = newBaseURL.String()
		return nil
	}
}

// ClientWithResponsesInterface is the interface specification for the client with responses above.
type ClientWithResponsesInterface interface {
	// GetKubernetesClusterInfoWithResponse request
	GetKubernetesClusterInfoWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*GetKubernetesClusterInfoResponse, error)

	// ListNamespacesWithResponse request
	ListNamespacesWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*ListNamespacesResponse, error)

	// ListBackupStoragesWithResponse request
	ListBackupStoragesWithResponse(ctx context.Context, namespace string, reqEditors ...RequestEditorFn) (*ListBackupStoragesResponse, error)

	// CreateBackupStorageWithBodyWithResponse request with any body
	CreateBackupStorageWithBodyWithResponse(ctx context.Context, namespace string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*CreateBackupStorageResponse, error)

	CreateBackupStorageWithResponse(ctx context.Context, namespace string, body CreateBackupStorageJSONRequestBody, reqEditors ...RequestEditorFn) (*CreateBackupStorageResponse, error)

	// DeleteBackupStorageWithResponse request
	DeleteBackupStorageWithResponse(ctx context.Context, namespace string, name string, reqEditors ...RequestEditorFn) (*DeleteBackupStorageResponse, error)

	// GetBackupStorageWithResponse request
	GetBackupStorageWithResponse(ctx context.Context, namespace string, name string, reqEditors ...RequestEditorFn) (*GetBackupStorageResponse, error)

	// UpdateBackupStorageWithBodyWithResponse request with any body
	UpdateBackupStorageWithBodyWithResponse(ctx context.Context, namespace string, name string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*UpdateBackupStorageResponse, error)

	UpdateBackupStorageWithResponse(ctx context.Context, namespace string, name string, body UpdateBackupStorageJSONRequestBody, reqEditors ...RequestEditorFn) (*UpdateBackupStorageResponse, error)

	// CreateDatabaseClusterBackupWithBodyWithResponse request with any body
	CreateDatabaseClusterBackupWithBodyWithResponse(ctx context.Context, namespace string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*CreateDatabaseClusterBackupResponse, error)

	CreateDatabaseClusterBackupWithResponse(ctx context.Context, namespace string, body CreateDatabaseClusterBackupJSONRequestBody, reqEditors ...RequestEditorFn) (*CreateDatabaseClusterBackupResponse, error)

	// DeleteDatabaseClusterBackupWithResponse request
	DeleteDatabaseClusterBackupWithResponse(ctx context.Context, namespace string, name string, params *DeleteDatabaseClusterBackupParams, reqEditors ...RequestEditorFn) (*DeleteDatabaseClusterBackupResponse, error)

	// GetDatabaseClusterBackupWithResponse request
	GetDatabaseClusterBackupWithResponse(ctx context.Context, namespace string, name string, reqEditors ...RequestEditorFn) (*GetDatabaseClusterBackupResponse, error)

	// CreateDatabaseClusterRestoreWithBodyWithResponse request with any body
	CreateDatabaseClusterRestoreWithBodyWithResponse(ctx context.Context, namespace string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*CreateDatabaseClusterRestoreResponse, error)

	CreateDatabaseClusterRestoreWithResponse(ctx context.Context, namespace string, body CreateDatabaseClusterRestoreJSONRequestBody, reqEditors ...RequestEditorFn) (*CreateDatabaseClusterRestoreResponse, error)

	// DeleteDatabaseClusterRestoreWithResponse request
	DeleteDatabaseClusterRestoreWithResponse(ctx context.Context, namespace string, name string, reqEditors ...RequestEditorFn) (*DeleteDatabaseClusterRestoreResponse, error)

	// GetDatabaseClusterRestoreWithResponse request
	GetDatabaseClusterRestoreWithResponse(ctx context.Context, namespace string, name string, reqEditors ...RequestEditorFn) (*GetDatabaseClusterRestoreResponse, error)

	// UpdateDatabaseClusterRestoreWithBodyWithResponse request with any body
	UpdateDatabaseClusterRestoreWithBodyWithResponse(ctx context.Context, namespace string, name string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*UpdateDatabaseClusterRestoreResponse, error)

	UpdateDatabaseClusterRestoreWithResponse(ctx context.Context, namespace string, name string, body UpdateDatabaseClusterRestoreJSONRequestBody, reqEditors ...RequestEditorFn) (*UpdateDatabaseClusterRestoreResponse, error)

	// ListDatabaseClustersWithResponse request
	ListDatabaseClustersWithResponse(ctx context.Context, namespace string, reqEditors ...RequestEditorFn) (*ListDatabaseClustersResponse, error)

	// CreateDatabaseClusterWithBodyWithResponse request with any body
	CreateDatabaseClusterWithBodyWithResponse(ctx context.Context, namespace string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*CreateDatabaseClusterResponse, error)

	CreateDatabaseClusterWithResponse(ctx context.Context, namespace string, body CreateDatabaseClusterJSONRequestBody, reqEditors ...RequestEditorFn) (*CreateDatabaseClusterResponse, error)

	// ListDatabaseClusterBackupsWithResponse request
	ListDatabaseClusterBackupsWithResponse(ctx context.Context, namespace string, clusterName string, reqEditors ...RequestEditorFn) (*ListDatabaseClusterBackupsResponse, error)

	// ListDatabaseClusterRestoresWithResponse request
	ListDatabaseClusterRestoresWithResponse(ctx context.Context, namespace string, clusterName string, reqEditors ...RequestEditorFn) (*ListDatabaseClusterRestoresResponse, error)

	// DeleteDatabaseClusterWithResponse request
	DeleteDatabaseClusterWithResponse(ctx context.Context, namespace string, name string, params *DeleteDatabaseClusterParams, reqEditors ...RequestEditorFn) (*DeleteDatabaseClusterResponse, error)

	// GetDatabaseClusterWithResponse request
	GetDatabaseClusterWithResponse(ctx context.Context, namespace string, name string, reqEditors ...RequestEditorFn) (*GetDatabaseClusterResponse, error)

	// UpdateDatabaseClusterWithBodyWithResponse request with any body
	UpdateDatabaseClusterWithBodyWithResponse(ctx context.Context, namespace string, name string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*UpdateDatabaseClusterResponse, error)

	UpdateDatabaseClusterWithResponse(ctx context.Context, namespace string, name string, body UpdateDatabaseClusterJSONRequestBody, reqEditors ...RequestEditorFn) (*UpdateDatabaseClusterResponse, error)

	// GetDatabaseClusterComponentsWithResponse request
	GetDatabaseClusterComponentsWithResponse(ctx context.Context, namespace string, name string, reqEditors ...RequestEditorFn) (*GetDatabaseClusterComponentsResponse, error)

	// GetDatabaseClusterCredentialsWithResponse request
	GetDatabaseClusterCredentialsWithResponse(ctx context.Context, namespace string, name string, reqEditors ...RequestEditorFn) (*GetDatabaseClusterCredentialsResponse, error)

	// GetDatabaseClusterPitrWithResponse request
	GetDatabaseClusterPitrWithResponse(ctx context.Context, namespace string, name string, reqEditors ...RequestEditorFn) (*GetDatabaseClusterPitrResponse, error)

	// ListDatabaseEnginesWithResponse request
	ListDatabaseEnginesWithResponse(ctx context.Context, namespace string, reqEditors ...RequestEditorFn) (*ListDatabaseEnginesResponse, error)

	// GetUpgradePlanWithResponse request
	GetUpgradePlanWithResponse(ctx context.Context, namespace string, reqEditors ...RequestEditorFn) (*GetUpgradePlanResponse, error)

	// ApproveUpgradePlanWithBodyWithResponse request with any body
	ApproveUpgradePlanWithBodyWithResponse(ctx context.Context, namespace string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*ApproveUpgradePlanResponse, error)

	ApproveUpgradePlanWithResponse(ctx context.Context, namespace string, body ApproveUpgradePlanJSONRequestBody, reqEditors ...RequestEditorFn) (*ApproveUpgradePlanResponse, error)

	// GetDatabaseEngineWithResponse request
	GetDatabaseEngineWithResponse(ctx context.Context, namespace string, name string, reqEditors ...RequestEditorFn) (*GetDatabaseEngineResponse, error)

	// UpdateDatabaseEngineWithBodyWithResponse request with any body
	UpdateDatabaseEngineWithBodyWithResponse(ctx context.Context, namespace string, name string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*UpdateDatabaseEngineResponse, error)

	UpdateDatabaseEngineWithResponse(ctx context.Context, namespace string, name string, body UpdateDatabaseEngineJSONRequestBody, reqEditors ...RequestEditorFn) (*UpdateDatabaseEngineResponse, error)

	// ListMonitoringInstancesWithResponse request
	ListMonitoringInstancesWithResponse(ctx context.Context, namespace string, reqEditors ...RequestEditorFn) (*ListMonitoringInstancesResponse, error)

	// CreateMonitoringInstanceWithBodyWithResponse request with any body
	CreateMonitoringInstanceWithBodyWithResponse(ctx context.Context, namespace string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*CreateMonitoringInstanceResponse, error)

	CreateMonitoringInstanceWithResponse(ctx context.Context, namespace string, body CreateMonitoringInstanceJSONRequestBody, reqEditors ...RequestEditorFn) (*CreateMonitoringInstanceResponse, error)

	// DeleteMonitoringInstanceWithResponse request
	DeleteMonitoringInstanceWithResponse(ctx context.Context, namespace string, name string, reqEditors ...RequestEditorFn) (*DeleteMonitoringInstanceResponse, error)

	// GetMonitoringInstanceWithResponse request
	GetMonitoringInstanceWithResponse(ctx context.Context, namespace string, name string, reqEditors ...RequestEditorFn) (*GetMonitoringInstanceResponse, error)

	// UpdateMonitoringInstanceWithBodyWithResponse request with any body
	UpdateMonitoringInstanceWithBodyWithResponse(ctx context.Context, namespace string, name string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*UpdateMonitoringInstanceResponse, error)

	UpdateMonitoringInstanceWithResponse(ctx context.Context, namespace string, name string, body UpdateMonitoringInstanceJSONRequestBody, reqEditors ...RequestEditorFn) (*UpdateMonitoringInstanceResponse, error)

	// GetUserPermissionsWithResponse request
	GetUserPermissionsWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*GetUserPermissionsResponse, error)

	// ListPodSchedulingPolicyWithResponse request
	ListPodSchedulingPolicyWithResponse(ctx context.Context, params *ListPodSchedulingPolicyParams, reqEditors ...RequestEditorFn) (*ListPodSchedulingPolicyResponse, error)

	// CreatePodSchedulingPolicyWithBodyWithResponse request with any body
	CreatePodSchedulingPolicyWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*CreatePodSchedulingPolicyResponse, error)

	CreatePodSchedulingPolicyWithResponse(ctx context.Context, body CreatePodSchedulingPolicyJSONRequestBody, reqEditors ...RequestEditorFn) (*CreatePodSchedulingPolicyResponse, error)

	// DeletePodSchedulingPolicyWithResponse request
	DeletePodSchedulingPolicyWithResponse(ctx context.Context, policyName string, reqEditors ...RequestEditorFn) (*DeletePodSchedulingPolicyResponse, error)

	// GetPodSchedulingPolicyWithResponse request
	GetPodSchedulingPolicyWithResponse(ctx context.Context, policyName string, reqEditors ...RequestEditorFn) (*GetPodSchedulingPolicyResponse, error)

	// UpdatePodSchedulingPolicyWithBodyWithResponse request with any body
	UpdatePodSchedulingPolicyWithBodyWithResponse(ctx context.Context, policyName string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*UpdatePodSchedulingPolicyResponse, error)

	UpdatePodSchedulingPolicyWithResponse(ctx context.Context, policyName string, body UpdatePodSchedulingPolicyJSONRequestBody, reqEditors ...RequestEditorFn) (*UpdatePodSchedulingPolicyResponse, error)

	// GetKubernetesClusterResourcesWithResponse request
	GetKubernetesClusterResourcesWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*GetKubernetesClusterResourcesResponse, error)

	// DeleteSessionWithResponse request
	DeleteSessionWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*DeleteSessionResponse, error)

	// CreateSessionWithBodyWithResponse request with any body
	CreateSessionWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*CreateSessionResponse, error)

	CreateSessionWithResponse(ctx context.Context, body CreateSessionJSONRequestBody, reqEditors ...RequestEditorFn) (*CreateSessionResponse, error)

	// GetSettingsWithResponse request
	GetSettingsWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*GetSettingsResponse, error)

	// VersionInfoWithResponse request
	VersionInfoWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*VersionInfoResponse, error)
}

type GetKubernetesClusterInfoResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *KubernetesClusterInfo
	JSON400      *Error
	JSON500      *Error
}

// Status returns HTTPResponse.Status
func (r GetKubernetesClusterInfoResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetKubernetesClusterInfoResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type ListNamespacesResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *NamespaceList
}

// Status returns HTTPResponse.Status
func (r ListNamespacesResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r ListNamespacesResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type ListBackupStoragesResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *BackupStoragesList
	JSON400      *Error
	JSON500      *Error
}

// Status returns HTTPResponse.Status
func (r ListBackupStoragesResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r ListBackupStoragesResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type CreateBackupStorageResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *BackupStorage
	JSON400      *Error
	JSON500      *Error
}

// Status returns HTTPResponse.Status
func (r CreateBackupStorageResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r CreateBackupStorageResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type DeleteBackupStorageResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON400      *Error
	JSON500      *Error
}

// Status returns HTTPResponse.Status
func (r DeleteBackupStorageResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r DeleteBackupStorageResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetBackupStorageResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *BackupStorage
	JSON400      *Error
	JSON500      *Error
}

// Status returns HTTPResponse.Status
func (r GetBackupStorageResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetBackupStorageResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type UpdateBackupStorageResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *BackupStorage
	JSON400      *Error
	JSON500      *Error
}

// Status returns HTTPResponse.Status
func (r UpdateBackupStorageResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r UpdateBackupStorageResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type CreateDatabaseClusterBackupResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *DatabaseClusterBackup
	JSON201      *DatabaseClusterBackup
	JSON202      *DatabaseClusterBackup
	JSON400      *Error
	JSON500      *Error
}

// Status returns HTTPResponse.Status
func (r CreateDatabaseClusterBackupResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r CreateDatabaseClusterBackupResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type DeleteDatabaseClusterBackupResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *IoK8sApimachineryPkgApisMetaV1StatusV2
	JSON400      *Error
	JSON500      *Error
}

// Status returns HTTPResponse.Status
func (r DeleteDatabaseClusterBackupResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r DeleteDatabaseClusterBackupResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetDatabaseClusterBackupResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *DatabaseClusterBackup
	JSON400      *Error
	JSON500      *Error
}

// Status returns HTTPResponse.Status
func (r GetDatabaseClusterBackupResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetDatabaseClusterBackupResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type CreateDatabaseClusterRestoreResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *DatabaseClusterRestore
	JSON201      *DatabaseClusterRestore
	JSON202      *DatabaseClusterRestore
	JSON400      *Error
	JSON500      *Error
}

// Status returns HTTPResponse.Status
func (r CreateDatabaseClusterRestoreResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r CreateDatabaseClusterRestoreResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type DeleteDatabaseClusterRestoreResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *IoK8sApimachineryPkgApisMetaV1StatusV2
	JSON400      *Error
	JSON500      *Error
}

// Status returns HTTPResponse.Status
func (r DeleteDatabaseClusterRestoreResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r DeleteDatabaseClusterRestoreResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetDatabaseClusterRestoreResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *DatabaseClusterRestore
	JSON400      *Error
	JSON500      *Error
}

// Status returns HTTPResponse.Status
func (r GetDatabaseClusterRestoreResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetDatabaseClusterRestoreResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type UpdateDatabaseClusterRestoreResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *DatabaseClusterRestore
	JSON201      *DatabaseClusterRestore
	JSON400      *Error
	JSON500      *Error
}

// Status returns HTTPResponse.Status
func (r UpdateDatabaseClusterRestoreResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r UpdateDatabaseClusterRestoreResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type ListDatabaseClustersResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *DatabaseClusterList
	JSON400      *Error
	JSON500      *Error
}

// Status returns HTTPResponse.Status
func (r ListDatabaseClustersResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r ListDatabaseClustersResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type CreateDatabaseClusterResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *DatabaseCluster
	JSON201      *DatabaseCluster
	JSON202      *DatabaseCluster
	JSON400      *Error
	JSON500      *Error
}

// Status returns HTTPResponse.Status
func (r CreateDatabaseClusterResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r CreateDatabaseClusterResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type ListDatabaseClusterBackupsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *DatabaseClusterBackupList
	JSON400      *Error
	JSON500      *Error
}

// Status returns HTTPResponse.Status
func (r ListDatabaseClusterBackupsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r ListDatabaseClusterBackupsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type ListDatabaseClusterRestoresResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *DatabaseClusterRestoreList
	JSON400      *Error
	JSON500      *Error
}

// Status returns HTTPResponse.Status
func (r ListDatabaseClusterRestoresResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r ListDatabaseClusterRestoresResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type DeleteDatabaseClusterResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *IoK8sApimachineryPkgApisMetaV1StatusV2
	JSON400      *Error
	JSON500      *Error
}

// Status returns HTTPResponse.Status
func (r DeleteDatabaseClusterResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r DeleteDatabaseClusterResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetDatabaseClusterResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *DatabaseCluster
	JSON400      *Error
	JSON500      *Error
}

// Status returns HTTPResponse.Status
func (r GetDatabaseClusterResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetDatabaseClusterResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type UpdateDatabaseClusterResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *DatabaseCluster
	JSON400      *Error
	JSON500      *Error
}

// Status returns HTTPResponse.Status
func (r UpdateDatabaseClusterResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r UpdateDatabaseClusterResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetDatabaseClusterComponentsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *DatabaseClusterComponents
	JSON400      *Error
	JSON500      *Error
}

// Status returns HTTPResponse.Status
func (r GetDatabaseClusterComponentsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetDatabaseClusterComponentsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetDatabaseClusterCredentialsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *DatabaseClusterCredential
	JSON400      *Error
	JSON500      *Error
}

// Status returns HTTPResponse.Status
func (r GetDatabaseClusterCredentialsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetDatabaseClusterCredentialsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetDatabaseClusterPitrResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *DatabaseClusterPitr
	JSON400      *Error
	JSON500      *Error
}

// Status returns HTTPResponse.Status
func (r GetDatabaseClusterPitrResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetDatabaseClusterPitrResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type ListDatabaseEnginesResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *DatabaseEngineList
	JSON400      *Error
	JSON500      *Error
}

// Status returns HTTPResponse.Status
func (r ListDatabaseEnginesResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r ListDatabaseEnginesResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetUpgradePlanResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *UpgradePlan
	JSON400      *Error
	JSON500      *Error
}

// Status returns HTTPResponse.Status
func (r GetUpgradePlanResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetUpgradePlanResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type ApproveUpgradePlanResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON400      *Error
	JSON500      *Error
}

// Status returns HTTPResponse.Status
func (r ApproveUpgradePlanResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r ApproveUpgradePlanResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetDatabaseEngineResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *DatabaseEngine
	JSON400      *Error
	JSON500      *Error
}

// Status returns HTTPResponse.Status
func (r GetDatabaseEngineResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetDatabaseEngineResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type UpdateDatabaseEngineResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *DatabaseEngine
	JSON400      *Error
	JSON500      *Error
}

// Status returns HTTPResponse.Status
func (r UpdateDatabaseEngineResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r UpdateDatabaseEngineResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type ListMonitoringInstancesResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *MonitoringInstancesList
	JSON400      *Error
	JSON500      *Error
}

// Status returns HTTPResponse.Status
func (r ListMonitoringInstancesResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r ListMonitoringInstancesResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type CreateMonitoringInstanceResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *MonitoringInstance
	JSON400      *Error
	JSON500      *Error
}

// Status returns HTTPResponse.Status
func (r CreateMonitoringInstanceResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r CreateMonitoringInstanceResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type DeleteMonitoringInstanceResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON400      *Error
	JSON404      *Error
	JSON500      *Error
}

// Status returns HTTPResponse.Status
func (r DeleteMonitoringInstanceResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r DeleteMonitoringInstanceResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetMonitoringInstanceResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *MonitoringInstance
	JSON400      *Error
	JSON404      *Error
	JSON500      *Error
}

// Status returns HTTPResponse.Status
func (r GetMonitoringInstanceResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetMonitoringInstanceResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type UpdateMonitoringInstanceResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *MonitoringInstance
	JSON400      *Error
	JSON404      *Error
	JSON500      *Error
}

// Status returns HTTPResponse.Status
func (r UpdateMonitoringInstanceResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r UpdateMonitoringInstanceResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetUserPermissionsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *UserPermissions
	JSON400      *Error
	JSON500      *Error
}

// Status returns HTTPResponse.Status
func (r GetUserPermissionsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetUserPermissionsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type ListPodSchedulingPolicyResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *PodSchedulingPolicyList
	JSON400      *Error
	JSON500      *Error
}

// Status returns HTTPResponse.Status
func (r ListPodSchedulingPolicyResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r ListPodSchedulingPolicyResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type CreatePodSchedulingPolicyResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *PodSchedulingPolicy
	JSON400      *Error
	JSON500      *Error
}

// Status returns HTTPResponse.Status
func (r CreatePodSchedulingPolicyResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r CreatePodSchedulingPolicyResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type DeletePodSchedulingPolicyResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *IoK8sApimachineryPkgApisMetaV1StatusV2
	JSON400      *Error
	JSON500      *Error
}

// Status returns HTTPResponse.Status
func (r DeletePodSchedulingPolicyResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r DeletePodSchedulingPolicyResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetPodSchedulingPolicyResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *PodSchedulingPolicy
	JSON400      *Error
	JSON500      *Error
}

// Status returns HTTPResponse.Status
func (r GetPodSchedulingPolicyResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetPodSchedulingPolicyResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type UpdatePodSchedulingPolicyResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *PodSchedulingPolicy
	JSON400      *Error
	JSON500      *Error
}

// Status returns HTTPResponse.Status
func (r UpdatePodSchedulingPolicyResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r UpdatePodSchedulingPolicyResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetKubernetesClusterResourcesResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *KubernetesClusterResources
	JSON400      *Error
	JSON500      *Error
}

// Status returns HTTPResponse.Status
func (r GetKubernetesClusterResourcesResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetKubernetesClusterResourcesResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type DeleteSessionResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON429      *Error
	JSON500      *Error
}

// Status returns HTTPResponse.Status
func (r DeleteSessionResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r DeleteSessionResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type CreateSessionResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *struct {
		Token *string `json:"token,omitempty"`
	}
	JSON400 *Error
	JSON429 *Error
	JSON500 *Error
}

// Status returns HTTPResponse.Status
func (r CreateSessionResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r CreateSessionResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetSettingsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *Settings
}

// Status returns HTTPResponse.Status
func (r GetSettingsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetSettingsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type VersionInfoResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *Version
}

// Status returns HTTPResponse.Status
func (r VersionInfoResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r VersionInfoResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

// GetKubernetesClusterInfoWithResponse request returning *GetKubernetesClusterInfoResponse
func (c *ClientWithResponses) GetKubernetesClusterInfoWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*GetKubernetesClusterInfoResponse, error) {
	rsp, err := c.GetKubernetesClusterInfo(ctx, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetKubernetesClusterInfoResponse(rsp)
}

// ListNamespacesWithResponse request returning *ListNamespacesResponse
func (c *ClientWithResponses) ListNamespacesWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*ListNamespacesResponse, error) {
	rsp, err := c.ListNamespaces(ctx, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseListNamespacesResponse(rsp)
}

// ListBackupStoragesWithResponse request returning *ListBackupStoragesResponse
func (c *ClientWithResponses) ListBackupStoragesWithResponse(ctx context.Context, namespace string, reqEditors ...RequestEditorFn) (*ListBackupStoragesResponse, error) {
	rsp, err := c.ListBackupStorages(ctx, namespace, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseListBackupStoragesResponse(rsp)
}

// CreateBackupStorageWithBodyWithResponse request with arbitrary body returning *CreateBackupStorageResponse
func (c *ClientWithResponses) CreateBackupStorageWithBodyWithResponse(ctx context.Context, namespace string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*CreateBackupStorageResponse, error) {
	rsp, err := c.CreateBackupStorageWithBody(ctx, namespace, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseCreateBackupStorageResponse(rsp)
}

func (c *ClientWithResponses) CreateBackupStorageWithResponse(ctx context.Context, namespace string, body CreateBackupStorageJSONRequestBody, reqEditors ...RequestEditorFn) (*CreateBackupStorageResponse, error) {
	rsp, err := c.CreateBackupStorage(ctx, namespace, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseCreateBackupStorageResponse(rsp)
}

// DeleteBackupStorageWithResponse request returning *DeleteBackupStorageResponse
func (c *ClientWithResponses) DeleteBackupStorageWithResponse(ctx context.Context, namespace string, name string, reqEditors ...RequestEditorFn) (*DeleteBackupStorageResponse, error) {
	rsp, err := c.DeleteBackupStorage(ctx, namespace, name, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseDeleteBackupStorageResponse(rsp)
}

// GetBackupStorageWithResponse request returning *GetBackupStorageResponse
func (c *ClientWithResponses) GetBackupStorageWithResponse(ctx context.Context, namespace string, name string, reqEditors ...RequestEditorFn) (*GetBackupStorageResponse, error) {
	rsp, err := c.GetBackupStorage(ctx, namespace, name, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetBackupStorageResponse(rsp)
}

// UpdateBackupStorageWithBodyWithResponse request with arbitrary body returning *UpdateBackupStorageResponse
func (c *ClientWithResponses) UpdateBackupStorageWithBodyWithResponse(ctx context.Context, namespace string, name string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*UpdateBackupStorageResponse, error) {
	rsp, err := c.UpdateBackupStorageWithBody(ctx, namespace, name, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseUpdateBackupStorageResponse(rsp)
}

func (c *ClientWithResponses) UpdateBackupStorageWithResponse(ctx context.Context, namespace string, name string, body UpdateBackupStorageJSONRequestBody, reqEditors ...RequestEditorFn) (*UpdateBackupStorageResponse, error) {
	rsp, err := c.UpdateBackupStorage(ctx, namespace, name, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseUpdateBackupStorageResponse(rsp)
}

// CreateDatabaseClusterBackupWithBodyWithResponse request with arbitrary body returning *CreateDatabaseClusterBackupResponse
func (c *ClientWithResponses) CreateDatabaseClusterBackupWithBodyWithResponse(ctx context.Context, namespace string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*CreateDatabaseClusterBackupResponse, error) {
	rsp, err := c.CreateDatabaseClusterBackupWithBody(ctx, namespace, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseCreateDatabaseClusterBackupResponse(rsp)
}

func (c *ClientWithResponses) CreateDatabaseClusterBackupWithResponse(ctx context.Context, namespace string, body CreateDatabaseClusterBackupJSONRequestBody, reqEditors ...RequestEditorFn) (*CreateDatabaseClusterBackupResponse, error) {
	rsp, err := c.CreateDatabaseClusterBackup(ctx, namespace, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseCreateDatabaseClusterBackupResponse(rsp)
}

// DeleteDatabaseClusterBackupWithResponse request returning *DeleteDatabaseClusterBackupResponse
func (c *ClientWithResponses) DeleteDatabaseClusterBackupWithResponse(ctx context.Context, namespace string, name string, params *DeleteDatabaseClusterBackupParams, reqEditors ...RequestEditorFn) (*DeleteDatabaseClusterBackupResponse, error) {
	rsp, err := c.DeleteDatabaseClusterBackup(ctx, namespace, name, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseDeleteDatabaseClusterBackupResponse(rsp)
}

// GetDatabaseClusterBackupWithResponse request returning *GetDatabaseClusterBackupResponse
func (c *ClientWithResponses) GetDatabaseClusterBackupWithResponse(ctx context.Context, namespace string, name string, reqEditors ...RequestEditorFn) (*GetDatabaseClusterBackupResponse, error) {
	rsp, err := c.GetDatabaseClusterBackup(ctx, namespace, name, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetDatabaseClusterBackupResponse(rsp)
}

// CreateDatabaseClusterRestoreWithBodyWithResponse request with arbitrary body returning *CreateDatabaseClusterRestoreResponse
func (c *ClientWithResponses) CreateDatabaseClusterRestoreWithBodyWithResponse(ctx context.Context, namespace string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*CreateDatabaseClusterRestoreResponse, error) {
	rsp, err := c.CreateDatabaseClusterRestoreWithBody(ctx, namespace, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseCreateDatabaseClusterRestoreResponse(rsp)
}

func (c *ClientWithResponses) CreateDatabaseClusterRestoreWithResponse(ctx context.Context, namespace string, body CreateDatabaseClusterRestoreJSONRequestBody, reqEditors ...RequestEditorFn) (*CreateDatabaseClusterRestoreResponse, error) {
	rsp, err := c.CreateDatabaseClusterRestore(ctx, namespace, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseCreateDatabaseClusterRestoreResponse(rsp)
}

// DeleteDatabaseClusterRestoreWithResponse request returning *DeleteDatabaseClusterRestoreResponse
func (c *ClientWithResponses) DeleteDatabaseClusterRestoreWithResponse(ctx context.Context, namespace string, name string, reqEditors ...RequestEditorFn) (*DeleteDatabaseClusterRestoreResponse, error) {
	rsp, err := c.DeleteDatabaseClusterRestore(ctx, namespace, name, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseDeleteDatabaseClusterRestoreResponse(rsp)
}

// GetDatabaseClusterRestoreWithResponse request returning *GetDatabaseClusterRestoreResponse
func (c *ClientWithResponses) GetDatabaseClusterRestoreWithResponse(ctx context.Context, namespace string, name string, reqEditors ...RequestEditorFn) (*GetDatabaseClusterRestoreResponse, error) {
	rsp, err := c.GetDatabaseClusterRestore(ctx, namespace, name, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetDatabaseClusterRestoreResponse(rsp)
}

// UpdateDatabaseClusterRestoreWithBodyWithResponse request with arbitrary body returning *UpdateDatabaseClusterRestoreResponse
func (c *ClientWithResponses) UpdateDatabaseClusterRestoreWithBodyWithResponse(ctx context.Context, namespace string, name string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*UpdateDatabaseClusterRestoreResponse, error) {
	rsp, err := c.UpdateDatabaseClusterRestoreWithBody(ctx, namespace, name, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseUpdateDatabaseClusterRestoreResponse(rsp)
}

func (c *ClientWithResponses) UpdateDatabaseClusterRestoreWithResponse(ctx context.Context, namespace string, name string, body UpdateDatabaseClusterRestoreJSONRequestBody, reqEditors ...RequestEditorFn) (*UpdateDatabaseClusterRestoreResponse, error) {
	rsp, err := c.UpdateDatabaseClusterRestore(ctx, namespace, name, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseUpdateDatabaseClusterRestoreResponse(rsp)
}

// ListDatabaseClustersWithResponse request returning *ListDatabaseClustersResponse
func (c *ClientWithResponses) ListDatabaseClustersWithResponse(ctx context.Context, namespace string, reqEditors ...RequestEditorFn) (*ListDatabaseClustersResponse, error) {
	rsp, err := c.ListDatabaseClusters(ctx, namespace, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseListDatabaseClustersResponse(rsp)
}

// CreateDatabaseClusterWithBodyWithResponse request with arbitrary body returning *CreateDatabaseClusterResponse
func (c *ClientWithResponses) CreateDatabaseClusterWithBodyWithResponse(ctx context.Context, namespace string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*CreateDatabaseClusterResponse, error) {
	rsp, err := c.CreateDatabaseClusterWithBody(ctx, namespace, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseCreateDatabaseClusterResponse(rsp)
}

func (c *ClientWithResponses) CreateDatabaseClusterWithResponse(ctx context.Context, namespace string, body CreateDatabaseClusterJSONRequestBody, reqEditors ...RequestEditorFn) (*CreateDatabaseClusterResponse, error) {
	rsp, err := c.CreateDatabaseCluster(ctx, namespace, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseCreateDatabaseClusterResponse(rsp)
}

// ListDatabaseClusterBackupsWithResponse request returning *ListDatabaseClusterBackupsResponse
func (c *ClientWithResponses) ListDatabaseClusterBackupsWithResponse(ctx context.Context, namespace string, clusterName string, reqEditors ...RequestEditorFn) (*ListDatabaseClusterBackupsResponse, error) {
	rsp, err := c.ListDatabaseClusterBackups(ctx, namespace, clusterName, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseListDatabaseClusterBackupsResponse(rsp)
}

// ListDatabaseClusterRestoresWithResponse request returning *ListDatabaseClusterRestoresResponse
func (c *ClientWithResponses) ListDatabaseClusterRestoresWithResponse(ctx context.Context, namespace string, clusterName string, reqEditors ...RequestEditorFn) (*ListDatabaseClusterRestoresResponse, error) {
	rsp, err := c.ListDatabaseClusterRestores(ctx, namespace, clusterName, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseListDatabaseClusterRestoresResponse(rsp)
}

// DeleteDatabaseClusterWithResponse request returning *DeleteDatabaseClusterResponse
func (c *ClientWithResponses) DeleteDatabaseClusterWithResponse(ctx context.Context, namespace string, name string, params *DeleteDatabaseClusterParams, reqEditors ...RequestEditorFn) (*DeleteDatabaseClusterResponse, error) {
	rsp, err := c.DeleteDatabaseCluster(ctx, namespace, name, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseDeleteDatabaseClusterResponse(rsp)
}

// GetDatabaseClusterWithResponse request returning *GetDatabaseClusterResponse
func (c *ClientWithResponses) GetDatabaseClusterWithResponse(ctx context.Context, namespace string, name string, reqEditors ...RequestEditorFn) (*GetDatabaseClusterResponse, error) {
	rsp, err := c.GetDatabaseCluster(ctx, namespace, name, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetDatabaseClusterResponse(rsp)
}

// UpdateDatabaseClusterWithBodyWithResponse request with arbitrary body returning *UpdateDatabaseClusterResponse
func (c *ClientWithResponses) UpdateDatabaseClusterWithBodyWithResponse(ctx context.Context, namespace string, name string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*UpdateDatabaseClusterResponse, error) {
	rsp, err := c.UpdateDatabaseClusterWithBody(ctx, namespace, name, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseUpdateDatabaseClusterResponse(rsp)
}

func (c *ClientWithResponses) UpdateDatabaseClusterWithResponse(ctx context.Context, namespace string, name string, body UpdateDatabaseClusterJSONRequestBody, reqEditors ...RequestEditorFn) (*UpdateDatabaseClusterResponse, error) {
	rsp, err := c.UpdateDatabaseCluster(ctx, namespace, name, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseUpdateDatabaseClusterResponse(rsp)
}

// GetDatabaseClusterComponentsWithResponse request returning *GetDatabaseClusterComponentsResponse
func (c *ClientWithResponses) GetDatabaseClusterComponentsWithResponse(ctx context.Context, namespace string, name string, reqEditors ...RequestEditorFn) (*GetDatabaseClusterComponentsResponse, error) {
	rsp, err := c.GetDatabaseClusterComponents(ctx, namespace, name, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetDatabaseClusterComponentsResponse(rsp)
}

// GetDatabaseClusterCredentialsWithResponse request returning *GetDatabaseClusterCredentialsResponse
func (c *ClientWithResponses) GetDatabaseClusterCredentialsWithResponse(ctx context.Context, namespace string, name string, reqEditors ...RequestEditorFn) (*GetDatabaseClusterCredentialsResponse, error) {
	rsp, err := c.GetDatabaseClusterCredentials(ctx, namespace, name, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetDatabaseClusterCredentialsResponse(rsp)
}

// GetDatabaseClusterPitrWithResponse request returning *GetDatabaseClusterPitrResponse
func (c *ClientWithResponses) GetDatabaseClusterPitrWithResponse(ctx context.Context, namespace string, name string, reqEditors ...RequestEditorFn) (*GetDatabaseClusterPitrResponse, error) {
	rsp, err := c.GetDatabaseClusterPitr(ctx, namespace, name, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetDatabaseClusterPitrResponse(rsp)
}

// ListDatabaseEnginesWithResponse request returning *ListDatabaseEnginesResponse
func (c *ClientWithResponses) ListDatabaseEnginesWithResponse(ctx context.Context, namespace string, reqEditors ...RequestEditorFn) (*ListDatabaseEnginesResponse, error) {
	rsp, err := c.ListDatabaseEngines(ctx, namespace, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseListDatabaseEnginesResponse(rsp)
}

// GetUpgradePlanWithResponse request returning *GetUpgradePlanResponse
func (c *ClientWithResponses) GetUpgradePlanWithResponse(ctx context.Context, namespace string, reqEditors ...RequestEditorFn) (*GetUpgradePlanResponse, error) {
	rsp, err := c.GetUpgradePlan(ctx, namespace, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetUpgradePlanResponse(rsp)
}

// ApproveUpgradePlanWithBodyWithResponse request with arbitrary body returning *ApproveUpgradePlanResponse
func (c *ClientWithResponses) ApproveUpgradePlanWithBodyWithResponse(ctx context.Context, namespace string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*ApproveUpgradePlanResponse, error) {
	rsp, err := c.ApproveUpgradePlanWithBody(ctx, namespace, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseApproveUpgradePlanResponse(rsp)
}

func (c *ClientWithResponses) ApproveUpgradePlanWithResponse(ctx context.Context, namespace string, body ApproveUpgradePlanJSONRequestBody, reqEditors ...RequestEditorFn) (*ApproveUpgradePlanResponse, error) {
	rsp, err := c.ApproveUpgradePlan(ctx, namespace, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseApproveUpgradePlanResponse(rsp)
}

// GetDatabaseEngineWithResponse request returning *GetDatabaseEngineResponse
func (c *ClientWithResponses) GetDatabaseEngineWithResponse(ctx context.Context, namespace string, name string, reqEditors ...RequestEditorFn) (*GetDatabaseEngineResponse, error) {
	rsp, err := c.GetDatabaseEngine(ctx, namespace, name, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetDatabaseEngineResponse(rsp)
}

// UpdateDatabaseEngineWithBodyWithResponse request with arbitrary body returning *UpdateDatabaseEngineResponse
func (c *ClientWithResponses) UpdateDatabaseEngineWithBodyWithResponse(ctx context.Context, namespace string, name string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*UpdateDatabaseEngineResponse, error) {
	rsp, err := c.UpdateDatabaseEngineWithBody(ctx, namespace, name, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseUpdateDatabaseEngineResponse(rsp)
}

func (c *ClientWithResponses) UpdateDatabaseEngineWithResponse(ctx context.Context, namespace string, name string, body UpdateDatabaseEngineJSONRequestBody, reqEditors ...RequestEditorFn) (*UpdateDatabaseEngineResponse, error) {
	rsp, err := c.UpdateDatabaseEngine(ctx, namespace, name, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseUpdateDatabaseEngineResponse(rsp)
}

// ListMonitoringInstancesWithResponse request returning *ListMonitoringInstancesResponse
func (c *ClientWithResponses) ListMonitoringInstancesWithResponse(ctx context.Context, namespace string, reqEditors ...RequestEditorFn) (*ListMonitoringInstancesResponse, error) {
	rsp, err := c.ListMonitoringInstances(ctx, namespace, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseListMonitoringInstancesResponse(rsp)
}

// CreateMonitoringInstanceWithBodyWithResponse request with arbitrary body returning *CreateMonitoringInstanceResponse
func (c *ClientWithResponses) CreateMonitoringInstanceWithBodyWithResponse(ctx context.Context, namespace string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*CreateMonitoringInstanceResponse, error) {
	rsp, err := c.CreateMonitoringInstanceWithBody(ctx, namespace, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseCreateMonitoringInstanceResponse(rsp)
}

func (c *ClientWithResponses) CreateMonitoringInstanceWithResponse(ctx context.Context, namespace string, body CreateMonitoringInstanceJSONRequestBody, reqEditors ...RequestEditorFn) (*CreateMonitoringInstanceResponse, error) {
	rsp, err := c.CreateMonitoringInstance(ctx, namespace, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseCreateMonitoringInstanceResponse(rsp)
}

// DeleteMonitoringInstanceWithResponse request returning *DeleteMonitoringInstanceResponse
func (c *ClientWithResponses) DeleteMonitoringInstanceWithResponse(ctx context.Context, namespace string, name string, reqEditors ...RequestEditorFn) (*DeleteMonitoringInstanceResponse, error) {
	rsp, err := c.DeleteMonitoringInstance(ctx, namespace, name, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseDeleteMonitoringInstanceResponse(rsp)
}

// GetMonitoringInstanceWithResponse request returning *GetMonitoringInstanceResponse
func (c *ClientWithResponses) GetMonitoringInstanceWithResponse(ctx context.Context, namespace string, name string, reqEditors ...RequestEditorFn) (*GetMonitoringInstanceResponse, error) {
	rsp, err := c.GetMonitoringInstance(ctx, namespace, name, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetMonitoringInstanceResponse(rsp)
}

// UpdateMonitoringInstanceWithBodyWithResponse request with arbitrary body returning *UpdateMonitoringInstanceResponse
func (c *ClientWithResponses) UpdateMonitoringInstanceWithBodyWithResponse(ctx context.Context, namespace string, name string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*UpdateMonitoringInstanceResponse, error) {
	rsp, err := c.UpdateMonitoringInstanceWithBody(ctx, namespace, name, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseUpdateMonitoringInstanceResponse(rsp)
}

func (c *ClientWithResponses) UpdateMonitoringInstanceWithResponse(ctx context.Context, namespace string, name string, body UpdateMonitoringInstanceJSONRequestBody, reqEditors ...RequestEditorFn) (*UpdateMonitoringInstanceResponse, error) {
	rsp, err := c.UpdateMonitoringInstance(ctx, namespace, name, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseUpdateMonitoringInstanceResponse(rsp)
}

// GetUserPermissionsWithResponse request returning *GetUserPermissionsResponse
func (c *ClientWithResponses) GetUserPermissionsWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*GetUserPermissionsResponse, error) {
	rsp, err := c.GetUserPermissions(ctx, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetUserPermissionsResponse(rsp)
}

// ListPodSchedulingPolicyWithResponse request returning *ListPodSchedulingPolicyResponse
func (c *ClientWithResponses) ListPodSchedulingPolicyWithResponse(ctx context.Context, params *ListPodSchedulingPolicyParams, reqEditors ...RequestEditorFn) (*ListPodSchedulingPolicyResponse, error) {
	rsp, err := c.ListPodSchedulingPolicy(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseListPodSchedulingPolicyResponse(rsp)
}

// CreatePodSchedulingPolicyWithBodyWithResponse request with arbitrary body returning *CreatePodSchedulingPolicyResponse
func (c *ClientWithResponses) CreatePodSchedulingPolicyWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*CreatePodSchedulingPolicyResponse, error) {
	rsp, err := c.CreatePodSchedulingPolicyWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseCreatePodSchedulingPolicyResponse(rsp)
}

func (c *ClientWithResponses) CreatePodSchedulingPolicyWithResponse(ctx context.Context, body CreatePodSchedulingPolicyJSONRequestBody, reqEditors ...RequestEditorFn) (*CreatePodSchedulingPolicyResponse, error) {
	rsp, err := c.CreatePodSchedulingPolicy(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseCreatePodSchedulingPolicyResponse(rsp)
}

// DeletePodSchedulingPolicyWithResponse request returning *DeletePodSchedulingPolicyResponse
func (c *ClientWithResponses) DeletePodSchedulingPolicyWithResponse(ctx context.Context, policyName string, reqEditors ...RequestEditorFn) (*DeletePodSchedulingPolicyResponse, error) {
	rsp, err := c.DeletePodSchedulingPolicy(ctx, policyName, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseDeletePodSchedulingPolicyResponse(rsp)
}

// GetPodSchedulingPolicyWithResponse request returning *GetPodSchedulingPolicyResponse
func (c *ClientWithResponses) GetPodSchedulingPolicyWithResponse(ctx context.Context, policyName string, reqEditors ...RequestEditorFn) (*GetPodSchedulingPolicyResponse, error) {
	rsp, err := c.GetPodSchedulingPolicy(ctx, policyName, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetPodSchedulingPolicyResponse(rsp)
}

// UpdatePodSchedulingPolicyWithBodyWithResponse request with arbitrary body returning *UpdatePodSchedulingPolicyResponse
func (c *ClientWithResponses) UpdatePodSchedulingPolicyWithBodyWithResponse(ctx context.Context, policyName string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*UpdatePodSchedulingPolicyResponse, error) {
	rsp, err := c.UpdatePodSchedulingPolicyWithBody(ctx, policyName, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseUpdatePodSchedulingPolicyResponse(rsp)
}

func (c *ClientWithResponses) UpdatePodSchedulingPolicyWithResponse(ctx context.Context, policyName string, body UpdatePodSchedulingPolicyJSONRequestBody, reqEditors ...RequestEditorFn) (*UpdatePodSchedulingPolicyResponse, error) {
	rsp, err := c.UpdatePodSchedulingPolicy(ctx, policyName, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseUpdatePodSchedulingPolicyResponse(rsp)
}

// GetKubernetesClusterResourcesWithResponse request returning *GetKubernetesClusterResourcesResponse
func (c *ClientWithResponses) GetKubernetesClusterResourcesWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*GetKubernetesClusterResourcesResponse, error) {
	rsp, err := c.GetKubernetesClusterResources(ctx, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetKubernetesClusterResourcesResponse(rsp)
}

// DeleteSessionWithResponse request returning *DeleteSessionResponse
func (c *ClientWithResponses) DeleteSessionWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*DeleteSessionResponse, error) {
	rsp, err := c.DeleteSession(ctx, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseDeleteSessionResponse(rsp)
}

// CreateSessionWithBodyWithResponse request with arbitrary body returning *CreateSessionResponse
func (c *ClientWithResponses) CreateSessionWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*CreateSessionResponse, error) {
	rsp, err := c.CreateSessionWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseCreateSessionResponse(rsp)
}

func (c *ClientWithResponses) CreateSessionWithResponse(ctx context.Context, body CreateSessionJSONRequestBody, reqEditors ...RequestEditorFn) (*CreateSessionResponse, error) {
	rsp, err := c.CreateSession(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseCreateSessionResponse(rsp)
}

// GetSettingsWithResponse request returning *GetSettingsResponse
func (c *ClientWithResponses) GetSettingsWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*GetSettingsResponse, error) {
	rsp, err := c.GetSettings(ctx, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetSettingsResponse(rsp)
}

// VersionInfoWithResponse request returning *VersionInfoResponse
func (c *ClientWithResponses) VersionInfoWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*VersionInfoResponse, error) {
	rsp, err := c.VersionInfo(ctx, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseVersionInfoResponse(rsp)
}

// ParseGetKubernetesClusterInfoResponse parses an HTTP response from a GetKubernetesClusterInfoWithResponse call
func ParseGetKubernetesClusterInfoResponse(rsp *http.Response) (*GetKubernetesClusterInfoResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetKubernetesClusterInfoResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest KubernetesClusterInfo
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	}

	return response, nil
}

// ParseListNamespacesResponse parses an HTTP response from a ListNamespacesWithResponse call
func ParseListNamespacesResponse(rsp *http.Response) (*ListNamespacesResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &ListNamespacesResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest NamespaceList
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest
	}

	return response, nil
}

// ParseListBackupStoragesResponse parses an HTTP response from a ListBackupStoragesWithResponse call
func ParseListBackupStoragesResponse(rsp *http.Response) (*ListBackupStoragesResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &ListBackupStoragesResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest BackupStoragesList
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	}

	return response, nil
}

// ParseCreateBackupStorageResponse parses an HTTP response from a CreateBackupStorageWithResponse call
func ParseCreateBackupStorageResponse(rsp *http.Response) (*CreateBackupStorageResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &CreateBackupStorageResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest BackupStorage
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	}

	return response, nil
}

// ParseDeleteBackupStorageResponse parses an HTTP response from a DeleteBackupStorageWithResponse call
func ParseDeleteBackupStorageResponse(rsp *http.Response) (*DeleteBackupStorageResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &DeleteBackupStorageResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	}

	return response, nil
}

// ParseGetBackupStorageResponse parses an HTTP response from a GetBackupStorageWithResponse call
func ParseGetBackupStorageResponse(rsp *http.Response) (*GetBackupStorageResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetBackupStorageResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest BackupStorage
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	}

	return response, nil
}

// ParseUpdateBackupStorageResponse parses an HTTP response from a UpdateBackupStorageWithResponse call
func ParseUpdateBackupStorageResponse(rsp *http.Response) (*UpdateBackupStorageResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &UpdateBackupStorageResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest BackupStorage
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	}

	return response, nil
}

// ParseCreateDatabaseClusterBackupResponse parses an HTTP response from a CreateDatabaseClusterBackupWithResponse call
func ParseCreateDatabaseClusterBackupResponse(rsp *http.Response) (*CreateDatabaseClusterBackupResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &CreateDatabaseClusterBackupResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest DatabaseClusterBackup
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 201:
		var dest DatabaseClusterBackup
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON201 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 202:
		var dest DatabaseClusterBackup
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON202 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	}

	return response, nil
}

// ParseDeleteDatabaseClusterBackupResponse parses an HTTP response from a DeleteDatabaseClusterBackupWithResponse call
func ParseDeleteDatabaseClusterBackupResponse(rsp *http.Response) (*DeleteDatabaseClusterBackupResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &DeleteDatabaseClusterBackupResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest IoK8sApimachineryPkgApisMetaV1StatusV2
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	}

	return response, nil
}

// ParseGetDatabaseClusterBackupResponse parses an HTTP response from a GetDatabaseClusterBackupWithResponse call
func ParseGetDatabaseClusterBackupResponse(rsp *http.Response) (*GetDatabaseClusterBackupResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetDatabaseClusterBackupResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest DatabaseClusterBackup
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	}

	return response, nil
}

// ParseCreateDatabaseClusterRestoreResponse parses an HTTP response from a CreateDatabaseClusterRestoreWithResponse call
func ParseCreateDatabaseClusterRestoreResponse(rsp *http.Response) (*CreateDatabaseClusterRestoreResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &CreateDatabaseClusterRestoreResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest DatabaseClusterRestore
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 201:
		var dest DatabaseClusterRestore
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON201 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 202:
		var dest DatabaseClusterRestore
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON202 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	}

	return response, nil
}

// ParseDeleteDatabaseClusterRestoreResponse parses an HTTP response from a DeleteDatabaseClusterRestoreWithResponse call
func ParseDeleteDatabaseClusterRestoreResponse(rsp *http.Response) (*DeleteDatabaseClusterRestoreResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &DeleteDatabaseClusterRestoreResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest IoK8sApimachineryPkgApisMetaV1StatusV2
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	}

	return response, nil
}

// ParseGetDatabaseClusterRestoreResponse parses an HTTP response from a GetDatabaseClusterRestoreWithResponse call
func ParseGetDatabaseClusterRestoreResponse(rsp *http.Response) (*GetDatabaseClusterRestoreResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetDatabaseClusterRestoreResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest DatabaseClusterRestore
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	}

	return response, nil
}

// ParseUpdateDatabaseClusterRestoreResponse parses an HTTP response from a UpdateDatabaseClusterRestoreWithResponse call
func ParseUpdateDatabaseClusterRestoreResponse(rsp *http.Response) (*UpdateDatabaseClusterRestoreResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &UpdateDatabaseClusterRestoreResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest DatabaseClusterRestore
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 201:
		var dest DatabaseClusterRestore
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON201 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	}

	return response, nil
}

// ParseListDatabaseClustersResponse parses an HTTP response from a ListDatabaseClustersWithResponse call
func ParseListDatabaseClustersResponse(rsp *http.Response) (*ListDatabaseClustersResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &ListDatabaseClustersResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest DatabaseClusterList
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	}

	return response, nil
}

// ParseCreateDatabaseClusterResponse parses an HTTP response from a CreateDatabaseClusterWithResponse call
func ParseCreateDatabaseClusterResponse(rsp *http.Response) (*CreateDatabaseClusterResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &CreateDatabaseClusterResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest DatabaseCluster
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 201:
		var dest DatabaseCluster
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON201 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 202:
		var dest DatabaseCluster
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON202 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	}

	return response, nil
}

// ParseListDatabaseClusterBackupsResponse parses an HTTP response from a ListDatabaseClusterBackupsWithResponse call
func ParseListDatabaseClusterBackupsResponse(rsp *http.Response) (*ListDatabaseClusterBackupsResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &ListDatabaseClusterBackupsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest DatabaseClusterBackupList
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	}

	return response, nil
}

// ParseListDatabaseClusterRestoresResponse parses an HTTP response from a ListDatabaseClusterRestoresWithResponse call
func ParseListDatabaseClusterRestoresResponse(rsp *http.Response) (*ListDatabaseClusterRestoresResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &ListDatabaseClusterRestoresResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest DatabaseClusterRestoreList
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	}

	return response, nil
}

// ParseDeleteDatabaseClusterResponse parses an HTTP response from a DeleteDatabaseClusterWithResponse call
func ParseDeleteDatabaseClusterResponse(rsp *http.Response) (*DeleteDatabaseClusterResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &DeleteDatabaseClusterResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest IoK8sApimachineryPkgApisMetaV1StatusV2
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	}

	return response, nil
}

// ParseGetDatabaseClusterResponse parses an HTTP response from a GetDatabaseClusterWithResponse call
func ParseGetDatabaseClusterResponse(rsp *http.Response) (*GetDatabaseClusterResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetDatabaseClusterResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest DatabaseCluster
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	}

	return response, nil
}

// ParseUpdateDatabaseClusterResponse parses an HTTP response from a UpdateDatabaseClusterWithResponse call
func ParseUpdateDatabaseClusterResponse(rsp *http.Response) (*UpdateDatabaseClusterResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &UpdateDatabaseClusterResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest DatabaseCluster
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	}

	return response, nil
}

// ParseGetDatabaseClusterComponentsResponse parses an HTTP response from a GetDatabaseClusterComponentsWithResponse call
func ParseGetDatabaseClusterComponentsResponse(rsp *http.Response) (*GetDatabaseClusterComponentsResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetDatabaseClusterComponentsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest DatabaseClusterComponents
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	}

	return response, nil
}

// ParseGetDatabaseClusterCredentialsResponse parses an HTTP response from a GetDatabaseClusterCredentialsWithResponse call
func ParseGetDatabaseClusterCredentialsResponse(rsp *http.Response) (*GetDatabaseClusterCredentialsResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetDatabaseClusterCredentialsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest DatabaseClusterCredential
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	}

	return response, nil
}

// ParseGetDatabaseClusterPitrResponse parses an HTTP response from a GetDatabaseClusterPitrWithResponse call
func ParseGetDatabaseClusterPitrResponse(rsp *http.Response) (*GetDatabaseClusterPitrResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetDatabaseClusterPitrResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest DatabaseClusterPitr
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	}

	return response, nil
}

// ParseListDatabaseEnginesResponse parses an HTTP response from a ListDatabaseEnginesWithResponse call
func ParseListDatabaseEnginesResponse(rsp *http.Response) (*ListDatabaseEnginesResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &ListDatabaseEnginesResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest DatabaseEngineList
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	}

	return response, nil
}

// ParseGetUpgradePlanResponse parses an HTTP response from a GetUpgradePlanWithResponse call
func ParseGetUpgradePlanResponse(rsp *http.Response) (*GetUpgradePlanResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetUpgradePlanResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest UpgradePlan
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	}

	return response, nil
}

// ParseApproveUpgradePlanResponse parses an HTTP response from a ApproveUpgradePlanWithResponse call
func ParseApproveUpgradePlanResponse(rsp *http.Response) (*ApproveUpgradePlanResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &ApproveUpgradePlanResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	}

	return response, nil
}

// ParseGetDatabaseEngineResponse parses an HTTP response from a GetDatabaseEngineWithResponse call
func ParseGetDatabaseEngineResponse(rsp *http.Response) (*GetDatabaseEngineResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetDatabaseEngineResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest DatabaseEngine
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	}

	return response, nil
}

// ParseUpdateDatabaseEngineResponse parses an HTTP response from a UpdateDatabaseEngineWithResponse call
func ParseUpdateDatabaseEngineResponse(rsp *http.Response) (*UpdateDatabaseEngineResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &UpdateDatabaseEngineResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest DatabaseEngine
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	}

	return response, nil
}

// ParseListMonitoringInstancesResponse parses an HTTP response from a ListMonitoringInstancesWithResponse call
func ParseListMonitoringInstancesResponse(rsp *http.Response) (*ListMonitoringInstancesResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &ListMonitoringInstancesResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest MonitoringInstancesList
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	}

	return response, nil
}

// ParseCreateMonitoringInstanceResponse parses an HTTP response from a CreateMonitoringInstanceWithResponse call
func ParseCreateMonitoringInstanceResponse(rsp *http.Response) (*CreateMonitoringInstanceResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &CreateMonitoringInstanceResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest MonitoringInstance
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	}

	return response, nil
}

// ParseDeleteMonitoringInstanceResponse parses an HTTP response from a DeleteMonitoringInstanceWithResponse call
func ParseDeleteMonitoringInstanceResponse(rsp *http.Response) (*DeleteMonitoringInstanceResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &DeleteMonitoringInstanceResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	}

	return response, nil
}

// ParseGetMonitoringInstanceResponse parses an HTTP response from a GetMonitoringInstanceWithResponse call
func ParseGetMonitoringInstanceResponse(rsp *http.Response) (*GetMonitoringInstanceResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetMonitoringInstanceResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest MonitoringInstance
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	}

	return response, nil
}

// ParseUpdateMonitoringInstanceResponse parses an HTTP response from a UpdateMonitoringInstanceWithResponse call
func ParseUpdateMonitoringInstanceResponse(rsp *http.Response) (*UpdateMonitoringInstanceResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &UpdateMonitoringInstanceResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest MonitoringInstance
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	}

	return response, nil
}

// ParseGetUserPermissionsResponse parses an HTTP response from a GetUserPermissionsWithResponse call
func ParseGetUserPermissionsResponse(rsp *http.Response) (*GetUserPermissionsResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetUserPermissionsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest UserPermissions
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	}

	return response, nil
}

// ParseListPodSchedulingPolicyResponse parses an HTTP response from a ListPodSchedulingPolicyWithResponse call
func ParseListPodSchedulingPolicyResponse(rsp *http.Response) (*ListPodSchedulingPolicyResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &ListPodSchedulingPolicyResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest PodSchedulingPolicyList
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	}

	return response, nil
}

// ParseCreatePodSchedulingPolicyResponse parses an HTTP response from a CreatePodSchedulingPolicyWithResponse call
func ParseCreatePodSchedulingPolicyResponse(rsp *http.Response) (*CreatePodSchedulingPolicyResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &CreatePodSchedulingPolicyResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest PodSchedulingPolicy
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	}

	return response, nil
}

// ParseDeletePodSchedulingPolicyResponse parses an HTTP response from a DeletePodSchedulingPolicyWithResponse call
func ParseDeletePodSchedulingPolicyResponse(rsp *http.Response) (*DeletePodSchedulingPolicyResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &DeletePodSchedulingPolicyResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest IoK8sApimachineryPkgApisMetaV1StatusV2
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	}

	return response, nil
}

// ParseGetPodSchedulingPolicyResponse parses an HTTP response from a GetPodSchedulingPolicyWithResponse call
func ParseGetPodSchedulingPolicyResponse(rsp *http.Response) (*GetPodSchedulingPolicyResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetPodSchedulingPolicyResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest PodSchedulingPolicy
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	}

	return response, nil
}

// ParseUpdatePodSchedulingPolicyResponse parses an HTTP response from a UpdatePodSchedulingPolicyWithResponse call
func ParseUpdatePodSchedulingPolicyResponse(rsp *http.Response) (*UpdatePodSchedulingPolicyResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &UpdatePodSchedulingPolicyResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest PodSchedulingPolicy
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	}

	return response, nil
}

// ParseGetKubernetesClusterResourcesResponse parses an HTTP response from a GetKubernetesClusterResourcesWithResponse call
func ParseGetKubernetesClusterResourcesResponse(rsp *http.Response) (*GetKubernetesClusterResourcesResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetKubernetesClusterResourcesResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest KubernetesClusterResources
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	}

	return response, nil
}

// ParseDeleteSessionResponse parses an HTTP response from a DeleteSessionWithResponse call
func ParseDeleteSessionResponse(rsp *http.Response) (*DeleteSessionResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &DeleteSessionResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 429:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON429 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	}

	return response, nil
}

// ParseCreateSessionResponse parses an HTTP response from a CreateSessionWithResponse call
func ParseCreateSessionResponse(rsp *http.Response) (*CreateSessionResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &CreateSessionResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest struct {
			Token *string `json:"token,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 429:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON429 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	}

	return response, nil
}

// ParseGetSettingsResponse parses an HTTP response from a GetSettingsWithResponse call
func ParseGetSettingsResponse(rsp *http.Response) (*GetSettingsResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetSettingsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest Settings
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest
	}

	return response, nil
}

// ParseVersionInfoResponse parses an HTTP response from a VersionInfoWithResponse call
func ParseVersionInfoResponse(rsp *http.Response) (*VersionInfoResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &VersionInfoResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest Version
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest
	}

	return response, nil
}

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{
	"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",
	"BgUA",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %w", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	res := make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	resolvePath := PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		pathToFile := url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
