// Code generated by mockery v2.46.2. DO NOT EDIT.

package kubernetes

import (
	context "context"

	go_version "github.com/hashicorp/go-version"
	operatorsv1alpha1 "github.com/operator-framework/api/pkg/operators/v1alpha1"
	mock "github.com/stretchr/testify/mock"
	appsv1 "k8s.io/api/apps/v1"
	v1 "k8s.io/api/core/v1"
	apiextensionsv1 "k8s.io/apiextensions-apiserver/pkg/apis/apiextensions/v1"
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	types "k8s.io/apimachinery/pkg/types"
	version "k8s.io/apimachinery/pkg/version"
	rest "k8s.io/client-go/rest"

	v1alpha1 "github.com/percona/everest-operator/api/v1alpha1"
	accounts "github.com/percona/everest/pkg/accounts"
	common "github.com/percona/everest/pkg/common"
	client "github.com/percona/everest/pkg/kubernetes/client"
)

// MockKubernetesConnector is an autogenerated mock type for the KubernetesConnector type
type MockKubernetesConnector struct {
	mock.Mock
}

// Accounts provides a mock function with given fields:
func (_m *MockKubernetesConnector) Accounts() accounts.Interface {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for Accounts")
	}

	var r0 accounts.Interface
	if rf, ok := ret.Get(0).(func() accounts.Interface); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(accounts.Interface)
		}
	}

	return r0
}

// ApplyManifestFile provides a mock function with given fields: files, namespace
func (_m *MockKubernetesConnector) ApplyManifestFile(files []byte, namespace string) error {
	ret := _m.Called(files, namespace)

	if len(ret) == 0 {
		panic("no return value specified for ApplyManifestFile")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func([]byte, string) error); ok {
		r0 = rf(files, namespace)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// ApproveInstallPlan provides a mock function with given fields: ctx, namespace, installPlanName
func (_m *MockKubernetesConnector) ApproveInstallPlan(ctx context.Context, namespace string, installPlanName string) (bool, error) {
	ret := _m.Called(ctx, namespace, installPlanName)

	if len(ret) == 0 {
		panic("no return value specified for ApproveInstallPlan")
	}

	var r0 bool
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string, string) (bool, error)); ok {
		return rf(ctx, namespace, installPlanName)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string, string) bool); ok {
		r0 = rf(ctx, namespace, installPlanName)
	} else {
		r0 = ret.Get(0).(bool)
	}

	if rf, ok := ret.Get(1).(func(context.Context, string, string) error); ok {
		r1 = rf(ctx, namespace, installPlanName)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ClusterName provides a mock function with given fields:
func (_m *MockKubernetesConnector) ClusterName() string {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for ClusterName")
	}

	var r0 string
	if rf, ok := ret.Get(0).(func() string); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(string)
	}

	return r0
}

// Config provides a mock function with given fields:
func (_m *MockKubernetesConnector) Config() *rest.Config {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for Config")
	}

	var r0 *rest.Config
	if rf, ok := ret.Get(0).(func() *rest.Config); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*rest.Config)
		}
	}

	return r0
}

// CreateBackupStorage provides a mock function with given fields: ctx, storage
func (_m *MockKubernetesConnector) CreateBackupStorage(ctx context.Context, storage *v1alpha1.BackupStorage) error {
	ret := _m.Called(ctx, storage)

	if len(ret) == 0 {
		panic("no return value specified for CreateBackupStorage")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, *v1alpha1.BackupStorage) error); ok {
		r0 = rf(ctx, storage)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// CreateMonitoringConfig provides a mock function with given fields: ctx, storage
func (_m *MockKubernetesConnector) CreateMonitoringConfig(ctx context.Context, storage *v1alpha1.MonitoringConfig) error {
	ret := _m.Called(ctx, storage)

	if len(ret) == 0 {
		panic("no return value specified for CreateMonitoringConfig")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, *v1alpha1.MonitoringConfig) error); ok {
		r0 = rf(ctx, storage)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// CreateNamespace provides a mock function with given fields: ctx, namespace
func (_m *MockKubernetesConnector) CreateNamespace(ctx context.Context, namespace *v1.Namespace) error {
	ret := _m.Called(ctx, namespace)

	if len(ret) == 0 {
		panic("no return value specified for CreateNamespace")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, *v1.Namespace) error); ok {
		r0 = rf(ctx, namespace)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// CreateRSAKeyPair provides a mock function with given fields: ctx
func (_m *MockKubernetesConnector) CreateRSAKeyPair(ctx context.Context) error {
	ret := _m.Called(ctx)

	if len(ret) == 0 {
		panic("no return value specified for CreateRSAKeyPair")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context) error); ok {
		r0 = rf(ctx)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// CreateSecret provides a mock function with given fields: ctx, secret
func (_m *MockKubernetesConnector) CreateSecret(ctx context.Context, secret *v1.Secret) (*v1.Secret, error) {
	ret := _m.Called(ctx, secret)

	if len(ret) == 0 {
		panic("no return value specified for CreateSecret")
	}

	var r0 *v1.Secret
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *v1.Secret) (*v1.Secret, error)); ok {
		return rf(ctx, secret)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *v1.Secret) *v1.Secret); ok {
		r0 = rf(ctx, secret)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*v1.Secret)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *v1.Secret) error); ok {
		r1 = rf(ctx, secret)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DeleteBackupStorage provides a mock function with given fields: ctx, namespace, name
func (_m *MockKubernetesConnector) DeleteBackupStorage(ctx context.Context, namespace string, name string) error {
	ret := _m.Called(ctx, namespace, name)

	if len(ret) == 0 {
		panic("no return value specified for DeleteBackupStorage")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, string, string) error); ok {
		r0 = rf(ctx, namespace, name)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// DeleteCRD provides a mock function with given fields: ctx, name
func (_m *MockKubernetesConnector) DeleteCRD(ctx context.Context, name string) error {
	ret := _m.Called(ctx, name)

	if len(ret) == 0 {
		panic("no return value specified for DeleteCRD")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, string) error); ok {
		r0 = rf(ctx, name)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// DeleteCatalogSource provides a mock function with given fields: ctx, name, namespace
func (_m *MockKubernetesConnector) DeleteCatalogSource(ctx context.Context, name string, namespace string) error {
	ret := _m.Called(ctx, name, namespace)

	if len(ret) == 0 {
		panic("no return value specified for DeleteCatalogSource")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, string, string) error); ok {
		r0 = rf(ctx, name, namespace)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// DeleteClusterServiceVersion provides a mock function with given fields: ctx, key
func (_m *MockKubernetesConnector) DeleteClusterServiceVersion(ctx context.Context, key types.NamespacedName) error {
	ret := _m.Called(ctx, key)

	if len(ret) == 0 {
		panic("no return value specified for DeleteClusterServiceVersion")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, types.NamespacedName) error); ok {
		r0 = rf(ctx, key)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// DeleteDeployment provides a mock function with given fields: ctx, name, namespace
func (_m *MockKubernetesConnector) DeleteDeployment(ctx context.Context, name string, namespace string) error {
	ret := _m.Called(ctx, name, namespace)

	if len(ret) == 0 {
		panic("no return value specified for DeleteDeployment")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, string, string) error); ok {
		r0 = rf(ctx, name, namespace)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// DeleteManifestFile provides a mock function with given fields: fileBytes, namespace
func (_m *MockKubernetesConnector) DeleteManifestFile(fileBytes []byte, namespace string) error {
	ret := _m.Called(fileBytes, namespace)

	if len(ret) == 0 {
		panic("no return value specified for DeleteManifestFile")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func([]byte, string) error); ok {
		r0 = rf(fileBytes, namespace)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// DeleteMonitoringConfig provides a mock function with given fields: ctx, namespace, name
func (_m *MockKubernetesConnector) DeleteMonitoringConfig(ctx context.Context, namespace string, name string) error {
	ret := _m.Called(ctx, namespace, name)

	if len(ret) == 0 {
		panic("no return value specified for DeleteMonitoringConfig")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, string, string) error); ok {
		r0 = rf(ctx, namespace, name)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// DeleteNamespace provides a mock function with given fields: ctx, name
func (_m *MockKubernetesConnector) DeleteNamespace(ctx context.Context, name string) error {
	ret := _m.Called(ctx, name)

	if len(ret) == 0 {
		panic("no return value specified for DeleteNamespace")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, string) error); ok {
		r0 = rf(ctx, name)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// DeleteSecret provides a mock function with given fields: ctx, namespace, name
func (_m *MockKubernetesConnector) DeleteSecret(ctx context.Context, namespace string, name string) error {
	ret := _m.Called(ctx, namespace, name)

	if len(ret) == 0 {
		panic("no return value specified for DeleteSecret")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, string, string) error); ok {
		r0 = rf(ctx, namespace, name)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// DeleteSubscription provides a mock function with given fields: ctx, key
func (_m *MockKubernetesConnector) DeleteSubscription(ctx context.Context, key types.NamespacedName) error {
	ret := _m.Called(ctx, key)

	if len(ret) == 0 {
		panic("no return value specified for DeleteSubscription")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, types.NamespacedName) error); ok {
		r0 = rf(ctx, key)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// GetBackupStorage provides a mock function with given fields: ctx, namespace, name
func (_m *MockKubernetesConnector) GetBackupStorage(ctx context.Context, namespace string, name string) (*v1alpha1.BackupStorage, error) {
	ret := _m.Called(ctx, namespace, name)

	if len(ret) == 0 {
		panic("no return value specified for GetBackupStorage")
	}

	var r0 *v1alpha1.BackupStorage
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string, string) (*v1alpha1.BackupStorage, error)); ok {
		return rf(ctx, namespace, name)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string, string) *v1alpha1.BackupStorage); ok {
		r0 = rf(ctx, namespace, name)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*v1alpha1.BackupStorage)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string, string) error); ok {
		r1 = rf(ctx, namespace, name)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetCatalogSource provides a mock function with given fields: ctx, name, namespace
func (_m *MockKubernetesConnector) GetCatalogSource(ctx context.Context, name string, namespace string) (*operatorsv1alpha1.CatalogSource, error) {
	ret := _m.Called(ctx, name, namespace)

	if len(ret) == 0 {
		panic("no return value specified for GetCatalogSource")
	}

	var r0 *operatorsv1alpha1.CatalogSource
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string, string) (*operatorsv1alpha1.CatalogSource, error)); ok {
		return rf(ctx, name, namespace)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string, string) *operatorsv1alpha1.CatalogSource); ok {
		r0 = rf(ctx, name, namespace)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*operatorsv1alpha1.CatalogSource)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string, string) error); ok {
		r1 = rf(ctx, name, namespace)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetClusterServiceVersion provides a mock function with given fields: ctx, key
func (_m *MockKubernetesConnector) GetClusterServiceVersion(ctx context.Context, key types.NamespacedName) (*operatorsv1alpha1.ClusterServiceVersion, error) {
	ret := _m.Called(ctx, key)

	if len(ret) == 0 {
		panic("no return value specified for GetClusterServiceVersion")
	}

	var r0 *operatorsv1alpha1.ClusterServiceVersion
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, types.NamespacedName) (*operatorsv1alpha1.ClusterServiceVersion, error)); ok {
		return rf(ctx, key)
	}
	if rf, ok := ret.Get(0).(func(context.Context, types.NamespacedName) *operatorsv1alpha1.ClusterServiceVersion); ok {
		r0 = rf(ctx, key)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*operatorsv1alpha1.ClusterServiceVersion)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, types.NamespacedName) error); ok {
		r1 = rf(ctx, key)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetClusterType provides a mock function with given fields: ctx
func (_m *MockKubernetesConnector) GetClusterType(ctx context.Context) (ClusterType, error) {
	ret := _m.Called(ctx)

	if len(ret) == 0 {
		panic("no return value specified for GetClusterType")
	}

	var r0 ClusterType
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context) (ClusterType, error)); ok {
		return rf(ctx)
	}
	if rf, ok := ret.Get(0).(func(context.Context) ClusterType); ok {
		r0 = rf(ctx)
	} else {
		r0 = ret.Get(0).(ClusterType)
	}

	if rf, ok := ret.Get(1).(func(context.Context) error); ok {
		r1 = rf(ctx)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetConfigMap provides a mock function with given fields: ctx, namespace, name
func (_m *MockKubernetesConnector) GetConfigMap(ctx context.Context, namespace string, name string) (*v1.ConfigMap, error) {
	ret := _m.Called(ctx, namespace, name)

	if len(ret) == 0 {
		panic("no return value specified for GetConfigMap")
	}

	var r0 *v1.ConfigMap
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string, string) (*v1.ConfigMap, error)); ok {
		return rf(ctx, namespace, name)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string, string) *v1.ConfigMap); ok {
		r0 = rf(ctx, namespace, name)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*v1.ConfigMap)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string, string) error); ok {
		r1 = rf(ctx, namespace, name)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetDBNamespaces provides a mock function with given fields: ctx
func (_m *MockKubernetesConnector) GetDBNamespaces(ctx context.Context) ([]string, error) {
	ret := _m.Called(ctx)

	if len(ret) == 0 {
		panic("no return value specified for GetDBNamespaces")
	}

	var r0 []string
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context) ([]string, error)); ok {
		return rf(ctx)
	}
	if rf, ok := ret.Get(0).(func(context.Context) []string); ok {
		r0 = rf(ctx)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]string)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context) error); ok {
		r1 = rf(ctx)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetDatabaseEngine provides a mock function with given fields: ctx, namespace, name
func (_m *MockKubernetesConnector) GetDatabaseEngine(ctx context.Context, namespace string, name string) (*v1alpha1.DatabaseEngine, error) {
	ret := _m.Called(ctx, namespace, name)

	if len(ret) == 0 {
		panic("no return value specified for GetDatabaseEngine")
	}

	var r0 *v1alpha1.DatabaseEngine
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string, string) (*v1alpha1.DatabaseEngine, error)); ok {
		return rf(ctx, namespace, name)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string, string) *v1alpha1.DatabaseEngine); ok {
		r0 = rf(ctx, namespace, name)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*v1alpha1.DatabaseEngine)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string, string) error); ok {
		r1 = rf(ctx, namespace, name)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetDeployment provides a mock function with given fields: ctx, name, namespace
func (_m *MockKubernetesConnector) GetDeployment(ctx context.Context, name string, namespace string) (*appsv1.Deployment, error) {
	ret := _m.Called(ctx, name, namespace)

	if len(ret) == 0 {
		panic("no return value specified for GetDeployment")
	}

	var r0 *appsv1.Deployment
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string, string) (*appsv1.Deployment, error)); ok {
		return rf(ctx, name, namespace)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string, string) *appsv1.Deployment); ok {
		r0 = rf(ctx, name, namespace)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*appsv1.Deployment)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string, string) error); ok {
		r1 = rf(ctx, name, namespace)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetEverestID provides a mock function with given fields: ctx
func (_m *MockKubernetesConnector) GetEverestID(ctx context.Context) (string, error) {
	ret := _m.Called(ctx)

	if len(ret) == 0 {
		panic("no return value specified for GetEverestID")
	}

	var r0 string
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context) (string, error)); ok {
		return rf(ctx)
	}
	if rf, ok := ret.Get(0).(func(context.Context) string); ok {
		r0 = rf(ctx)
	} else {
		r0 = ret.Get(0).(string)
	}

	if rf, ok := ret.Get(1).(func(context.Context) error); ok {
		r1 = rf(ctx)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetEverestSettings provides a mock function with given fields: ctx
func (_m *MockKubernetesConnector) GetEverestSettings(ctx context.Context) (common.EverestSettings, error) {
	ret := _m.Called(ctx)

	if len(ret) == 0 {
		panic("no return value specified for GetEverestSettings")
	}

	var r0 common.EverestSettings
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context) (common.EverestSettings, error)); ok {
		return rf(ctx)
	}
	if rf, ok := ret.Get(0).(func(context.Context) common.EverestSettings); ok {
		r0 = rf(ctx)
	} else {
		r0 = ret.Get(0).(common.EverestSettings)
	}

	if rf, ok := ret.Get(1).(func(context.Context) error); ok {
		r1 = rf(ctx)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetMonitoringConfig provides a mock function with given fields: ctx, namespace, name
func (_m *MockKubernetesConnector) GetMonitoringConfig(ctx context.Context, namespace string, name string) (*v1alpha1.MonitoringConfig, error) {
	ret := _m.Called(ctx, namespace, name)

	if len(ret) == 0 {
		panic("no return value specified for GetMonitoringConfig")
	}

	var r0 *v1alpha1.MonitoringConfig
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string, string) (*v1alpha1.MonitoringConfig, error)); ok {
		return rf(ctx, namespace, name)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string, string) *v1alpha1.MonitoringConfig); ok {
		r0 = rf(ctx, namespace, name)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*v1alpha1.MonitoringConfig)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string, string) error); ok {
		r1 = rf(ctx, namespace, name)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetMonitoringConfigsBySecretName provides a mock function with given fields: ctx, namespace, secretName
func (_m *MockKubernetesConnector) GetMonitoringConfigsBySecretName(ctx context.Context, namespace string, secretName string) ([]*v1alpha1.MonitoringConfig, error) {
	ret := _m.Called(ctx, namespace, secretName)

	if len(ret) == 0 {
		panic("no return value specified for GetMonitoringConfigsBySecretName")
	}

	var r0 []*v1alpha1.MonitoringConfig
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string, string) ([]*v1alpha1.MonitoringConfig, error)); ok {
		return rf(ctx, namespace, secretName)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string, string) []*v1alpha1.MonitoringConfig); ok {
		r0 = rf(ctx, namespace, secretName)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*v1alpha1.MonitoringConfig)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string, string) error); ok {
		r1 = rf(ctx, namespace, secretName)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetNamespace provides a mock function with given fields: ctx, name
func (_m *MockKubernetesConnector) GetNamespace(ctx context.Context, name string) (*v1.Namespace, error) {
	ret := _m.Called(ctx, name)

	if len(ret) == 0 {
		panic("no return value specified for GetNamespace")
	}

	var r0 *v1.Namespace
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string) (*v1.Namespace, error)); ok {
		return rf(ctx, name)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string) *v1.Namespace); ok {
		r0 = rf(ctx, name)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*v1.Namespace)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, name)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetSecret provides a mock function with given fields: ctx, namespace, name
func (_m *MockKubernetesConnector) GetSecret(ctx context.Context, namespace string, name string) (*v1.Secret, error) {
	ret := _m.Called(ctx, namespace, name)

	if len(ret) == 0 {
		panic("no return value specified for GetSecret")
	}

	var r0 *v1.Secret
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string, string) (*v1.Secret, error)); ok {
		return rf(ctx, namespace, name)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string, string) *v1.Secret); ok {
		r0 = rf(ctx, namespace, name)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*v1.Secret)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string, string) error); ok {
		r1 = rf(ctx, namespace, name)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetServerVersion provides a mock function with given fields:
func (_m *MockKubernetesConnector) GetServerVersion() (*version.Info, error) {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for GetServerVersion")
	}

	var r0 *version.Info
	var r1 error
	if rf, ok := ret.Get(0).(func() (*version.Info, error)); ok {
		return rf()
	}
	if rf, ok := ret.Get(0).(func() *version.Info); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*version.Info)
		}
	}

	if rf, ok := ret.Get(1).(func() error); ok {
		r1 = rf()
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetSubscription provides a mock function with given fields: ctx, name, namespace
func (_m *MockKubernetesConnector) GetSubscription(ctx context.Context, name string, namespace string) (*operatorsv1alpha1.Subscription, error) {
	ret := _m.Called(ctx, name, namespace)

	if len(ret) == 0 {
		panic("no return value specified for GetSubscription")
	}

	var r0 *operatorsv1alpha1.Subscription
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string, string) (*operatorsv1alpha1.Subscription, error)); ok {
		return rf(ctx, name, namespace)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string, string) *operatorsv1alpha1.Subscription); ok {
		r0 = rf(ctx, name, namespace)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*operatorsv1alpha1.Subscription)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string, string) error); ok {
		r1 = rf(ctx, name, namespace)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// IsBackupStorageUsed provides a mock function with given fields: ctx, namespace, name
func (_m *MockKubernetesConnector) IsBackupStorageUsed(ctx context.Context, namespace string, name string) (bool, error) {
	ret := _m.Called(ctx, namespace, name)

	if len(ret) == 0 {
		panic("no return value specified for IsBackupStorageUsed")
	}

	var r0 bool
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string, string) (bool, error)); ok {
		return rf(ctx, namespace, name)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string, string) bool); ok {
		r0 = rf(ctx, namespace, name)
	} else {
		r0 = ret.Get(0).(bool)
	}

	if rf, ok := ret.Get(1).(func(context.Context, string, string) error); ok {
		r1 = rf(ctx, namespace, name)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// IsMonitoringConfigUsed provides a mock function with given fields: ctx, namespace, name
func (_m *MockKubernetesConnector) IsMonitoringConfigUsed(ctx context.Context, namespace string, name string) (bool, error) {
	ret := _m.Called(ctx, namespace, name)

	if len(ret) == 0 {
		panic("no return value specified for IsMonitoringConfigUsed")
	}

	var r0 bool
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string, string) (bool, error)); ok {
		return rf(ctx, namespace, name)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string, string) bool); ok {
		r0 = rf(ctx, namespace, name)
	} else {
		r0 = ret.Get(0).(bool)
	}

	if rf, ok := ret.Get(1).(func(context.Context, string, string) error); ok {
		r1 = rf(ctx, namespace, name)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ListBackupStorages provides a mock function with given fields: ctx, namespace
func (_m *MockKubernetesConnector) ListBackupStorages(ctx context.Context, namespace string) (*v1alpha1.BackupStorageList, error) {
	ret := _m.Called(ctx, namespace)

	if len(ret) == 0 {
		panic("no return value specified for ListBackupStorages")
	}

	var r0 *v1alpha1.BackupStorageList
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string) (*v1alpha1.BackupStorageList, error)); ok {
		return rf(ctx, namespace)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string) *v1alpha1.BackupStorageList); ok {
		r0 = rf(ctx, namespace)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*v1alpha1.BackupStorageList)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, namespace)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ListCRDs provides a mock function with given fields: ctx
func (_m *MockKubernetesConnector) ListCRDs(ctx context.Context) (*apiextensionsv1.CustomResourceDefinitionList, error) {
	ret := _m.Called(ctx)

	if len(ret) == 0 {
		panic("no return value specified for ListCRDs")
	}

	var r0 *apiextensionsv1.CustomResourceDefinitionList
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context) (*apiextensionsv1.CustomResourceDefinitionList, error)); ok {
		return rf(ctx)
	}
	if rf, ok := ret.Get(0).(func(context.Context) *apiextensionsv1.CustomResourceDefinitionList); ok {
		r0 = rf(ctx)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*apiextensionsv1.CustomResourceDefinitionList)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context) error); ok {
		r1 = rf(ctx)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ListClusterServiceVersion provides a mock function with given fields: ctx, namespace
func (_m *MockKubernetesConnector) ListClusterServiceVersion(ctx context.Context, namespace string) (*operatorsv1alpha1.ClusterServiceVersionList, error) {
	ret := _m.Called(ctx, namespace)

	if len(ret) == 0 {
		panic("no return value specified for ListClusterServiceVersion")
	}

	var r0 *operatorsv1alpha1.ClusterServiceVersionList
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string) (*operatorsv1alpha1.ClusterServiceVersionList, error)); ok {
		return rf(ctx, namespace)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string) *operatorsv1alpha1.ClusterServiceVersionList); ok {
		r0 = rf(ctx, namespace)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*operatorsv1alpha1.ClusterServiceVersionList)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, namespace)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ListDatabaseEngines provides a mock function with given fields: ctx, namespace
func (_m *MockKubernetesConnector) ListDatabaseEngines(ctx context.Context, namespace string) (*v1alpha1.DatabaseEngineList, error) {
	ret := _m.Called(ctx, namespace)

	if len(ret) == 0 {
		panic("no return value specified for ListDatabaseEngines")
	}

	var r0 *v1alpha1.DatabaseEngineList
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string) (*v1alpha1.DatabaseEngineList, error)); ok {
		return rf(ctx, namespace)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string) *v1alpha1.DatabaseEngineList); ok {
		r0 = rf(ctx, namespace)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*v1alpha1.DatabaseEngineList)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, namespace)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ListDeployments provides a mock function with given fields: ctx, namespace
func (_m *MockKubernetesConnector) ListDeployments(ctx context.Context, namespace string) (*appsv1.DeploymentList, error) {
	ret := _m.Called(ctx, namespace)

	if len(ret) == 0 {
		panic("no return value specified for ListDeployments")
	}

	var r0 *appsv1.DeploymentList
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string) (*appsv1.DeploymentList, error)); ok {
		return rf(ctx, namespace)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string) *appsv1.DeploymentList); ok {
		r0 = rf(ctx, namespace)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*appsv1.DeploymentList)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, namespace)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ListMonitoringConfigs provides a mock function with given fields: ctx, namespace
func (_m *MockKubernetesConnector) ListMonitoringConfigs(ctx context.Context, namespace string) (*v1alpha1.MonitoringConfigList, error) {
	ret := _m.Called(ctx, namespace)

	if len(ret) == 0 {
		panic("no return value specified for ListMonitoringConfigs")
	}

	var r0 *v1alpha1.MonitoringConfigList
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string) (*v1alpha1.MonitoringConfigList, error)); ok {
		return rf(ctx, namespace)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string) *v1alpha1.MonitoringConfigList); ok {
		r0 = rf(ctx, namespace)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*v1alpha1.MonitoringConfigList)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, namespace)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ListNamespaces provides a mock function with given fields: ctx, opts
func (_m *MockKubernetesConnector) ListNamespaces(ctx context.Context, opts metav1.ListOptions) (*v1.NamespaceList, error) {
	ret := _m.Called(ctx, opts)

	if len(ret) == 0 {
		panic("no return value specified for ListNamespaces")
	}

	var r0 *v1.NamespaceList
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, metav1.ListOptions) (*v1.NamespaceList, error)); ok {
		return rf(ctx, opts)
	}
	if rf, ok := ret.Get(0).(func(context.Context, metav1.ListOptions) *v1.NamespaceList); ok {
		r0 = rf(ctx, opts)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*v1.NamespaceList)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, metav1.ListOptions) error); ok {
		r1 = rf(ctx, opts)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ListSecrets provides a mock function with given fields: ctx, namespace
func (_m *MockKubernetesConnector) ListSecrets(ctx context.Context, namespace string) (*v1.SecretList, error) {
	ret := _m.Called(ctx, namespace)

	if len(ret) == 0 {
		panic("no return value specified for ListSecrets")
	}

	var r0 *v1.SecretList
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string) (*v1.SecretList, error)); ok {
		return rf(ctx, namespace)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string) *v1.SecretList); ok {
		r0 = rf(ctx, namespace)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*v1.SecretList)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, namespace)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Namespace provides a mock function with given fields:
func (_m *MockKubernetesConnector) Namespace() string {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for Namespace")
	}

	var r0 string
	if rf, ok := ret.Get(0).(func() string); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(string)
	}

	return r0
}

// OperatorInstalledVersion provides a mock function with given fields: ctx, namespace, name
func (_m *MockKubernetesConnector) OperatorInstalledVersion(ctx context.Context, namespace string, name string) (*go_version.Version, error) {
	ret := _m.Called(ctx, namespace, name)

	if len(ret) == 0 {
		panic("no return value specified for OperatorInstalledVersion")
	}

	var r0 *go_version.Version
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string, string) (*go_version.Version, error)); ok {
		return rf(ctx, namespace, name)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string, string) *go_version.Version); ok {
		r0 = rf(ctx, namespace, name)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*go_version.Version)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string, string) error); ok {
		r1 = rf(ctx, namespace, name)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// RestartDeployment provides a mock function with given fields: ctx, name, namespace
func (_m *MockKubernetesConnector) RestartDeployment(ctx context.Context, name string, namespace string) error {
	ret := _m.Called(ctx, name, namespace)

	if len(ret) == 0 {
		panic("no return value specified for RestartDeployment")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, string, string) error); ok {
		r0 = rf(ctx, name, namespace)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// SetDatabaseEngineLock provides a mock function with given fields: ctx, namespace, name, locked
func (_m *MockKubernetesConnector) SetDatabaseEngineLock(ctx context.Context, namespace string, name string, locked bool) error {
	ret := _m.Called(ctx, namespace, name, locked)

	if len(ret) == 0 {
		panic("no return value specified for SetDatabaseEngineLock")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, string, string, bool) error); ok {
		r0 = rf(ctx, namespace, name, locked)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// SetSecret provides a mock function with given fields: secret
func (_m *MockKubernetesConnector) SetSecret(secret *v1.Secret) error {
	ret := _m.Called(secret)

	if len(ret) == 0 {
		panic("no return value specified for SetSecret")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(*v1.Secret) error); ok {
		r0 = rf(secret)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// UpdateBackupStorage provides a mock function with given fields: ctx, storage
func (_m *MockKubernetesConnector) UpdateBackupStorage(ctx context.Context, storage *v1alpha1.BackupStorage) error {
	ret := _m.Called(ctx, storage)

	if len(ret) == 0 {
		panic("no return value specified for UpdateBackupStorage")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, *v1alpha1.BackupStorage) error); ok {
		r0 = rf(ctx, storage)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// UpdateDatabaseEngine provides a mock function with given fields: ctx, namespace, engine
func (_m *MockKubernetesConnector) UpdateDatabaseEngine(ctx context.Context, namespace string, engine *v1alpha1.DatabaseEngine) (*v1alpha1.DatabaseEngine, error) {
	ret := _m.Called(ctx, namespace, engine)

	if len(ret) == 0 {
		panic("no return value specified for UpdateDatabaseEngine")
	}

	var r0 *v1alpha1.DatabaseEngine
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string, *v1alpha1.DatabaseEngine) (*v1alpha1.DatabaseEngine, error)); ok {
		return rf(ctx, namespace, engine)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string, *v1alpha1.DatabaseEngine) *v1alpha1.DatabaseEngine); ok {
		r0 = rf(ctx, namespace, engine)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*v1alpha1.DatabaseEngine)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string, *v1alpha1.DatabaseEngine) error); ok {
		r1 = rf(ctx, namespace, engine)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UpdateDeployment provides a mock function with given fields: ctx, deployment
func (_m *MockKubernetesConnector) UpdateDeployment(ctx context.Context, deployment *appsv1.Deployment) (*appsv1.Deployment, error) {
	ret := _m.Called(ctx, deployment)

	if len(ret) == 0 {
		panic("no return value specified for UpdateDeployment")
	}

	var r0 *appsv1.Deployment
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *appsv1.Deployment) (*appsv1.Deployment, error)); ok {
		return rf(ctx, deployment)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *appsv1.Deployment) *appsv1.Deployment); ok {
		r0 = rf(ctx, deployment)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*appsv1.Deployment)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *appsv1.Deployment) error); ok {
		r1 = rf(ctx, deployment)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UpdateEverestSettings provides a mock function with given fields: ctx, settings
func (_m *MockKubernetesConnector) UpdateEverestSettings(ctx context.Context, settings common.EverestSettings) error {
	ret := _m.Called(ctx, settings)

	if len(ret) == 0 {
		panic("no return value specified for UpdateEverestSettings")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, common.EverestSettings) error); ok {
		r0 = rf(ctx, settings)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// UpdateMonitoringConfig provides a mock function with given fields: ctx, storage
func (_m *MockKubernetesConnector) UpdateMonitoringConfig(ctx context.Context, storage *v1alpha1.MonitoringConfig) error {
	ret := _m.Called(ctx, storage)

	if len(ret) == 0 {
		panic("no return value specified for UpdateMonitoringConfig")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, *v1alpha1.MonitoringConfig) error); ok {
		r0 = rf(ctx, storage)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// UpdateNamespace provides a mock function with given fields: ctx, namespace, opts
func (_m *MockKubernetesConnector) UpdateNamespace(ctx context.Context, namespace *v1.Namespace, opts metav1.UpdateOptions) (*v1.Namespace, error) {
	ret := _m.Called(ctx, namespace, opts)

	if len(ret) == 0 {
		panic("no return value specified for UpdateNamespace")
	}

	var r0 *v1.Namespace
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *v1.Namespace, metav1.UpdateOptions) (*v1.Namespace, error)); ok {
		return rf(ctx, namespace, opts)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *v1.Namespace, metav1.UpdateOptions) *v1.Namespace); ok {
		r0 = rf(ctx, namespace, opts)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*v1.Namespace)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *v1.Namespace, metav1.UpdateOptions) error); ok {
		r1 = rf(ctx, namespace, opts)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UpdateSecret provides a mock function with given fields: ctx, secret
func (_m *MockKubernetesConnector) UpdateSecret(ctx context.Context, secret *v1.Secret) (*v1.Secret, error) {
	ret := _m.Called(ctx, secret)

	if len(ret) == 0 {
		panic("no return value specified for UpdateSecret")
	}

	var r0 *v1.Secret
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *v1.Secret) (*v1.Secret, error)); ok {
		return rf(ctx, secret)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *v1.Secret) *v1.Secret); ok {
		r0 = rf(ctx, secret)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*v1.Secret)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *v1.Secret) error); ok {
		r1 = rf(ctx, secret)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// WaitForRollout provides a mock function with given fields: ctx, name, namespace
func (_m *MockKubernetesConnector) WaitForRollout(ctx context.Context, name string, namespace string) error {
	ret := _m.Called(ctx, name, namespace)

	if len(ret) == 0 {
		panic("no return value specified for WaitForRollout")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, string, string) error); ok {
		r0 = rf(ctx, name, namespace)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// WithClient provides a mock function with given fields: c
func (_m *MockKubernetesConnector) WithClient(c client.KubeClientConnector) *Kubernetes {
	ret := _m.Called(c)

	if len(ret) == 0 {
		panic("no return value specified for WithClient")
	}

	var r0 *Kubernetes
	if rf, ok := ret.Get(0).(func(client.KubeClientConnector) *Kubernetes); ok {
		r0 = rf(c)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*Kubernetes)
		}
	}

	return r0
}

// NewMockKubernetesConnector creates a new instance of MockKubernetesConnector. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockKubernetesConnector(t interface {
	mock.TestingT
	Cleanup(func())
},
) *MockKubernetesConnector {
	mock := &MockKubernetesConnector{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
